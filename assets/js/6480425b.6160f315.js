"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[6190],{3627:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var o=n(4848),i=n(8453);const s={},r="Custom bulk actions",a={id:"tutorial/Customization/bulkActions",title:"Custom bulk actions",description:"You might need to give admin users a feature to perform same action on multiple records at once.",source:"@site/docs/tutorial/03-Customization/09-bulkActions.md",sourceDirName:"tutorial/03-Customization",slug:"/tutorial/Customization/bulkActions",permalink:"/docs/tutorial/Customization/bulkActions",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Page Injections",permalink:"/docs/tutorial/Customization/pageInjections"},next:{title:"Menu Configuration",permalink:"/docs/tutorial/Customization/menuConfiguration"}},d={},c=[{value:"Limiting access to bulk actions",id:"limiting-access-to-bulk-actions",level:2}];function l(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"custom-bulk-actions",children:"Custom bulk actions"}),"\n",(0,o.jsx)(t.p,{children:"You might need to give admin users a feature to perform same action on multiple records at once."}),"\n",(0,o.jsxs)(t.p,{children:["For example you might want allow setting ",(0,o.jsx)(t.code,{children:"listed"})," field to ",(0,o.jsx)(t.code,{children:"false"})," for multiple apartment records at once."]}),"\n",(0,o.jsx)(t.p,{children:"AdminForth by default provides a checkbox in first column of the list view for this purposes."}),"\n",(0,o.jsxs)(t.p,{children:["By default AdminForth provides only one bulk action ",(0,o.jsx)(t.code,{children:"delete"})," which allows to delete multiple records at once\n(if deletion for records available by ",(0,o.jsx)(t.a,{href:"/docs/api/types/AdminForthConfig/type-aliases/AdminForthResource#optionsallowedactions",children:"resource.options.allowedActions"}),")"]}),"\n",(0,o.jsx)(t.p,{children:"To add custom bulk action quickly:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",metastring:'title="./resources/apartments.ts"',children:"//diff-add\nimport { AdminUser } from 'adminforth';\n\n{\n  ...\n  resourceId: 'aparts',\n     ...\n     options: {\n//diff-add\n        bulkActions: [\n//diff-add\n          {\n//diff-add\n            label: 'Mark as listed',\n//diff-add\n            icon: 'flowbite:eye-solid',\n//diff-add\n            state:'active',\n//diff-add\n            // if optional `confirm` is provided, user will be asked to confirm action\n//diff-add\n            confirm: 'Are you sure you want to mark all selected apartments as listed?',\n//diff-add\n            action: function ({selectedIds, adminUser }: {selectedIds: any[], adminUser: AdminUser }) {\n//diff-add\n              const stmt = db.prepare(`UPDATE apartments SET listed = 1 WHERE id IN (${selectedIds.map(() => '?').join(',')})`);\n//diff-add\n              stmt.run(...selectedIds);\n//diff-add\n              return { ok: true, error: false, successMessage: `Marked ${selectedIds.length} apartments as listed` };\n//diff-add\n            },\n//diff-add\n          }\n//diff-add\n        ],\n//diff-add\n      }\n}\n"})}),"\n",(0,o.jsx)(t.p,{children:"Action code is called on the server side only and allowed to only authorized users."}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:"\u261d\ufe0f AdminForth provides no way to update the data, it is your responsibility to manage the data by selectedIds. You can use any ORM system\nor write raw queries to update the data."}),"\n"]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:["\u261d\ufe0f You can use ",(0,o.jsx)(t.code,{children:"adminUser"})," object to check whether user is allowed to perform bulk action"]}),"\n"]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:["Action response can return optional ",(0,o.jsx)(t.code,{children:"successMessage"})," property which will be shown to user after action is performed. If this property is not provided, no messages will be shown to user."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["Here is how it looks:\n",(0,o.jsx)(t.img,{alt:"alt text",src:n(590).A+"",width:"3700",height:"2044"})]}),"\n",(0,o.jsx)(t.h2,{id:"limiting-access-to-bulk-actions",children:"Limiting access to bulk actions"}),"\n",(0,o.jsx)(t.p,{children:"You might want to allow only certain users to perform your custom bulk action."}),"\n",(0,o.jsxs)(t.p,{children:["To implement this limitation use ",(0,o.jsx)(t.code,{children:"allowed"}),":"]}),"\n",(0,o.jsx)(t.p,{children:"< todo >"})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},590:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/Custom bulk actions-d43f3c77538ddc5e33c6891692bec9b0.png"},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var o=n(6540);const i={},s=o.createContext(i);function r(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);