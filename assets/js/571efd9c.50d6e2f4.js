"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[5915],{1703:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var i=t(4848),r=t(8453);const a={},o="Creating and Editing records",s={id:"tutorial/Customization/creatingAndEditing",title:"Creating and Editing records",description:"Fill with default values",source:"@site/docs/tutorial/03-Customization/13-creatingAndEditing.md",sourceDirName:"tutorial/03-Customization",slug:"/tutorial/Customization/creatingAndEditing",permalink:"/docs/tutorial/Customization/creatingAndEditing",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:13,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Security",permalink:"/docs/tutorial/Customization/security"},next:{title:"Deploy in Docker",permalink:"/docs/tutorial/deploy"}},d={},l=[{value:"Fill with default values",id:"fill-with-default-values",level:2},{value:"Fields Grouping",id:"fields-grouping",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"creating-and-editing-records",children:"Creating and Editing records"}),"\n",(0,i.jsx)(n.h2,{id:"fill-with-default-values",children:"Fill with default values"}),"\n",(0,i.jsx)(n.p,{children:"Sometimes you want to generate some field value without asking user to fill it. For example createdAt oftenly store time of creation of the record. You can do this by using fillOnCreate:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/appartments.ts" ',children:"\nnew AdminForth({\n  ...\n  resources: [\n    {\n      name: 'appartments',\n      fields: [\n        ...\n        {\n          name: 'created_at',\n          type: AdminForthDataTypes.DATETIME,\n//diff-add\n          fillOnCreate: ({ initialRecord, adminUser }) => (new Date()).toISOString(),\n        },\n      ],\n    },\n    ...\n  ],\n"})}),"\n",(0,i.jsx)(n.p,{children:"Also you can assign adminUser ID by adminUser.dbUser.id in same hook:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/appartments.ts"',children:"new AdminForth({\n  ...\n  resources: [\n    {\n      name: 'appartments',\n      fields: [\n        ...\n        {\n          name: 'created_by',\n          type: AdminForthDataTypes.STRING,\n//diff-add\n          fillOnCreate: ({ initialRecord, adminUser }) => adminUser.dbUser.id,\n        },\n      ],\n    },\n    ...\n  ],\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Same effect can be achieved by using ",(0,i.jsx)(n.a,{href:"/docs/tutorial/Customization/hooks/#modify-the-data-before-it-is-saved-to-the-database",children:"hooks"}),". But ",(0,i.jsx)(n.code,{children:"fillOnCreate"})," might be shorter and more readable."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"fields-grouping",children:"Fields Grouping"}),"\n",(0,i.jsx)(n.p,{children:"//todo"})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var i=t(6540);const r={},a=i.createContext(r);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);