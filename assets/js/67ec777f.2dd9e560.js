"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[6331],{3419:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"tutorial/Plugins/markdown","title":"Markdown","description":"The Markdown plugin enables Markdown support in AdminForth, allowing users to create and edit fields using Markdown syntax and save rich content in Markdown syntax.","source":"@site/docs/tutorial/07-Plugins/14-markdown.md","sourceDirName":"tutorial/07-Plugins","slug":"/tutorial/Plugins/markdown","permalink":"/docs/tutorial/Plugins/markdown","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":14,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"List in place edit","permalink":"/docs/tutorial/Plugins/list-in-place-edit"},"next":{"title":"ForeignInlineShow","permalink":"/docs/tutorial/Plugins/ForeignInlineShow"}}');var t=i(4848),r=i(8453);const s={},o="Markdown",d={},l=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:3},{value:"Imges in Markdown",id:"imges-in-markdown",level:3}];function c(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"markdown",children:"Markdown"})}),"\n",(0,t.jsx)(n.p,{children:"The Markdown plugin enables Markdown support in AdminForth, allowing users to create and edit fields using Markdown syntax and save rich content in Markdown syntax."}),"\n",(0,t.jsx)(n.p,{children:"Also, it allows previewing of Markdown fields in the show page."}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.p,{children:"To install the plugin:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install @adminforth/markdown --save\n"})}),"\n",(0,t.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.p,{children:"Instantiate the plugin in your apartments resource file for 'description' field."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/apartments.ts"',children:"import MarkdownPlugin from '@adminforth/markdown';\n\n// ... existing resource configuration ...\n\nplugins: [\n  new MarkdownPlugin({fieldName: \"description\"}),\n]\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Please note that plugin can only work on TEXT and STRING fields"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Here is how it looks in the create view:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"alt text",src:i(2330).A+"",width:"1646",height:"1254"})}),"\n",(0,t.jsx)(n.p,{children:"Here is how it looks in show view:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"alt text",src:i(2429).A+"",width:"1598",height:"1246"}),"\n",(0,t.jsx)(n.img,{alt:"alt text",src:i(1190).A+"",width:"1598",height:"1246"})]}),"\n",(0,t.jsx)(n.h3,{id:"imges-in-markdown",children:"Imges in Markdown"}),"\n",(0,t.jsx)(n.p,{children:"First, you need to create resource for images:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-prisma",metastring:'title="schema.prisma"',children:"model description_image {\n    id          String   @id\n    created_at  DateTime\n    resource_id String\n    record_id   String\n    image_path  String\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm run makemigration -- --name add_description_image && npm run migrate:local\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm i @adminforth/upload --save\nnpm i @adminforth/storage-adapter-local --save\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/description_images.ts"',children:'import AdminForthStorageAdapterLocalFilesystem from "@adminforth/storage-adapter-local";\nimport { AdminForthResourceInput } from "adminforth";\nimport UploadPlugin from "@adminforth/upload";\nimport { v1 as uuid } from "uuid";\n\nexport default {\n  dataSource: "maindb",\n  table: "description_image",\n  resourceId: "description_images",\n  label: "Description images",\n  columns: [\n    {\n      name: "id",\n      primaryKey: true,\n      required: false,\n      fillOnCreate: ({ initialRecord }: any) => uuid(),\n      showIn: {\n        create: false,\n      },\n    },\n    {\n      name: "created_at",\n      required: false,\n      fillOnCreate: ({ initialRecord }: any) => new Date().toISOString(),\n      showIn: {\n        create: false,\n      },\n    },\n    { name: "resource_id", required: false },\n    { name: "record_id", required: false },\n    { name: "image_path", required: false },\n  ],\n  plugins: [\n    new UploadPlugin({\n      pathColumnName: "image_path",\n      \n      // rich editor plugin supports only \'public-read\' ACL images for SEO purposes (instead of presigned URLs which change every time)\n      storageAdapter: new AdminForthStorageAdapterLocalFilesystem({\n        fileSystemFolder: "./db/uploads/description_images", // folder where files will be stored on disk\n        adminServeBaseUrl: "static/source", // the adapter not only stores files, but also serves them for HTTP requests\n        mode: "public", // public if all files should be accessible from the web, private only if could be accesed by temporary presigned links\n        signingSecret: process.env.ADMINFORTH_SECRET, // secret used to generate presigned URLs\n      }),\n  \n      allowedFileExtensions: [\n        "jpg",\n        "jpeg",\n        "png",\n        "gif",\n        "webm",\n        "exe",\n        "webp",\n      ],\n      maxFileSize: 1024 * 1024 * 20, // 5MB\n\n\n      filePath: ({ originalFilename, originalExtension, contentType }) =>\n        `description_images/${new Date().getFullYear()}/${uuid()}/${originalFilename}.${originalExtension}`,\n\n      preview: {\n        // Used to display preview (if it is image) in list and show views instead of just path\n        // previewUrl: ({s3Path}) => `https://tmpbucket-adminforth.s3.eu-central-1.amazonaws.com/${s3Path}`,\n        // show image preview instead of path in list view\n        // showInList: false,\n      },\n    }),\n  ],\n} as AdminForthResourceInput;\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Next, add new resource to ",(0,t.jsx)(n.code,{children:"index.ts"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="./index.ts"',children:"// diff-add\nimport descriptionImage from './resources/description_images.js';\n\n...\n\n  resources: [\n    usersResource,\n    apartments,\n    // diff-add\n    descriptionImage\n  ],\n"})}),"\n",(0,t.jsx)(n.p,{children:"Next, add attachments to Markdown plugin:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/apartments.ts"',children:'import MarkdownPlugin from \'@adminforth/markdown\';\n\n// ... existing resource configuration ...\n\nplugins: [\n  new MarkdownPlugin({\n    fieldName: "description",\n// diff-add\n    attachments: {\n// diff-add\n        attachmentResource: "description_images",\n// diff-add\n        attachmentFieldName: "image_path",\n// diff-add\n        attachmentRecordIdFieldName: "record_id",\n// diff-add\n        attachmentResourceIdFieldName: "resource_id",\n// diff-add\n      },\n    }),\n]\n'})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},2429:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/markdown-show1-abad55f0721e2cd5a0a6acdc08bd0785.png"},1190:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/markdown-show2-378169abbb71bfc818400f8f4ab3ef56.png"},2330:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/markdown-eee1136667358779be1bc989d3ef9c62.png"},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var a=i(6540);const t={},r=a.createContext(t);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);