"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[5574],{7368:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>r});var i=s(4848),t=s(8453);const a={},d="Upload",o={id:"tutorial/Plugins/upload",title:"upload",description:"\ud83e\udef8This plugin is under development and not yet released",source:"@site/docs/tutorial/Plugins/05-upload.md",sourceDirName:"tutorial/Plugins",slug:"/tutorial/Plugins/upload",permalink:"/docs/tutorial/Plugins/upload",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"QuillEditor",permalink:"/docs/tutorial/Plugins/QuillEditor"}},l={},r=[{value:"S3",id:"s3",level:2}];function c(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"\ud83e\udef8This plugin is under development and not yet released"}),"\n"]}),"\n",(0,i.jsx)(e.h1,{id:"upload",children:"Upload"}),"\n",(0,i.jsx)(e.p,{children:"This plugin allows you to upload files to Amazon S3 bucket."}),"\n",(0,i.jsx)(e.h2,{id:"s3",children:"S3"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["Go to ",(0,i.jsx)(e.a,{href:"https://aws.amazon.com",children:"https://aws.amazon.com"})," and login."]}),"\n",(0,i.jsxs)(e.li,{children:["Go to Services -> S3 and create a bucket. Put in bucket name e.g. ",(0,i.jsx)(e.code,{children:"my-reality-bucket"}),".\nLeave all settings unchanged (ACL Disabled, Block all public access - checked)"]}),"\n",(0,i.jsx)(e.li,{children:"Go to bucket settings, Permissions, scroll down to Cross-origin resource sharing (CORS) and put in the following configuration:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'[\n    {\n        "AllowedHeaders": [\n            "*"\n        ],\n        "AllowedMethods": [\n            "PUT"\n        ],\n        "AllowedOrigins": [\n            "http://localhost:3000"\n        ],\n        "ExposeHeaders": []\n    }\n]\n'})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["\ud83e\udee8 In AllowedOrigins add all your domains. For example if you will searve adming on ",(0,i.jsx)(e.code,{children:"https://example.com/admin"})," you should add\n",(0,i.jsx)(e.code,{children:'"https://example.com"'})," to AllowedOrigins:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'[\n     "https://example.com",\n     "http://localhost:3000"\n]\n'})}),"\n",(0,i.jsxs)(e.p,{children:["Every character matters, so don't forget to add ",(0,i.jsx)(e.code,{children:"http://"})," or ",(0,i.jsx)(e.code,{children:"https://"}),"!"]}),"\n"]}),"\n",(0,i.jsxs)(e.ol,{start:"4",children:["\n",(0,i.jsxs)(e.li,{children:["Go to Services -> IAM and create a new user. Put in user name e.g. ",(0,i.jsx)(e.code,{children:"my-reality-user"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:["Attach existing policies directly -> ",(0,i.jsx)(e.code,{children:"AmazonS3FullAccess"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:["Go to Security credentials and create a new access key. Save ",(0,i.jsx)(e.code,{children:"Access key ID"})," and ",(0,i.jsx)(e.code,{children:"Secret access key"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:["Add credentials in your ",(0,i.jsx)(e.code,{children:".env"})," file:"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",metastring:'title=".env"',children:"...\nNODE_ENV=development \n//diff-add\nAWS_ACCESS_KEY_ID=your_access_key_id\n//diff-add\nAWS_SECRET_ACCESS_KEY=your_secret_access_key\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Add column to ",(0,i.jsx)(e.code,{children:"aparts"})," resource configuration:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",metastring:'title="./index.ts"',children:"\nexport const admin = new AdminForth({\n  ...\n  resourceId: 'aparts',\n  columns: [\n    ...\n//diff-add\n    {\n//diff-add\n      name: 'appartment_image',\n//diff-add\n      showIn: ['list', 'show'], // if you will try to show it in edit/create view, plugin will disable it anyway\n//diff-add\n    }\n    ...\n  ],\n  plugins: [\n    ...\n//diff-add\n    new S3UploadPlugin({\n//diff-add\n      pathColumnName: 'appartment_image',\n//diff-add\n      uploadColumnLabel: 'Upload preview', // label of upload field\n//diff-add\n      s3Bucket: 'my-bucket',\n//diff-add\n      s3Region: 'us-east-1',\n//diff-add\n      s3AccessKeyId: process.env.AWS_ACCESS_KEY_ID,\n//diff-add\n      s3SecretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n//diff-add\n      s3ACL: 'public-read', // ACL which will be set to uploaded file\n//diff-add\n      s3Path: ({originalFilename, originalExtension, contentType}) => `/aparts/${new Date().getFullYear()}/${uuid()}.${originalExtension}`,\n//diff-add\n      // You can use next to change preview URLs (if it is image) in list and show views\n//diff-add\n      // previewUrl: ({record, path}) => `https://my-bucket.s3.amazonaws.com/${path}`,\n//diff-add\n    })\n  ]\n  \n  ...\n\n});\n\nasync function initDataBase() {\n  ...\n//diff-add\n  // check column appartment_image in apartments table\n//diff-add\n  const columns = await db.prepare('PRAGMA table_info(apartments);').all();\n//diff-add\n  const columnExists = columns.some((c) => c.name === 'appartment_image');\n//diff-add\n  if (!columnExists) {\n//diff-add\n    await db.prepare('ALTER TABLE apartments ADD COLUMN appartment_image VARCHAR(255);').run();\n//diff-add\n  }\n}\n"})})]})}function u(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>d,x:()=>o});var i=s(6540);const t={},a=i.createContext(t);function d(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:d(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);