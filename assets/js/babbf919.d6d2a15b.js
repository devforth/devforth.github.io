"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[9529],{733:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var s=n(4848),i=n(8453);const a={},r="Data API",o={id:"tutorial/Customization/dataApi",title:"Data API",description:"AdminForth Data API is a minimal set of methods to manipulate the data in the database.",source:"@site/docs/tutorial/03-Customization/11-dataApi.md",sourceDirName:"tutorial/03-Customization",slug:"/tutorial/Customization/dataApi",permalink:"/docs/tutorial/Customization/dataApi",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Menu Configuration",permalink:"/docs/tutorial/Customization/menuConfiguration"},next:{title:"Deploy in Docker",permalink:"/docs/tutorial/deploy"}},d={},l=[{value:"Motivation",id:"motivation",level:2},{value:"Getting one item from database",id:"getting-one-item-from-database",level:2},{value:"Get item by ID:",id:"get-item-by-id",level:3},{value:"Check School with name &#39;Hawkins Elementary&#39; exits in DB",id:"check-school-with-name-hawkins-elementary-exits-in-db",level:3},{value:"Get user with name &#39;John&#39; and role not &#39;SuperAdmin&#39;",id:"get-user-with-name-john-and-role-not-superadmin",level:3},{value:"Getting list of items from database",id:"getting-list-of-items-from-database",level:2},{value:"Get 15 latest users which role is not Admin:",id:"get-15-latest-users-which-role-is-not-admin",level:3},{value:"Get 10 oldest users (with highest age):",id:"get-10-oldest-users-with-highest-age",level:3},{value:"Get next page of oldest users:",id:"get-next-page-of-oldest-users",level:3},{value:"Get 10 schools, sort by rating first, then oldest by founded year:",id:"get-10-schools-sort-by-rating-first-then-oldest-by-founded-year",level:3},{value:"Creating new item in database",id:"creating-new-item-in-database",level:2},{value:"Create a new school:",id:"create-a-new-school",level:3},{value:"Counting items in database",id:"counting-items-in-database",level:2},{value:"Count number of schools with rating above 4:",id:"count-number-of-schools-with-rating-above-4",level:3},{value:"Create data for daily report with number of users signed up daily for last 7 days:",id:"create-data-for-daily-report-with-number-of-users-signed-up-daily-for-last-7-days",level:3},{value:"Updating item in database",id:"updating-item-in-database",level:2},{value:"Update school rating to 4.8",id:"update-school-rating-to-48",level:3},{value:"Deleting item from database",id:"deleting-item-from-database",level:2},{value:"Delete school with ID &#39;1234&#39;",id:"delete-school-with-id-1234",level:3},{value:"Performance considerations",id:"performance-considerations",level:2}];function c(e){const t={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"data-api",children:"Data API"}),"\n",(0,s.jsxs)(t.p,{children:["AdminForth Data API is a minimal set of methods to manipulate the data in the database.\nWith Data API you can make very basic operations like ",(0,s.jsx)(t.code,{children:"get"}),", ",(0,s.jsx)(t.code,{children:"list"}),", ",(0,s.jsx)(t.code,{children:"create"}),", ",(0,s.jsx)(t.code,{children:"update"}),", ",(0,s.jsx)(t.code,{children:"delete"}),", ",(0,s.jsx)(t.code,{children:"count"})," on the resources."]}),"\n",(0,s.jsx)(t.h2,{id:"motivation",children:"Motivation"}),"\n",(0,s.jsx)(t.p,{children:"Since AdminForth has internal DataSource Connectors with unified & secure interface to work with different databases, we decided\nwhy not to expose this interface to you."}),"\n",(0,s.jsx)(t.p,{children:"This allows you to make basic operations on the data with AdminForth without using 3rd party ORMs or writing manual SQL queries."}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"\u261d\ufe0f For advanced operations like generating aggregations, joins and other complex queries you should use your own ORM or query builder."}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"getting-one-item-from-database",children:"Getting one item from database"}),"\n",(0,s.jsx)(t.p,{children:"Signature:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:".get(\n  filters: [],\n): Promise<any>\n"})}),"\n",(0,s.jsx)(t.h3,{id:"get-item-by-id",children:"Get item by ID:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"const user = await admin.resource('users').get(\n  [Filters.EQ('id', '1234')]\n);\n"})}),"\n",(0,s.jsx)(t.h3,{id:"check-school-with-name-hawkins-elementary-exits-in-db",children:"Check School with name 'Hawkins Elementary' exits in DB"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"const schoolExists = !!(await admin.resource('schools').get(\n  [Filters.EQ('name', 'Hawkins Elementary')]\n));\n"})}),"\n",(0,s.jsx)(t.h3,{id:"get-user-with-name-john-and-role-not-superadmin",children:"Get user with name 'John' and role not 'SuperAdmin'"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"const user = await admin.resource('users').get(\n  [Filters.EQ('name', 'John'), Filters.NEQ('role', 'SuperAdmin')]\n);\n"})}),"\n",(0,s.jsx)(t.h2,{id:"getting-list-of-items-from-database",children:"Getting list of items from database"}),"\n",(0,s.jsx)(t.p,{children:"Signature:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:".list(\n  filters: [],\n  limit: number | null\n  offset: number | null\n  sort: []\n): Promise<any[]>\n"})}),"\n",(0,s.jsx)(t.h3,{id:"get-15-latest-users-which-role-is-not-admin",children:"Get 15 latest users which role is not Admin:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"const users = await admin.resource('users').list(\n  [Filters.NEQ('role', 'Admin')], 15, 0, Sorts.DESC('createdAt')\n);\n"})}),"\n",(0,s.jsx)(t.h3,{id:"get-10-oldest-users-with-highest-age",children:"Get 10 oldest users (with highest age):"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"const users = await admin.resource('users').list([], 10, 0, Sorts.ASC('age'));\n"})}),"\n",(0,s.jsx)(t.h3,{id:"get-next-page-of-oldest-users",children:"Get next page of oldest users:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"const users = await admin.resource('users').list([], 10, 10, Sorts.ASC('age'));\n"})}),"\n",(0,s.jsx)(t.h3,{id:"get-10-schools-sort-by-rating-first-then-oldest-by-founded-year",children:"Get 10 schools, sort by rating first, then oldest by founded year:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"const schools = await admin.resource('schools').list(\n  [], 10, 0, [Sorts.DESC('rating'), Sorts.ASC('foundedYear')]\n);\n"})}),"\n",(0,s.jsx)(t.h2,{id:"creating-new-item-in-database",children:"Creating new item in database"}),"\n",(0,s.jsx)(t.p,{children:"Signature:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:".create({\n  <resource fields>\n}): Promise<any>\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return value is the created item with all fields, including fields which were populated with fillOnCreate."}),"\n",(0,s.jsx)(t.h3,{id:"create-a-new-school",children:"Create a new school:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"await admin.resource('schools').create({\n  name: 'Hawkins Elementary',\n  rating: 5,\n  foundedYear: 1950,\n});\n"})}),"\n",(0,s.jsx)(t.h2,{id:"counting-items-in-database",children:"Counting items in database"}),"\n",(0,s.jsx)(t.p,{children:"Signature:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:".count(\n  filters: [],\n): Promise<number>\n"})}),"\n",(0,s.jsx)(t.h3,{id:"count-number-of-schools-with-rating-above-4",children:"Count number of schools with rating above 4:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"const schoolsCount = await admin.resource('schools').count([Filters.GT('rating', 4)]);\n"})}),"\n",(0,s.jsx)(t.h3,{id:"create-data-for-daily-report-with-number-of-users-signed-up-daily-for-last-7-days",children:"Create data for daily report with number of users signed up daily for last 7 days:"}),"\n",(0,s.jsxs)(t.p,{children:["Note: while this is not the most efficient way to do this, it's a good example of how you can use ",(0,s.jsx)(t.code,{children:"count"})," method to get the data for the report.\nPlus it still should be fast enough while you have index on ",(0,s.jsx)(t.code,{children:"createdAt"})," field."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"const dailyReports = await Promise.all(\n  Array.from({ length: 7 }, (_, i) => {\n    const dateStart = new Date();\n    dateStart.setDate(dateStart.getDate() - i);\n    dateStart.setHours(0, 0, 0, 0);\n    const dateEnd = new Date(dateStart);\n    dateEnd.setDate(dateEnd.getDate() + 1);\n\n    return admin.resource('users').count(\n      [Filters.GTE('createdAt', dateStart.toISOString()), Filters.LT('createdAt', dateEnd.toISOString())]\n    );\n  })\n);\n"})}),"\n",(0,s.jsx)(t.h2,{id:"updating-item-in-database",children:"Updating item in database"}),"\n",(0,s.jsx)(t.p,{children:"Signature:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:".update(\n  primaryKey: string, // value of field marked as primaryKey in resource configuration\n  {\n    <resource fields which you want to update>\n  }\n): Promise<any>\n"})}),"\n",(0,s.jsx)(t.h3,{id:"update-school-rating-to-48",children:"Update school rating to 4.8"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"await admin.resource('schools').update('1234', { rating: 4.8 });\n"})}),"\n",(0,s.jsx)(t.h2,{id:"deleting-item-from-database",children:"Deleting item from database"}),"\n",(0,s.jsx)(t.p,{children:"Signature:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:".delete(\n  primaryKey: string, // value of field marked as primaryKey in resource configuration\n): Promise<void>\n"})}),"\n",(0,s.jsx)(t.h3,{id:"delete-school-with-id-1234",children:"Delete school with ID '1234'"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"await admin.resource('schools').delete('1234');\n"})}),"\n",(0,s.jsx)(t.h2,{id:"performance-considerations",children:"Performance considerations"}),"\n",(0,s.jsx)(t.p,{children:"Remember that AdminForth never creates an indexes on the database, so it is your responsibility to create them whether you need to speed up\nthe queries created from this Data API or to make AdminForth UI faster."}),"\n",(0,s.jsx)(t.p,{children:"On low data volumes you will not notice the difference in performance with or without indexes, but on high data volumes it might be very and  very crucial."}),"\n",(0,s.jsx)(t.p,{children:"Golden rule: create one index per query you are going to use often or where you see the performance issues."}),"\n",(0,s.jsx)(t.p,{children:"For example if you have two queries:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"const users = await admin.resource('users').list(\n  [Filters.NEQ('role', 'Admin')], 15, 0, Sorts.DESC('createdAt')\n);\nconst users = await admin.resource('users').list(\n  [Filters.EQ('name', 'John'), Filters.NEQ('role', 'SuperAdmin')]\n);\n"})}),"\n",(0,s.jsx)(t.p,{children:"You have to create two different indexes:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"CREATE INDEX idx_users_role ON users(role, createdAt);\nCREATE INDEX idx_users_name_role ON users(name, role);\n"})}),"\n",(0,s.jsx)(t.p,{children:"Create INDEX is just for example, you have to use your migrator / ORM to create indexes in your database."}),"\n",(0,s.jsxs)(t.p,{children:["First one covers performance for the first query, second one for the second query.\nIf you did not understand how indexes are created: ",(0,s.jsx)(t.strong,{children:"get sorted tuple of all fields in filters + all fields in sort,\nin order they appear in filters and sort"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(6540);const i={},a=s.createContext(i);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);