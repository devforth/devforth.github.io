"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[6896],{39653:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>f,frontMatter:()=>s,metadata:()=>a,toc:()=>r});const a=JSON.parse('{"id":"tutorial/Plugins/bulk-ai-flow","title":"Bulk AI Flow","description":"This plugin allows filling fields in multiple selected records based on data from other fields using LLM.","source":"@site/docs/tutorial/07-Plugins/17-bulk-ai-flow.md","sourceDirName":"tutorial/07-Plugins","slug":"/tutorial/Plugins/bulk-ai-flow","permalink":"/docs/tutorial/Plugins/bulk-ai-flow","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":17,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Email Invite","permalink":"/docs/tutorial/Plugins/email-invite"},"next":{"title":"Plugin development guide","permalink":"/docs/tutorial/Advanced/plugin-development"}}');var t=i(74848),d=i(28453);const s={},o="Bulk AI Flow",l={},r=[{value:"Installation",id:"installation",level:2},{value:"Vision mode",id:"vision-mode",level:2},{value:"Usage",id:"usage",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,d.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"bulk-ai-flow",children:"Bulk AI Flow"})}),"\n",(0,t.jsx)(e.p,{children:"This plugin allows filling fields in multiple selected records based on data from other fields using LLM.\nThis also supports vision tasks so you can ask it to e.g. detect dominant color on image or describe what is on the image. Plugin supports classification to enum options automatically."}),"\n",(0,t.jsx)(e.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(e.p,{children:"To install the plugin:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"npm install @adminforth/bulk-ai-flow --save\n"})}),"\n",(0,t.jsx)(e.p,{children:"You'll also need an image vision adapter:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"npm install @adminforth/image-vision-adapter-openai --save\n"})}),"\n",(0,t.jsx)(e.h2,{id:"vision-mode",children:"Vision mode"}),"\n",(0,t.jsx)(e.p,{children:"This mode covers next generations:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"- Image(one or many fields) -> to -> Text/Number/Enum/Boolean(one or many fields)\n- Image(one or many fields) + Text/Number/Enum/Boolean(one or many fields) -> to -> Text/Number/Enum/Boolean(one or many fields)\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Lets try both. Add a column for storing the URL or path to the image in the database, add this statement to the ",(0,t.jsx)(e.code,{children:"./schema.prisma"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",metastring:'title="./schema.prisma"',children:"model apartments {\n  id                String     @id\n  created_at        DateTime?\n  title             String\n  square_meter      Float?\n  price             Decimal\n  number_of_rooms   Int?\n  description       String?\n  country           String?\n  listed            Boolean\n  realtor_id        String?\n//diff-add\n  apartment_image         String?\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"Migrate prisma schema:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"npm run makemigration -- --name add-apartment-image-url ; npm run migrate:local\n"})}),"\n",(0,t.jsxs)(e.p,{children:["We will also attach ",(0,t.jsx)(e.a,{href:"/docs/tutorial/Plugins/upload/",children:"upload plugin"})," to this field."]}),"\n",(0,t.jsxs)(e.p,{children:["Add credentials in your ",(0,t.jsx)(e.code,{children:".env"})," file:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",metastring:'title=".env"',children:"...\n\n//diff-add\nOPENAI_API_KEY=your_secret_openai_key\n\n...\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Add column to ",(0,t.jsx)(e.code,{children:"aparts"})," resource configuration:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",metastring:'title="./resources/apartments.ts"',children:"//diff-add\nimport BulkAiFlowPlugin  from '@adminforth/bulk-ai-flow';\n//diff-add\nimport AdminForthImageVisionAdapterOpenAi from '@adminforth/image-vision-adapter-openai';\n\nexport const admin = new AdminForth({\n  ...\n  resourceId: 'aparts',\n  columns: [\n    ...\n//diff-add\n    {\n//diff-add\n        name: 'apartment_image',\n//diff-add\n        label: 'Image',\n//diff-add\n        showIn: { list: false, create: true, edit: true},\n//diff-add\n    }\n    ...\n  ],\n  plugins: [\n    ...\n  //diff-add\n      new UploadPlugin({\n  //diff-add\n        storageAdapter: new AdminForthAdapterS3Storage({\n  //diff-add\n          bucket: process.env.AWS_BUCKET_NAME,\n  //diff-add\n          region: process.env.AWS_REGION,\n  //diff-add\n          accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n  //diff-add\n          secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n  //diff-add\n          s3ACL: 'public-read',\n  //diff-add\n        }),\n  //diff-add\n        pathColumnName: 'apartment_image',\n  //diff-add\n        allowedFileExtensions: ['jpg', 'jpeg', 'png', 'gif', 'webm', 'webp'],\n  //diff-add\n        filePath: ({originalFilename, originalExtension, contentType}) => \n  //diff-add\n              `aparts/${new Date().getFullYear()}/${uuid()}-${originalFilename}.${originalExtension}`,\n  //diff-add\n      }),\n\n      //diff-add\n      new BulkAiFlowPlugin({\n      //diff-add\n        actionName: 'Analyze',\n      //diff-add\n        attachFiles: async ({ record }: { record: any }) => {\n      //diff-add\n          return [`https://tmpbucket-adminforth.s3.eu-central-1.amazonaws.com/${record.apartment_image}`];\n      //diff-add\n        },\n      //diff-add\n        visionAdapter: new AdminForthImageVisionAdapterOpenAi(\n      //diff-add\n          {\n      //diff-add\n            openAiApiKey:  process.env.OPENAI_API_KEY as string,\n      //diff-add\n            model: 'gpt-4.1-mini',\n      //diff-add\n          }\n      //diff-add\n        ),\n      //diff-add\n        outputFields: [{ \n      //diff-add\n          'description': 'describe what is in the image, also take into account that price is {{price}}', \n      //diff-add\n          'country': 'In which country it can be located?', \n      //diff-add\n          'number_of_rooms': 'How many rooms are in the apartment? Just try to guess what is a typical one. If you do not know, just guess',\n      //diff-add\n          'square_meter': 'Try to guess what is the typical square of the apartment in square meters? If you do not know, just guess',\n      //diff-add\n          'listed': 'Is the apartment should be listed for sale? If you do not know, just guess, return boolean value',\n      //diff-add\n        }],\n      //diff-add\n      }),\n      //diff-add\n    ],\n\n  \n  ...\n\n});\n"})}),"\n",(0,t.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"Select fields you want to fill"}),"\n",(0,t.jsx)(e.li,{children:"Click on the three dots menu"}),"\n",(0,t.jsxs)(e.li,{children:["Click analyze\n",(0,t.jsx)(e.img,{alt:"alt text",src:i(65878).A+"",width:"2298",height:"439"})]}),"\n",(0,t.jsx)(e.li,{children:"Wait for finish analyze"}),"\n",(0,t.jsxs)(e.li,{children:["Check and edit result\n",(0,t.jsx)(e.img,{alt:"alt text",src:i(47501).A+"",width:"1744",height:"836"})]}),"\n",(0,t.jsxs)(e.li,{children:["Save changhes\n",(0,t.jsx)(e.img,{alt:"alt text",src:i(7556).A+"",width:"2304",height:"418"})]}),"\n"]})]})}function f(n={}){const{wrapper:e}={...(0,d.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},65878:(n,e,i)=>{i.d(e,{A:()=>a});const a=i.p+"assets/images/Bulk-vision-1-166513132e454cea427469361856fb27.png"},47501:(n,e,i)=>{i.d(e,{A:()=>a});const a=i.p+"assets/images/Bulk-vision-2-0e695786d4dfac65fec730c6a3aa8d8d.png"},7556:(n,e,i)=>{i.d(e,{A:()=>a});const a=i.p+"assets/images/Bulk-vision-3-034f3705373d52b1b3a3ec20828b7b48.png"},28453:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>o});var a=i(96540);const t={},d=a.createContext(t);function s(n){const e=a.useContext(d);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:s(n.components),a.createElement(d.Provider,{value:e},n.children)}}}]);