"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[5653],{7519:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=t(4848),s=t(8453);const i={},r="Internationalization (i18n)",o={id:"tutorial/Plugins/i18n",title:"Internationalization (i18n)",description:"This plugin allows you translate your AdminForth application to multiple languages.",source:"@site/docs/tutorial/05-Plugins/10-i18n.md",sourceDirName:"tutorial/05-Plugins",slug:"/tutorial/Plugins/i18n",permalink:"/docs/tutorial/Plugins/i18n",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Open Signup",permalink:"/docs/tutorial/Plugins/open-signup"},next:{title:"Plugin development guide",permalink:"/docs/tutorial/Advanced/plugin-development"}},l={},d=[{value:"Installation",id:"installation",level:2},{value:"Translation for custom components",id:"translation-for-custom-components",level:2},{value:"Variables in frontend translations",id:"variables-in-frontend-translations",level:3},{value:"HTML in translations",id:"html-in-translations",level:3},{value:"Pluralization",id:"pluralization",level:3},{value:"Limiting access to translating",id:"limiting-access-to-translating",level:2},{value:"Translations in custom APIs",id:"translations-in-custom-apis",level:2},{value:"Translating messaged within bulk action",id:"translating-messaged-within-bulk-action",level:2}];function c(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"internationalization-i18n",children:"Internationalization (i18n)"}),"\n",(0,a.jsx)(e.p,{children:"This plugin allows you translate your AdminForth application to multiple languages.\nMain features:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["Stores all translation strings in your application in a single AdminForth resource. You can set ",(0,a.jsx)(e.a,{href:"/docs/tutorial/Customization/limitingAccess/#disable-some-action-based-on-logged-in-user-record-or-role",children:"allowed actions"})," only  to Developers/Translators role if you don't want other users to see/edit the translations."]}),"\n",(0,a.jsx)(e.li,{children:"Supports AI completion adapters to help with translations. For example, you can use OpenAI ChatGPT to generate translations. Supports correct pluralization, even for Slavic languages."}),"\n",(0,a.jsx)(e.li,{children:"Supports any number of languages."}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"Under the hood it uses vue-i18n library and provides several additional facilities to make the translation process easier."}),"\n",(0,a.jsx)(e.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(e.p,{children:"To install the plugin:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"npm install @adminforth/i18n --save\nnpm install @adminforth/completion-adapter-open-ai-chat-gpt --save\n"})}),"\n",(0,a.jsx)(e.p,{children:"For example lets add translations to next 4 languages: Ukrainian, Japanese, French, Spanish. Also we will support basic translation for English."}),"\n",(0,a.jsx)(e.p,{children:"Add a model for translations, if you are using prisma, add something like this:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",metastring:"title='./schema.prisma'",children:"model translations {\n    id              String   @id\n    en_string       String\n    created_at      DateTime\n    uk_string       String?  // translation for Ukrainian language\n    ja_string       String?  // translation for Japanese language\n    fr_string       String?  // translation for French language\n    es_string       String?  // translation for Spanish language\n    category        String\n    source          String?\n    completedLangs   String?\n    \n    // we need both indexes on en_string+category and separately on category\n    @@index([en_string, category])\n    @@index([category])\n}\n"})}),"\n",(0,a.jsxs)(e.p,{children:["If you want more languages, just add more fields like ",(0,a.jsx)(e.code,{children:"uk_string"}),", ",(0,a.jsx)(e.code,{children:"ja_string"}),", ",(0,a.jsx)(e.code,{children:"fr_string"}),", ",(0,a.jsx)(e.code,{children:"es_string"})," to the model."]}),"\n",(0,a.jsx)(e.p,{children:"Next, add resource for translations:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",metastring:"title='./resources/translations.ts'",children:"\nimport AdminForth, { AdminForthDataTypes, AdminForthResourceInput } from \"adminforth\";\nimport CompletionAdapterOpenAIChatGPT from \"@adminforth/completion-adapter-open-ai-chat-gpt\";\nimport I18nPlugin from \"@adminforth/i18n\";\nimport { v1 as uuid } from \"uuid\";\n\n\nexport default {\n  dataSource: \"maindb\",\n  table: \"translations\",\n  resourceId: \"translations\",\n  label: \"Translations\",\n\n  recordLabel: (r: any) => `\u270d\ufe0f ${r.en_string}`,\n  plugins: [\n    new I18nPlugin({\n      supportedLanguages: ['en', 'uk', 'ja', 'fr'],\n\n      // names of the fields in the resource which will store translations\n      translationFieldNames: {\n        en: 'en_string',\n        uk: 'uk_string',\n        ja: 'ja_string',\n        fr: 'fr_string',\n      },\n\n      // name of the field which will store the category of the string\n      // this helps to categorize strings and deliver them efficiently\n      categoryFieldName: 'category',\n\n      // optional field to store the source (e.g. source file name)\n      sourceFieldName: 'source',\n\n      // optional field store list of completed translations\n      // will hel to filter out incomplete translations\n      completedFieldName: 'completedLangs',\n\n      completeAdapter: new CompletionAdapterOpenAIChatGPT({\n        openAiApiKey: process.env.OPENAI_API_KEY as string,\n        model: 'gpt-4o-mini',\n        expert: {\n          // for UI translation it is better to lower down the temperature from default 0.7. Less creative and more accurate\n          temperature: 0.5,\n        },\n      }),\n    }),\n\n  ],\n  options: {\n    listPageSize: 30,\n  },\n  columns: [\n    {\n      name: \"id\",\n      fillOnCreate: ({ initialRecord, adminUser }: any) => uuid(),\n      primaryKey: true,\n      showIn: [],\n    },\n    {\n      name: \"en_string\",\n      type: AdminForthDataTypes.STRING,\n      label: 'English',\n    },\n    {\n      name: \"created_at\",\n      fillOnCreate: ({ initialRecord, adminUser }: any) => new Date().toISOString(),\n    },\n    {\n      name: \"uk_string\",\n      type: AdminForthDataTypes.STRING,\n      label: 'Ukrainian',\n    },\n    {\n      name: \"ja_string\",\n      type: AdminForthDataTypes.STRING,\n      label: 'Japanese',\n    },\n    {\n      name: \"fr_string\",\n      type: AdminForthDataTypes.STRING,\n      label: 'French',\n    },\n    {\n      name: \"completedLangs\",\n    },\n    {\n      name: \"source\",\n      showIn: ['filter', 'show'],\n      type: AdminForthDataTypes.STRING,\n    },\n    {\n      name: \"category\",\n      showIn: ['filter', 'show', 'list'],\n      type: AdminForthDataTypes.STRING,\n    }\n  ],\n} as AdminForthResourceInput;\n"})}),"\n",(0,a.jsxs)(e.p,{children:["Add ",(0,a.jsx)(e.code,{children:"OPENAI_API_KEY"})," to your ",(0,a.jsx)(e.code,{children:".env"})," file:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"OPENAI_API_KEY=your_openai_api_key\n"})}),"\n",(0,a.jsxs)(e.p,{children:["Also add the resource to main file and add menu item in ",(0,a.jsx)(e.code,{children:"./index.ts"}),":"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",metastring:"title='./index.ts'",children:"\n//diff-add\nimport translations from \"./resources/translations\";\n...\n\nconst adminForth = new AdminForth({\n  ...\n  resources: [\n    ...\n//diff-add\n    translations,\n  ],\n  menu: [\n    ...\n//diff-add\n    {\n//diff-add\n      label: 'Translations',\n//diff-add\n      icon: 'material-symbols:translate',\n//diff-add\n      resourceId: 'translations',\n//diff-add\n    },\n  ],\n  ...\n});\n\n"})}),"\n",(0,a.jsx)(e.p,{children:"This is it, now you should restart your app and see the translations resource in the menu."}),"\n",(0,a.jsx)(e.p,{children:"You can add translations for each language manually or use Bulk actions to generate translations with AI completion adapter."}),"\n",(0,a.jsx)(e.p,{children:'For simplicity you can also use filter to get only untranslated strings and complete them one by one (filter name "Fully translated" in the filter).'}),"\n",(0,a.jsx)(e.h2,{id:"translation-for-custom-components",children:"Translation for custom components"}),"\n",(0,a.jsx)(e.p,{children:"To translate custom components, you should simply wrap all strings in $t function. For example:"}),"\n",(0,a.jsxs)(e.p,{children:["Now create file ",(0,a.jsx)(e.code,{children:"CustomLoginFooter.vue"})," in the ",(0,a.jsx)(e.code,{children:"custom"})," folder of your project:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-html",metastring:'title="./custom/CustomLoginFooter.vue"',children:'<template>\n  <div class="text-center text-gray-500 text-sm mt-4">\n//diff-remove\n    By logging in, you agree to our <a href="#" class="text-blue-500">Terms of Service</a> and <a href="#" class="text-blue-500">Privacy Policy</a>\n//diff-add\n    {{$t(\'By logging in, you agree to our\')}} <a href="#" class="text-blue-500">{{$t(\'Terms of Service\')}}</a> {{$t(\'and\')}} <a href="#" class="text-blue-500">{{$t(\'Privacy Policy\')}}</a>\n  </div>\n</template>\n'})}),"\n",(0,a.jsx)(e.h3,{id:"variables-in-frontend-translations",children:"Variables in frontend translations"}),"\n",(0,a.jsx)(e.p,{children:"You can use variables in translations in same way like you would do it with vue-i18n library."}),"\n",(0,a.jsx)(e.p,{children:"This is generally helps to understand the context of the translation for AI completion adapters and simplifies the translation process, even if done manually."}),"\n",(0,a.jsx)(e.p,{children:'For example if you have string "Showing 1 to 10 of 100 entries" you can of course simply do'}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-html",children:"{{ $t('Showing')}} {{from}} {{$t('to')}} {{to}} {{$t('of')}} {{total}} {{$t('entries') }}\n"})}),"\n",(0,a.jsx)(e.p,{children:"And it will form 4 translation strings. But it is much better to have it as single string with variables like this:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-html",children:"{{ $t('Showing {from} to {to} of {total} entries', { from, to, total } ) }}\n"})}),"\n",(0,a.jsx)(e.p,{children:"For example, let's add user greeting to the header."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-html",metastring:'title="./custom/Header.vue"',children:'<template>\n  <div class="flex items-center justify-between p-4 bg-white shadow-md">\n    <div class="text-lg font-semibold text-gray-800">\n      {{ $t(\'Welcome, {name}\', { name: adminUser.username }) }}\n    </div>\n  </div>\n</template>\n\n<script setup lang="ts">\nimport type { AdminForthResourceColumnCommon, AdminForthResourceCommon, AdminUser } from \'@/types/Common\';\n\nconst props = defineProps<{\n    column: AdminForthResourceColumnCommon;\n    record: any;\n    meta: any;\n    resource: AdminForthResourceCommon;\n    adminUser: AdminUser\n}>();\n<\/script>\n'})}),"\n",(0,a.jsx)(e.p,{children:"How to use such component"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",metastring:'title="./index.ts"',children:"\nconst adminForth = new AdminForth({\n  ...\n  customization{ \n    globalInjections: {\n      header: {\n        file: '@@/Header.vue',\n      },\n    }\n  },\n  ...\n});\n\n"})}),"\n",(0,a.jsx)(e.h3,{id:"html-in-translations",children:"HTML in translations"}),"\n",(0,a.jsxs)(e.p,{children:["Sometimes you might want to have HTML in translations. You can use ",(0,a.jsx)(e.code,{children:"i18n-t"})," translation component for this. For example:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-html",children:'<span class="hidden sm:inline">\n  <i18n-t keypath="Showing {from} to {to} of {total} Entries" tag="p"  >\n    <template v-slot:from>\n      <strong>{{ from }}</strong>\n    </template>\n    <template v-slot:to>\n      <strong>{{ to }}</strong>\n    </template>\n    <template v-slot:total>\n      <strong>{{ totalRows }}</strong>\n    </template>\n  </i18n-t>\n</span>\n'})}),"\n",(0,a.jsx)(e.h3,{id:"pluralization",children:"Pluralization"}),"\n",(0,a.jsx)(e.p,{children:"Frontend uses same pluralization rules as vue-i18n library. You can use it in the same way. For example:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-html",children:"{{ $t('Apartment last 7 days | Apartments last 7 days', data.totalAparts) }}\n"})}),"\n",(0,a.jsx)(e.p,{children:"For English it will use 2 pluralization forms (1 and other), for Slavic languages, LLM adapter will be instructed to generate 4 forms: for zero, for one, for 2-4 and for 5+:"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{alt:"alt text",src:t(7875).A+"",width:"2809",height:"1367"})}),"\n",(0,a.jsx)(e.h2,{id:"limiting-access-to-translating",children:"Limiting access to translating"}),"\n",(0,a.jsxs)(e.p,{children:["If you want to limit access to translations resource only to developers or translators, you can use ",(0,a.jsx)(e.a,{href:"/docs/tutorial/Customization/limitingAccess/",children:"limiting access"})," feature."]}),"\n",(0,a.jsx)(e.p,{children:'Please note that access to "Translate selected" bulk action which uses LLM AI translation adapter is determined by allowedActions.edit permission of resource.'}),"\n",(0,a.jsx)(e.h2,{id:"translations-in-custom-apis",children:"Translations in custom APIs"}),"\n",(0,a.jsxs)(e.p,{children:["Sometimes you need to return a translated error or success message from your API. You can use special ",(0,a.jsx)(e.code,{children:"tr"})," function for this."]}),"\n",(0,a.jsx)(e.p,{children:"For simple example let's move previous example to format string on the backend side:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-html",metastring:'title="./custom/Header.vue"',children:"<template>\n  <div class=\"flex items center justify-between p-4 bg-white shadow-md\">\n    <div class=\"text-lg font-semibold text-gray-800\">\n      {{ greeting }}\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport type { AdminForthResourceColumnCommon, AdminForthResourceCommon, AdminUser } from '@/types/Common';\nimport { callApi } from '@/utils';\nimport { ref, onMounted } from 'vue';\n\nconst greeting: Ref<string> = ref('');\n\nonMounted(async () => {\n  try {\n    const data = await callApi({path: '/api/greeting', method: 'GET'});\n    greeting.value = data.text;\n  } catch (error) {\n    window.adminforth.alert({\n      message: `Error fetching data: ${error.message}`,\n      variant: 'danger',\n      timeout: 'unlimited'\n    });\n    return;\n  }\n})\n<\/script>\n"})}),"\n",(0,a.jsx)(e.p,{children:"And on the backend side you can use tr function to translate the string:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",metastring:'title="./index.ts"',children:"  app.get(`${ADMIN_BASE_URL}/api/greeting`, \n    admin.express.authorize(\n      admin.express.translatable(\n        async (req, res) => {\n          res.json({\n            text: await req.tr('Welcome, {name}', 'customApis', { name: req.adminUser.username }),\n          });\n        }\n      )\n    )\n  );\n\n  // serve after you added all api\n  admin.discoverDatabases();\n  admin.express.serve(app)\n"})}),"\n",(0,a.jsxs)(e.p,{children:["As you can see we should use ",(0,a.jsx)(e.code,{children:"admin.express.translatable"})," middleware which will inject ",(0,a.jsx)(e.code,{children:"tr"})," function to the request object.\nFirst param is the string to translate, second is the category of the string (actually you can use any string here), and the third is the variables object."]}),"\n",(0,a.jsxs)(e.p,{children:["If you don't use params, you can use ",(0,a.jsx)(e.code,{children:"tr"})," without third param:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"{\n  text: await tr('Welcome, dear user', 'customApis'),\n}\n"})}),"\n",(0,a.jsxs)(e.blockquote,{children:["\n",(0,a.jsxs)(e.p,{children:["\ud83d\ude45\u200d\u2642\ufe0f Temporary limitation: For now all translations strings for backend (adminforth internal and for from custom APIs)\nappear in Translations resource and table only after they are used. So greeting string will appear in the Translations table only after the first request to the API which reaches the ",(0,a.jsx)(e.code,{children:"tr"})," function call.\nSo to collect all translations you should use your app for some time and make sure all strings are used at\nIn future we plan to add backend strings collection in same way like frontend strings are collected."]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"translating-messaged-within-bulk-action",children:"Translating messaged within bulk action"}),"\n",(0,a.jsxs)(e.p,{children:["Label adn confirm strings of bulk actions are already translated by AdminForth, but\n",(0,a.jsx)(e.code,{children:"succesMessage"})," returned by action function should be translated manually because of the dynamic nature of the message."]}),"\n",(0,a.jsxs)(e.p,{children:["Let's rework the bulk action from ",(0,a.jsx)(e.a,{href:"/docs/tutorial/Customization/bulkActions/",children:"bulkActions"})," to use translations:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",metastring:'title="./resources/apartments.ts"',children:"import { AdminUser } from 'adminforth';\nimport { admin } from '../index';\n\n{\n  ...\n  resourceId: 'aparts',\n     ...\n     options: {\n        bulkActions: [\n          {\n            label: 'Mark as listed',\n            icon: 'flowbite:eye-solid',\n            // if optional `confirm` is provided, user will be asked to confirm action\n            confirm: 'Are you sure you want to mark all selected apartments as listed?',\n            action: function ({selectedIds, adminUser }: {selectedIds: any[], adminUser: AdminUser }) {\n              const stmt = admin.resource('aparts').dataConnector.db.prepare(`UPDATE apartments SET listed = 1 WHERE id IN (${selectedIds.map(() => '?').join(',')})`);\n              stmt.run(...selectedIds);\n//diff-remove\n              return { ok: true, error: false, successMessage: `Marked ${selectedIds.length} apartments as listed` };\n//diff-add\n              return { ok: true, error: false, successMessage: await tr('Marked {count} apartments as listed', 'apartments', { count:   selectedIds.length }) };\n            },\n          }\n        ],\n      }\n}\n"})})]})}function m(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}},7875:(n,e,t)=>{t.d(e,{A:()=>a});const a=t.p+"assets/images/image-4-c661c73e502760f974b3f5475d9b02b4.png"},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>o});var a=t(6540);const s={},i=a.createContext(s);function r(n){const e=a.useContext(i);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),a.createElement(i.Provider,{value:e},n.children)}}}]);