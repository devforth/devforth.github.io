"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[4346],{6914:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var s=t(4848),r=t(8453);const i={},o="Custom record field rendering",a={id:"tutorial/Customization/customFieldRendering",title:"Custom record field rendering",description:"Customizing how AdminForth renders the cells with record values",source:"@site/docs/tutorial/03-Customization/02-customFieldRendering.md",sourceDirName:"tutorial/03-Customization",slug:"/tutorial/Customization/customFieldRendering",permalink:"/docs/tutorial/Customization/customFieldRendering",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Branding and Theming",permalink:"/docs/tutorial/Customization/branding"},next:{title:"Virtual columns",permalink:"/docs/tutorial/Customization/virtualColumns"}},d={},l=[{value:"Customizing how AdminForth renders the cells with record values",id:"customizing-how-adminforth-renders-the-cells-with-record-values",level:2},{value:"Parametrize the custom components",id:"parametrize-the-custom-components",level:2},{value:"Using 3rd-party npm packages in the Vue components",id:"using-3rd-party-npm-packages-in-the-vue-components",level:2},{value:"Editing values component",id:"editing-values-component",level:2},{value:"Custom inValidity inside of the custom create/edit components",id:"custom-invalidity-inside-of-the-custom-createedit-components",level:3},{value:"Custom emptiness inside of the custom create/edit components",id:"custom-emptiness-inside-of-the-custom-createedit-components",level:3},{value:"Pre-made renderers",id:"pre-made-renderers",level:2},{value:"CompactUUID",id:"compactuuid",level:3},{value:"Country Flag",id:"country-flag",level:3},{value:"Human Number",id:"human-number",level:3},{value:"URL",id:"url",level:3},{value:"Relative Time",id:"relative-time",level:3},{value:"Rich text and Zero-style Rich text",id:"rich-text-and-zero-style-rich-text",level:3},{value:"Custom filter component for square meters",id:"custom-filter-component-for-square-meters",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"custom-record-field-rendering",children:"Custom record field rendering"}),"\n",(0,s.jsx)(n.h2,{id:"customizing-how-adminforth-renders-the-cells-with-record-values",children:"Customizing how AdminForth renders the cells with record values"}),"\n",(0,s.jsxs)(n.p,{children:["Let's change how AdminForth renders the number of rooms in the 'list' and 'show' views.\nWe will render '\ud83d\udfe8' for each room and then we will print ",(0,s.jsx)(n.code,{children:"square_meter"})," at the same cells."]}),"\n",(0,s.jsxs)(n.p,{children:["Create directory ",(0,s.jsx)(n.code,{children:"custom"}),". Create a file ",(0,s.jsx)(n.code,{children:"RoomsCell.vue"})," in it:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",metastring:"title='./custom/RoomsCell.vue'",children:'<template>\n  <div class="flex items-center">\n    <span v-for="room in record.number_of_rooms">\n      \ud83d\udfe8\n    </span>\n      \n    {{ record.square_meter }} m\xb2\n  </div>\n</template>\n\n<script setup lang="ts">\nimport type { AdminForthResourceColumnCommon, AdminForthResourceCommon, AdminUser } from \'@/types/Common\';\n\nconst props = defineProps<{\n    column: AdminForthResourceColumnCommon;\n    record: any;\n    meta: any;\n    resource: AdminForthResourceCommon;\n    adminUser: AdminUser\n}>();\n<\/script>\n'})}),"\n",(0,s.jsx)(n.p,{children:"Now you can use this component in the configuration of the resource:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='./resources/apartments.ts'",children:"{\n  ...\n  resourceId: 'aparts',\n  columns: [\n    ...\n    {\n      ...\n      name: 'number_of_rooms',\n//diff-add\n      components: {\n//diff-add\n        show: '@@/RoomsCell.vue',\n//diff-add\n        list: '@@/RoomsCell.vue',\n//diff-add\n      }\n    },\n    ...\n  ],\n  ...\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Here is how it looks:\n",(0,s.jsx)(n.img,{alt:"alt text",src:t(5448).A+"",width:"3700",height:"2044"})]}),"\n",(0,s.jsxs)(n.p,{children:["In very similar way you can render how cell is rendered in ",(0,s.jsx)(n.code,{children:"'edit'"})," and ",(0,s.jsx)(n.code,{children:"'create'"})," view.\nYou can use it for creating custom editors for the fields. Check ",(0,s.jsx)(n.a,{href:"/docs/api/Common/interfaces/AdminForthFieldComponents#create",children:"component specs"})," to understand which props are passed to the component"]}),"\n",(0,s.jsx)(n.h2,{id:"parametrize-the-custom-components",children:"Parametrize the custom components"}),"\n",(0,s.jsxs)(n.p,{children:["Sometimes you need to render same component with different parameters.\nYou can use ",(0,s.jsx)(n.a,{href:"/docs/api/Common/interfaces/AdminForthComponentDeclarationFull",children:"full component declaration"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='./resources/apartments.ts'",children:"\n{\n  ...\n  resourceId: 'aparts',\n  columns: [\n    ...\n    {\n      ...\n      name: 'number_of_rooms',\n      components: {\n//diff-remove\n       show: '@@/RoomsCell.vue',\n//diff-add\n       show: {\n//diff-add\n         file: '@@/RoomsCell.vue',\n//diff-add\n         meta: {\n//diff-add\n           filler: '\ud83d\udfe8',\n//diff-add\n         },\n//diff-add\n       },\n//diff-remove\n       list: '@@/RoomsCell.vue',\n//diff-add\n       list: {\n//diff-add\n         file: '@@/RoomsCell.vue',\n//diff-add\n         meta: {\n//diff-add\n           filler: '\ud83d\udfe6',\n//diff-add\n          },\n//diff-add\n        }\n      }\n    },\n    ...\n  ],\n  ...\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now our component can read ",(0,s.jsx)(n.code,{children:"filler"})," from ",(0,s.jsx)(n.code,{children:"meta"})," prop:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='./custom/RoomsCell.vue'",children:'<template>\n  <div class="flex items-center">\n    <span v-for="room in record.number_of_rooms">\n//diff-remove\n     \ud83d\udfe8\n//diff-add\n    {{ meta.filler }}\n    </span>\n    {{ room.square_meter }} m\xb2\n  </div>\n</template>\n\n<script setup lang="ts">\nimport type { AdminForthResourceColumnCommon, AdminForthResourceCommon, AdminUser } from \'@/types/Common\';\n\nconst props = defineProps<{\n    column: AdminForthResourceColumnCommon;\n    record: any;\n    meta: any;\n    resource: AdminForthResourceCommon;\n    adminUser: AdminUser\n}>();\n<\/script>\n'})}),"\n",(0,s.jsx)(n.h2,{id:"using-3rd-party-npm-packages-in-the-vue-components",children:"Using 3rd-party npm packages in the Vue components"}),"\n",(0,s.jsxs)(n.p,{children:["To install 3rd-party npm packages you should create npm package in the ",(0,s.jsx)(n.code,{children:"custom"})," directory:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd custom\n"})}),"\n",(0,s.jsxs)(n.p,{children:["And simply do ",(0,s.jsx)(n.code,{children:"npm install"})," for the package you need:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm i <some package> -D\n"})}),"\n",(0,s.jsx)(n.h2,{id:"editing-values-component",children:"Editing values component"}),"\n",(0,s.jsxs)(n.p,{children:["In same way as we define ",(0,s.jsx)(n.code,{children:"show"})," and list component, we can create component for edit/create page.\nLet's create custom dropdown for ",(0,s.jsx)(n.code,{children:"country"})," field which will show emoji flags of the countries."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",metastring:"title='./custom/CountryDropdown.vue'",children:'<template>\n  <Select\n      class="w-full"\n      :options="column.enum"\n      :model-value="record[column.name]"\n      @update:model-value="emit(\'update:value\', $event)"\n  >\n    <template #item="{option}">\n      <span class="text-xl inline-flex">{{ getCountryFlag(option.value) }}</span> {{ option.label }}\n    </template>\n\n    <template #selected-item="{option}">\n      <span class="text-xl inline-flex">{{ getCountryFlag(option.value) }}</span> {{ option.label }}\n    </template>\n  </Select>\n</template>\n\n<script setup lang="ts">\nimport Select from "@/afcl/Select.vue";\nimport type {\n  AdminForthResourceColumnCommon,\n  AdminForthResourceCommon,\n  AdminUser,\n} from "@/types/Common";\n\nconst props = defineProps<{\n  column: AdminForthResourceColumnCommon;\n  record: any;\n  meta: any;\n  resource: AdminForthResourceCommon;\n  adminUser: AdminUser;\n}>();\n\nconst emit = defineEmits(["update:value"]);\n\nfunction getCountryFlag(countryCode: string) {\n  return countryCode?.toUpperCase()\n    .replace(/./g, (char) => String.fromCodePoint(char.charCodeAt(0) + 127397));\n}\n\n<\/script>\n'})}),"\n",(0,s.jsx)(n.p,{children:"Now you can use this component in the configuration of the resource:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='./resources/apartments.ts'",children:"{\n  ...\n  resourceId: 'aparts',\n  columns: [\n    ...\n    {\n      name: 'country',\n//diff-add\n      components: {\n//diff-add\n        edit: '@@/CountryDropdown.vue',\n//diff-add\n        create: '@@/CountryDropdown.vue',\n//diff-add\n      },\n      ...\n    },\n    ...\n  ],\n  ...\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"custom-invalidity-inside-of-the-custom-createedit-components",children:"Custom inValidity inside of the custom create/edit components"}),"\n",(0,s.jsxs)(n.p,{children:["Custom componets can emit ",(0,s.jsx)(n.code,{children:"update:inValidity"})," event to parent to say that the field is invalid."]}),"\n",(0,s.jsx)(n.p,{children:"You can define this emit as:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='./custom/<AnyYourComponent>.vue'",children:'const emit = defineEmits([\n  "update:value", \n//diff-add  \n  "update:inValidity"\n]);\n'})}),"\n",(0,s.jsx)(n.p,{children:"Every time when state in your component becomes invalid, you can emit this event with error message which will be shown in the UI to the user."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"emit('update:inValidity', \"The field has wrong value\");\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Every time when state in your component becomes valid, you can emit this event with ",(0,s.jsx)(n.code,{children:"false"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"emit('update:inValidity', false);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If component never emits ",(0,s.jsx)(n.code,{children:"update:inValidity"})," event (includign case when you don't use it at all), the field is considered valid."]}),"\n",(0,s.jsx)(n.h3,{id:"custom-emptiness-inside-of-the-custom-createedit-components",children:"Custom emptiness inside of the custom create/edit components"}),"\n",(0,s.jsxs)(n.p,{children:["Custom componets can emit ",(0,s.jsx)(n.code,{children:"update:emptiness"})," event to parent to say that the field is empty."]}),"\n",(0,s.jsxs)(n.p,{children:["Emptiness is used to prevent user from saving form when ",(0,s.jsx)(n.code,{children:"column.required"})," is true and field is empty."]}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(n.code,{children:"column.required"})," is false emptiness is not checked."]}),"\n",(0,s.jsx)(n.p,{children:"You can define this emit as:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const emit = defineEmits([\n  "update:value", \n//diff-add\n  "update:emptiness"\n]);\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Every time when state in your component becomes empty, you can emit this event with ",(0,s.jsx)(n.code,{children:"true"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"emit('update:emptiness', true);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Every time when state in your component becomes not empty, you can emit this event with ",(0,s.jsx)(n.code,{children:"false"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"emit('update:emptiness', false);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Emptiness emit has a higher priority than natural emptiness of the field. For example when actual value under column in record is empty but component emitted ",(0,s.jsx)(n.code,{children:"false"})," for ",(0,s.jsx)(n.code,{children:"update:emptiness"})," (in other words child component said it non-empty), the field is considered as Non-empty.\nFor another example, if companent is naturally updated some value in record but emited ",(0,s.jsx)(n.code,{children:"true"})," (said that it is empty) the field is considered as empty and error in form will be shown to user."]}),"\n",(0,s.jsx)(n.h2,{id:"pre-made-renderers",children:"Pre-made renderers"}),"\n",(0,s.jsx)(n.p,{children:"Though creating custom renderers is super-easy, we have couple of pre-made renderers for you to use."}),"\n",(0,s.jsx)(n.h3,{id:"compactuuid",children:"CompactUUID"}),"\n",(0,s.jsxs)(n.p,{children:["If you have a UUID column which you want display in table in more compact manner, you can use ",(0,s.jsx)(n.code,{children:"CompactUUID"})," renderer."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='./resources/apartments.ts'",children:"//diff-add\nimport { randomUUID } from 'crypto';\n\n  ...\n  columns: [\n    { \n      name: 'id', \n      primaryKey: true,\n      showIn: {\n//diff-remove\n        list: false,\n        edit: false,\n        create: false,\n      },\n//diff-remove\n      fillOnCreate: ({ initialRecord, adminUser }) => Math.random().toString(36).substring(7),\n//diff-add\n      fillOnCreate: ({initialRecord}: any) => randomUUID(),\n//diff-add\n      components: {\n//diff-add\n        list: '@/renderers/CompactUUID.vue'\n//diff-add\n      }\n    }\n  ...\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"alt text",src:t(9765).A+"",width:"3700",height:"2348"})}),"\n",(0,s.jsx)(n.h3,{id:"country-flag",children:"Country Flag"}),"\n",(0,s.jsx)(n.p,{children:"Renders string fields containing ISO-3166-1 alpha-2 country codes as flags (e.g. 'US', 'DE', 'FR', etc.)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='./resources/apartments.ts'",children:"  columns: [\n    ...\n    {\n      name: 'country',\n  //diff-add\n      components: {\n  //diff-add\n        list: '@/renderers/CountryFlag.vue'\n  //diff-add\n      },\n      ...\n    }\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"alt text",src:t(9861).A+"",width:"3700",height:"2348"})}),"\n",(0,s.jsx)(n.p,{children:"You can also show country name after the flag:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='./resources/apartments.ts'",children:"  columns: [\n    ...\n    {\n      name: 'country',\n  //diff-add\n      components: {\n  //diff-add\n        list: {\n  //diff-add\n          file: '@/renderers/CountryFlag.vue',\n  //diff-add\n          meta: {\n  //diff-add\n            showCountryName: true\n  //diff-add\n          }\n  //diff-add\n        }\n  //diff-add\n      },\n      ...\n    }\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"alt text",src:t(7466).A+"",width:"3700",height:"2348"})}),"\n",(0,s.jsx)(n.h3,{id:"human-number",children:"Human Number"}),"\n",(0,s.jsx)(n.p,{children:"It formats large numbers into a human-readable format (e.g., 10k, 1.5M) and supports localization for different number formats."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='./resources/apartments.ts'",children:"  columns: [\n    ...\n    { \n      name: 'square_meter', \n      label: 'Square', \n      minValue: 1,  // you can set min /max value for number fields\n      maxValue: 100000000,\n      //diff-add\n      components: {\n      //diff-add\n        list: {\n      //diff-add\n          file: '@/renderers/HumanNumber.vue',\n      //diff-add\n        }\n      //diff-add\n      }\n    },\n    {\n    ...\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"alt text",src:t(5504).A+"",width:"438",height:"321"})}),"\n",(0,s.jsx)(n.h3,{id:"url",children:"URL"}),"\n",(0,s.jsxs)(n.p,{children:["If your field has absolute URLs as text strings you can use ",(0,s.jsx)(n.code,{children:"URLs"})," renderer to render them as clickable links."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='./resources/anyResource.ts'",children:"  columns: [\n    ...\n    {\n      name: 'url',\n  //diff-add\n      components: {\n  //diff-add\n        list: '@/renderers/URL.vue'\n  //diff-add\n      },\n    ...\n"})}),"\n",(0,s.jsx)(n.h3,{id:"relative-time",children:"Relative Time"}),"\n",(0,s.jsx)(n.p,{children:"To format your date fields to display the elapsed time, you can utilize the RelativeTime renderer."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='./resources/anyResource.ts'",children:"  columns: [\n    ...\n    {\n      name: 'created_at',\n  //diff-add\n      components: {\n  //diff-add\n        list: '@/renderers/RelativeTime.vue'\n  //diff-add\n      },\n    ...\n"})}),"\n",(0,s.jsx)(n.h3,{id:"rich-text-and-zero-style-rich-text",children:"Rich text and Zero-style Rich text"}),"\n",(0,s.jsxs)(n.p,{children:["If you have some field which holds HTML content you can use ",(0,s.jsx)(n.code,{children:"RichText"})," renderer to render it as HTML."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='./resources/anyResource.ts'",children:"  columns: [\n    ...\n    {\n      name: 'content',\n  //diff-add\n      components: {\n  //diff-add\n        list: '@/renderers/RichText.vue'\n  //diff-add\n      },\n      ...\n    }\n  ] \n"})}),"\n",(0,s.jsxs)(n.p,{children:["The renderer will render the HTML content and protect against XSS attacks.\nIf HTML in field has some tags or classes which covered by adminforth internal styles (including Tailwind classes), they will be styled (text/p styles etc). If this is an issue for your task and you need full raw preview of the HTML, you can use ",(0,s.jsx)(n.code,{children:"ZeroStyleRichText"})," renderer:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='./resources/anyResource.ts'",children:"//diff-remove\nlist: '@/renderers/RichText.vue',\n//diff-add\nlist: '@/renderers/ZeroStylesRichText.vue',\n//diff-add\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ZeroStyleRichText"})," fits well for tasks like email templates preview fields."]}),"\n",(0,s.jsx)(n.h3,{id:"custom-filter-component-for-square-meters",children:"Custom filter component for square meters"}),"\n",(0,s.jsx)(n.p,{children:"Sometimes standard filters are not enough, and you want to make a convenient UI for selecting a range of apartment areas. For example, buttons with options for \u201cSmall (<25 m\xb2)\u201d, \u201cMedium (25\u201390 m\xb2)\u201d and \u201cLarge (>90 m\xb2)\u201d."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='./custom/SquareMetersFilter.vue'",children:"<template>\n  <div class=\"flex flex-col gap-2\">\n    <p class=\"font-medium mb-1 dark:text-white\">{{ $t('Square meters filter') }}</p>\n    <div class=\"flex gap-2\">\n      <button\n        v-for=\"option in options\"\n        :key=\"option.value\"\n        type=\"button\"\n        class=\"flex gap-1 items-center py-1 px-3 text-sm font-medium rounded-default border focus:outline-none focus:z-10 focus:ring-4\"\n        :class=\"{\n          'text-white bg-blue-500 border-blue-500 hover:bg-blue-600 focus:ring-blue-200 dark:focus:ring-blue-800': selected === option.value,\n          'text-gray-900 bg-white border-gray-300 hover:bg-gray-100 hover:text-blue-500 focus:ring-gray-100 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700': selected !== option.value\n        }\"\n        @click=\"select(option.value)\"\n      >\n        {{ $t(option.label) }}\n      </button>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, watch, onMounted } from 'vue';\n\nconst emit = defineEmits(['update:modelValue']);\n\nconst props = defineProps<{\n  modelValue: Array<{ operator: string; value: number }> | null;\n}>();\n\nconst selected = ref<string | null>(null);\n\nconst options = [\n  { value: 'small', label: 'Small' },\n  { value: 'medium', label: 'Medium' },\n  { value: 'large', label: 'Large' }\n];\n\nonMounted(() => {\n  const val = props.modelValue;\n  if (!val || val.length === 0) {\n    selected.value = null;\n    return;\n  }\n\n  const ops = val.map((v) => `${v.operator}:${v.value}`);\n\n  if (ops.includes('lt:25')) selected.value = 'small';\n  else if (ops.includes('gte:25') && ops.includes('lte:90')) selected.value = 'medium';\n  else if (ops.includes('gt:90')) selected.value = 'large';\n  else selected.value = null;\n});\n\nwatch(selected, (size) => {\n  if (!size) {\n    emit('update:modelValue', []);\n    return;\n  }\n\n  const filters = {\n    small: [{ operator: 'lt', value: 25 }],\n    medium: [\n      { operator: 'gte', value: 25 },\n      { operator: 'lte', value: 90 }\n    ],\n    large: [{ operator: 'gt', value: 90 }]\n  };\n\n  emit('update:modelValue', filters[size]);\n});\n\nfunction select(size: string) {\n  selected.value = size;\n\n  switch (size) {\n    case 'small':\n      emit('update:modelValue', [{ operator: 'lt', value: 25 }]);\n      break;\n    case 'medium':\n      emit('update:modelValue', [\n        { operator: 'gte', value: 25 },\n        { operator: 'lte', value: 90 }\n      ]);\n      break;\n    case 'large':\n      emit('update:modelValue', [{ operator: 'gt', value: 90 }]);\n      break;\n  }\n}\n<\/script>\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title='./resources/apartments.ts'",children:"  columns: [\n    ...\n    {\n      name: 'square_meter', \n      label: 'Square',\n      //diff-add\n      components: {\n      //diff-add\n        filter: '@@/SquareMetersFilter.vue'\n      //diff-add\n      }\n    },\n    ...\n]\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},5448:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/Custom record field rendering-b2ecaebfe6c1e037ecb311cd853dadde.png"},7466:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/Group 12 (1)-2b0124d7267e86fbd94cca307b19ba97.jpg"},9861:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/Group 13-4f361e046d003307dae13f8277178a6c.png"},9765:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/Group 8-c9e687ed354d2a6d771b4c9240e4ef67.jpg"},5504:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/HumanNumber-ed37218caa516970fcab34dc133dd21f.png"},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);