"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[6659],{6329:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>a});var o=s(4848),t=s(8453);const r={},i=void 0,c={id:"Plugins/AccessControl",title:"AccessControl",description:"AccessControl plugin allows to limit access to the resource actions (list, show, create, update, delete) based on custom callback.",source:"@site/docs/Plugins/AccessControl.md",sourceDirName:"Plugins",slug:"/Plugins/AccessControl",permalink:"/docs/Plugins/AccessControl",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Glossary",permalink:"/docs/Glossary"},next:{title:"ForeignInlineList",permalink:"/docs/Plugins/ForeignInlineList"}},l={},a=[{value:"Usage",id:"usage",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["AccessControl plugin allows to limit access to the resource actions (list, show, create, update, delete) based on custom callback.\nCallback accepts ",(0,o.jsx)(n.a,{href:"/docs/api/types/AdminForthConfig/type-aliases/AdminUser/",children:"AdminUser"})," which you can use to define access rules."]}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.p,{children:"Import plugin:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import AccessControlPlugin from 'adminforth/plugins/AccessControl';\nimport type { AdminUser, AllowedActionsEnum } from 'adminforth/types/AdminForthConfig.js';\n\n"})}),"\n",(0,o.jsx)(n.p,{children:"If you are using pure Node without TypeScript, you can use the following code:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import AccessControl from  'adminforth/dist/plugins/AccessControl/index.js';\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In ",(0,o.jsx)(n.a,{href:"/docs/Getting%20Started",children:"Getting Started"})," we created a ",(0,o.jsx)(n.code,{children:"'users'"})," resource which has a field ",(0,o.jsx)(n.code,{children:"'role'"}),". During user creation\nin admin panel we can set the role of the user. Let's add the plugin to the resource configuration:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"{ \n    ...\n    resourceId: 'users',\n    ...\n    plugins: [\n      new AccessControlPlugin({\n          hasAccess: async (adminUser: AdminUser, action: AllowedActionsEnum) => {\n            // don't allow for non superadmin and non root users to edit and create users\n            if (['edit', 'create'].includes(action) && !adminUser.isRoot && adminUser.dbUser.role !== 'superadmin') {\n              return `You don't have access to ${action} this resource. Contact admin for more information.`\n            }\n            return true;\n          },\n      }),\n    ], \n}\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["\u2139\ufe0f TIP: If you wish you can use ",(0,o.jsx)(n.a,{href:"/docs/api/types/AdminForthConfig/type-aliases/AdminForthConfigMenuItem#visible",children:"visible"})," callback on menu item to hide some resources from the menu depending on the user role."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"/docs/api/plugins/AccessControl/types/type-aliases/PluginOptions",children:"API Reference"})," for more all options."]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var o=s(6540);const t={},r=o.createContext(t);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);