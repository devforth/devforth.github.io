"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[5641],{746:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=n(4848),s=n(8453);const i={},r="Hooks",a={id:"tutorial/Customization/hooks",title:"Hooks",description:"Hooks are used to:",source:"@site/docs/tutorial/03-Customization/03-hooks.md",sourceDirName:"tutorial/03-Customization",slug:"/tutorial/Customization/hooks",permalink:"/docs/tutorial/Customization/hooks",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Virtual columns",permalink:"/docs/tutorial/Customization/virtualColumns"},next:{title:"Disabling actions",permalink:"/docs/tutorial/Customization/limitingAccess"}},d={},c=[{value:"Modify the data before it is saved to the database",id:"modify-the-data-before-it-is-saved-to-the-database",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"hooks",children:"Hooks"}),"\n",(0,o.jsx)(t.p,{children:"Hooks are used to:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"modify the data before it is saved to the database on create or update"}),"\n",(0,o.jsx)(t.li,{children:"execute something after data were saved or deleted"}),"\n",(0,o.jsx)(t.li,{children:"change the query before fetching items from the database"}),"\n",(0,o.jsx)(t.li,{children:"modify the fetched data before it is displayed in the list and show"}),"\n",(0,o.jsxs)(t.li,{children:["prevent the request to db depending on some condition (Better use ",(0,o.jsx)(t.a,{href:"#limiting-access-to-the-resource-actions",children:"allowedActions"})," for this)"]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"modify-the-data-before-it-is-saved-to-the-database",children:"Modify the data before it is saved to the database"}),"\n",(0,o.jsx)(t.p,{children:"Let's add id to adminUser when user creates a new appartment:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"import type { AdminUser } from  'adminforth/types/AdminForthConfig.js';\n\n{\n  ...\n  resourceId: 'apparts',\n  ...\n  columns: [\n    ...\n    {\n      name: 'user_id',\n      ...\n      showIn: ['list', 'show', 'edit'], // don't even show this field in create\n      ...\n    },\n    ...\n  ],\n  ...\n  hooks: {\n    create: {\n      beforeSave: async ({ adminUser, record }: { adminUser: AdminUser, record: any }) => {\n        if (adminUser.isRoot) {\n          return { ok: false, error: \"Root user can't create appartment, relogin as DB user\" };\n        }\n        record.user_id = adminUser.dbUser.id;\n        return { ok: true, record };\n      }\n    }\n  }\n}\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var o=n(6540);const s={},i=o.createContext(s);function r(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);