"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[6594],{9118:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"tutorial/Customization/virtualColumns","title":"Virtual columns","description":"Virtual column for show and list","source":"@site/docs/tutorial/03-Customization/03-virtualColumns.md","sourceDirName":"tutorial/03-Customization","slug":"/tutorial/Customization/virtualColumns","permalink":"/docs/tutorial/Customization/virtualColumns","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Custom record field rendering","permalink":"/docs/tutorial/Customization/customFieldRendering"},"next":{"title":"Hooks","permalink":"/docs/tutorial/Customization/hooks"}}');var o=s(4848),r=s(8453);const i={},d="Virtual columns",a={},l=[{value:"Virtual column for show and list",id:"virtual-column-for-show-and-list",level:2},{value:"Virtual columns for editing.",id:"virtual-columns-for-editing",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"virtual-columns",children:"Virtual columns"})}),"\n",(0,o.jsx)(n.h2,{id:"virtual-column-for-show-and-list",children:"Virtual column for show and list"}),"\n",(0,o.jsxs)(n.p,{children:["Sometimes you need to visualize custom columns which do not exist in database.\nFor doing this you can use ",(0,o.jsx)(n.code,{children:"virtual"})," columns."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:"title='./resources/apartments.ts'",children:"//diff-add\nimport { AdminForthDataTypes, AdminForthResourcePages } from 'adminforth';\n\n...\nresourceId: 'aparts',\ncolumns: [\n  ...\n//diff-add\n  {\n//diff-add\n    name: 'Country Flag',\n//diff-add\n    label: 'Country Flag',\n//diff-add\n    type: AdminForthDataTypes.STRING,\n//diff-add\n    virtual: true,\n//diff-add\n    showIn: [AdminForthResourcePages.show, AdminForthResourcePages.list],\n//diff-add\n    components: {\n//diff-add\n      show: '@@/CountryFlag.vue',\n//diff-add\n      list: '@@/CountryFlag.vue',\n//diff-add\n    },\n//diff-add\n  }\n  ...\n]\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This field will be displayed in show and list views with custom component ",(0,o.jsx)(n.code,{children:"CountryFlag.vue"}),".\nCreate file ",(0,o.jsx)(n.code,{children:"CountryFlag.vue"})," in ",(0,o.jsx)(n.code,{children:"custom"})," folder of your project:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",metastring:'title="./custom/CountryFlag.vue"',children:"<template>\n   {{ getFlagEmojiFromIso(record.country) }}\n</template>\n  \n<script setup lang=\"ts\">\n import type { AdminForthResourceColumnCommon, AdminForthResourceCommon, AdminUser } from '@/types/Common';\n\n const props = defineProps<{\n     column: AdminForthResourceColumnCommon;\n     record: any;\n     meta: any;\n     resource: AdminForthResourceCommon;\n     adminUser: AdminUser\n }>();\n   \n  function getFlagEmojiFromIso(iso) {\n     return iso?.toUpperCase()?.replace(/./g, (char) => String.fromCodePoint(char.charCodeAt(0) + 127397));\n  }\n<\/script>\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To test component open some apartment for edit and change ",(0,o.jsx)(n.code,{children:"description"})," field to ",(0,o.jsx)(n.code,{children:"US New York"}),".\nHere is how it looks:\n",(0,o.jsx)(n.img,{alt:"alt text",src:s(9258).A+"",width:"3700",height:"1932"})]}),"\n",(0,o.jsx)(n.h2,{id:"virtual-columns-for-editing",children:"Virtual columns for editing."}),"\n",(0,o.jsxs)(n.p,{children:["Another usecase of ",(0,o.jsx)(n.code,{children:"virtual"})," columns is to add new fields in edit and create view. In the ",(0,o.jsx)(n.a,{href:"/docs/tutorial/gettingStarted",children:"Getting started"})," we used this feature to add ",(0,o.jsx)(n.code,{children:"password"})," field to the ",(0,o.jsx)(n.code,{children:"users"})," resource.\nThing is that password itself can't be stored in the database, but instead their hash is stored.\nSo we need to add ",(0,o.jsx)(n.code,{children:"password"})," field to the ",(0,o.jsx)(n.code,{children:"users"})," resource and make it ",(0,o.jsx)(n.code,{children:"virtual"})," so it will not be stored in the database."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="./resources/users.ts"',children:"...\nresourceId: 'users',\n...\ncolumns: [\n  ...\n  {\n    name: 'password',\n    virtual: true,  // field will not be persisted into db\n    required: { create: true }, // make required only on create page\n    editingNote: { edit: 'Leave empty to keep password unchanged' },\n    minLength: 8,\n    type: AdminForthDataTypes.STRING,\n    showIn: ['create', 'edit'], // to show field only on create and edit pages\n    masked: true, // to show stars in input field\n  }\n  ...\n]\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now to handle virtual ",(0,o.jsx)(n.code,{children:"password"})," field we use hooks:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="./index.ts"',children:"hooks: {\n   create: {\n     beforeSave: async ({ record, adminUser, resource }) => {\n       record.password_hash = await AdminForth.Utils.generatePasswordHash(record.password);\n       return { ok:true, error: false };\n     }\n   },\n   edit: {\n     beforeSave: async ({ record, adminUser, resource}) => {\n       if (record.password) {\n         record.password_hash = await AdminForth.Utils.generatePasswordHash(record.password);\n       }\n       return { ok: true, error: false }\n     },\n   },\n }\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Hook still has access to the virtual field ",(0,o.jsx)(n.code,{children:"record.password"}),", and we use built-in AdminForth hasher to hash password and write it into\n",(0,o.jsx)(n.code,{children:"password_hash"})," field which exists in database."]}),"\n",(0,o.jsxs)(n.p,{children:["After hook is executed, ",(0,o.jsx)(n.code,{children:"record.password"})," will be removed from the record since it is virtual, so password itself will not be saved to the database."]}),"\n",(0,o.jsxs)(n.p,{children:["Another important point is that ",(0,o.jsx)(n.code,{children:"hashed_password"})," field should never be passed to frontend due to security reasons."]}),"\n",(0,o.jsx)(n.p,{children:"To do it we have 2 options:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Do not list ",(0,o.jsx)(n.code,{children:"password_hash"})," in the ",(0,o.jsx)(n.code,{children:"columns"})," array of the resource. If AdminForth knows nothing about field\nit will never pass this field to frontend."]}),"\n",(0,o.jsxs)(n.li,{children:["Define ",(0,o.jsx)(n.code,{children:"password_hash"})," but set ",(0,o.jsx)(n.code,{children:"backendOnly"})]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"{     \n  name: 'password_hash',\n  type: AdminForthDataTypes.STRING,\n  showIn: [],\n  backendOnly: true,  // will never go to frontend\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},9258:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/Virtual columns-6648305a00db72e9b165fa226eda0282.png"},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>d});var t=s(6540);const o={},r=t.createContext(o);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);