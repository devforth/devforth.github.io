"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[6117],{5163:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>s,default:()=>p,frontMatter:()=>d,metadata:()=>a,toc:()=>l});var i=t(4848),o=t(8453);const d={},s="Plugin development guide",a={id:"tutorial/Advanced/plugin-development",title:"Plugin development guide",description:"Creating a plugin is a powerful way to extend AdminForth functionality.",source:"@site/docs/tutorial/04-Advanced/01-plugin-development.md",sourceDirName:"tutorial/04-Advanced",slug:"/tutorial/Advanced/plugin-development",permalink:"/docs/tutorial/Advanced/plugin-development",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Custom bulk actions",permalink:"/docs/tutorial/Customization/bulkActions"},next:{title:"Deploy in Docker",permalink:"/docs/tutorial/deploy"}},r={},l=[{value:"Concepts",id:"concepts",level:2},{value:"Boilerplate",id:"boilerplate",level:2},{value:"Creating plugin logic",id:"creating-plugin-logic",level:2},{value:"Installation",id:"installation",level:2}];function c(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"plugin-development-guide",children:"Plugin development guide"}),"\n",(0,i.jsx)(e.p,{children:"Creating a plugin is a powerful way to extend AdminForth functionality."}),"\n",(0,i.jsx)(e.h2,{id:"concepts",children:"Concepts"}),"\n",(0,i.jsx)(e.p,{children:"Every plugin is installed to resource."}),"\n",(0,i.jsx)(e.p,{children:"Main concept is pretty simple: every plugin simply does modification of AdminForth config which developer passed on AdminForth initialization."}),"\n",(0,i.jsx)(e.p,{children:"Plugin can modify both config of resource where it is installed or whole global config."}),"\n",(0,i.jsxs)(e.p,{children:["To perform modification plugin defines a method ",(0,i.jsx)(e.code,{children:"modifyResourceConfig"})," which accepts ",(0,i.jsx)(e.code,{children:"config"})," object. The ",(0,i.jsx)(e.code,{children:"modifyResourceConfig"})," method called after first config validation and preprocessing.\nAfter all plugins did modifications, AdminForth calls validation and preprocessing again second time to make sure all plugins did not screw up the config."]}),"\n",(0,i.jsx)(e.p,{children:"Also plugins can define custom components and custom APIs."}),"\n",(0,i.jsx)(e.h2,{id:"boilerplate",children:"Boilerplate"}),"\n",(0,i.jsx)(e.p,{children:"Let's create plugin which auto-completes text in strings"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"mkdir -p af-plugin-chatgpt\ncd af-plugin-chatgpt\nnpm init -y\ntouch index.ts\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Edit ",(0,i.jsx)(e.code,{children:"package.json"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",metastring:"title='./af-plugin-chatgpt/package.json'",children:'{\n  ...\n//diff-remove\n  "main": "index.js",\n//diff-add\n  "main": "dist/index.js",\n//diff-add\n  "types": "dist/index.d.ts",\n//diff-add\n  "type": "module",\n  "scripts": {\n//diff-remove\n    "test": "echo \\"Error: no test specified\\" && exit 1",\n//diff-add\n    "build": "tsc && cp -rf custom dist/",\n  },\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"Install AdminForth for types and classes imports:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"npm i adminforth --save\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Now create plugin boilerplate in ",(0,i.jsx)(e.code,{children:"index.ts"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",metastring:"title='./af-plugin-chatgpt/index.ts'",children:"\nimport { AdminForthResourcePages, IAdminForth, IHttpServer, AdminForthPlugin, AdminForthResourceColumn  } from \"adminforth\";\nimport { PluginOptions } from './types.js';\n\n\nexport default class ChatGptPlugin extends AdminForthPlugin {\n  options: PluginOptions;\n\n  constructor(options: PluginOptions) {\n    super(options, import.meta.url);\n    this.options = options;\n  }\n\n  async modifyResourceConfig(adminforth: IAdminForth, resourceConfig: AdminForthResource) {\n    super.modifyResourceConfig(adminforth, resourceConfig);\n  \n    // simply modify resourceConfig or adminforth.config. You can get access to plugin options via this.options;\n  }\n  \n  validateConfigAfterDiscover(adminforth: IAdminForth, resourceConfig: AdminForthResource) {\n    // optional method where you can safely check field types after database discovery was performed\n  }\n\n  instanceUniqueRepresentation(pluginOptions: any) : string {\n    // optional method to return unique string representation of plugin instance. \n    // Needed if plugin can have multiple instances on one resource \n    return `single`;\n  }\n\n  setupEndpoints(server: IHttpServer) {\n    server.endpoint({\n      method: 'POST',\n      path: `/plugin/${this.pluginInstanceId}/example`,\n      handler: async ({ body }) => {\n        const { name } = body;\n        return { hey: `Hello ${name}` };\n      }\n    });\n  }\n\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Create ",(0,i.jsx)(e.code,{children:"types.ts"})," file:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",metastring:"title='./af-plugin-chatgpt/types.ts'",children:"\nexport interface PluginOptions {\n  \n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Create ",(0,i.jsx)(e.code,{children:"./af-plugin-chatgpt/tsconfig.json"})," file:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",metastring:"title='./af-plugin-chatgpt/tsconfig.json'",children:'{\n  "compilerOptions": {\n    "target": "es2016",                                  /* Set the JavaScript language version for emitted JavaScript and include*/ \n    "module": "node16",                                /* Specify what module code is generated. */\n    "outDir": "./dist",                                   /* Specify an output folder for all emitted files. */\n    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules.  */\n    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */\n    "strict": false,                                     /* Enable all strict type-checking options. */\n    "skipLibCheck": true,                                 /* Skip type checking all .d.ts files. */\n  },\n  "exclude": ["node_modules", "dist", "custom"],           /* Exclude files from compilation. */\n}\n\n'})}),"\n",(0,i.jsx)(e.h2,{id:"creating-plugin-logic",children:"Creating plugin logic"}),"\n",(0,i.jsx)(e.p,{children:"In previous section we created boilerplate which is a must for every plugin.\nNow let's implement plugin logic."}),"\n",(0,i.jsx)(e.p,{children:"First of all we want one plugin installation to be able to set custom Vue component on create and edit pages."}),"\n",(0,i.jsx)(e.p,{children:"In plugin options we will pass field name and OPENAI_API_KEY."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",metastring:"title='./af-plugin-chatgpt/types.ts'",children:"\nexport interface PluginOptions {\n\n//diff-add\n  /**\n//diff-add\n   * Field where plugin will auto-complete text. Should be string or text field.\n//diff-add\n   */\n//diff-add\n  fieldName: string;\n\n//diff-add\n  /**\n   * OpenAI API key. Go to https://platform.openai.com/, go to Dashboard -> API keys -> Create new secret key\n//diff-add\n   * Paste value in your .env file OPENAI_API_KEY=your_key\n//diff-add\n   * Set openAiApiKey: process.env.OPENAI_API_KEY to access it\n//diff-add\n   */\n//diff-add\n  openAiApiKey: string;\n\n//diff-add\n  /**\n//diff-add\n   * Model name. Go to https://platform.openai.com/docs/models, select model and copy name.\n//diff-add\n   * Default is `gpt-3.5-turbo`. Use e.g. more expensive `gpt-4o` for more powerful model.\n//diff-add\n   */\n//diff-add\n  model?: string;\n\n//diff-add\n  /**\n//diff-add\n   * Expert settings\n//diff-add\n   */\n//diff-add\n  expert?: {\n\n//diff-add\n    /**\n//diff-add\n     * Number of tokens to generate. Default is 50. 1 token ~= \xbe words \n//diff-add\n     */\n//diff-add\n    maxTokens?: number;\n//diff-add\n  },\n\n\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"Now we have to create custom Vue component which will be used in plugin. To do it create custom folder:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"mkdir -p af-plugin-chatgpt/custom\n"})}),"\n",(0,i.jsxs)(e.p,{children:["We will use ",(0,i.jsx)(e.code,{children:"vue-suggestion-input"})," package in our frontend component.\nTo install package into frontend component, first of all we have to initialize npm package in custom folder:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"cd af-plugin-chatgpt/custom\nnpm init -y\n"})}),"\n",(0,i.jsx)(e.p,{children:"Now install our dependency:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"npm i --save-dev vue-suggestion-input \n"})}),"\n",(0,i.jsxs)(e.p,{children:["Create file ",(0,i.jsx)(e.code,{children:"completionInput.vue"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-vue",metastring:"title='./af-plugin-chatgpt/custom/completionInput.vue'",children:"<template>\n  <SuggestionInput \n    class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 \n      focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400\n      dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 whitespace-normal\"\n      v-model=\"currentValue\"\n      :type=\"column.type\"\n      :completionRequest=\"complete\"\n      :debounceTime=\"meta.debounceTime\"\n    />\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted, watch, Ref  } from 'vue';\nimport { callAdminForthApi } from '@/utils';\nimport { AdminForthColumn } from '@/types/AdminForthConfig';\nimport SuggestionInput from 'vue-suggestion-input';\nimport 'vue-suggestion-input/dist/style.css';\n\nconst props = defineProps<{\n  column: AdminForthColumn,\n  record: any,\n  meta: any,\n}>();\n\nconst emit = defineEmits([\n  'update:value',\n]);\n\nconst currentValue: Ref<string> = ref('');\n\nonMounted(() => {\n  currentValue.value = props.record[props.column.name] || '';\n});\n\nwatch(() => currentValue.value, (value) => {\n  emit('update:value', value);\n});\n\nwatch(() => props.record, (value) => {\n  currentValue.value = value[props.column.name] || '';\n});\n\nasync function complete() {\n  const res = await callAdminForthApi({\n      path: `/plugin/${props.meta.pluginInstanceId}/doComplete`,\n      method: 'POST',\n      body: {\n        record: props.record\n      },\n  });\n\n  return res.completion;\n}\n\n<\/script>\n\n"})}),"\n",(0,i.jsxs)(e.p,{children:["As you can see we call API endpoint ",(0,i.jsx)(e.code,{children:"/plugin/${props.meta.pluginInstanceId}/doComplete"})," to get completion."]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"For all your API calls from your own plugins we recommend to use same url format which includes pluginInstanceId. This way you can be sure that your API calls are unique for each plugin installation."}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"Let's define API endpoint in our plugin:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",metastring:"title='./af-plugin-chatgpt/index.ts'",children:"  setupEndpoints(server: IHttpServer) {\n    server.endpoint({\n      method: 'POST',\n//diff-remove\n      path: `/plugin/${this.pluginInstanceId}/example`,\n//diff-add\n      path: `/plugin/${this.pluginInstanceId}/doComplete`,\n      handler: async ({ body }) => {\n//diff-remove\n        const { name } = body;\n//diff-remove\n        return { hey: `Hello ${name}` };\n//diff-add\n        const { record } = body;\n//diff-add\n        const recordNoField = {...record};\n//diff-add\n        delete recordNoField[this.options.fieldName];\n//diff-add\n        let currentVal = record[this.options.fieldName];\n//diff-add\n        const promptLimit = 500;\n//diff-add\n        if (currentVal && currentVal.length > promptLimit) {\n//diff-add\n          currentVal = currentVal.slice(-promptLimit);\n//diff-add\n        }\n//diff-add\n        const resLabel = this.resourceConfig.label;\n//diff-add\n        let content;\n//diff-add\n        if (currentVal) {\n//diff-add\n          content = `Continue writing for text/string field \"${this.options.fieldName}\" in the table \"${resLabel}\"\\n` +\n//diff-add\n              (Object.keys(recordNoField).length > 0 ? `Record has values for the context: ${JSON.stringify(recordNoField)}\\n` : '') +\n//diff-add\n              `Current field value: ${currentVal}\\n` +\n//diff-add\n              \"Don't talk to me. Just write text. No quotes. Don't repeat current field value, just write completion\\n\";\n//diff-add\n        } else {\n//diff-add\n          content = `Fill text/string field \"${this.options.fieldName}\" in the table \"${resLabel}\"\\n` +\n//diff-add\n              (Object.keys(recordNoField).length > 0 ? `Record has values for the context: ${JSON.stringify(recordNoField)}\\n` : '') +\n//diff-add\n              \"Be short, clear and precise. No quotes. Don't talk to me. Just write text\\n\";\n//diff-add\n        }\n\n//diff-add\n        const resp = await fetch('https://api.openai.com/v1/chat/completions', {\n//diff-add\n          method: 'POST',\n//diff-add\n          headers: {\n//diff-add\n            'Content-Type': 'application/json',\n//diff-add\n            'Authorization': `Bearer ${this.options.openAiApiKey}`\n//diff-add\n          },\n//diff-add\n          body: JSON.stringify({\n//diff-add\n            model: this.options.model || 'gpt-3.5-turbo',\n//diff-add\n            messages: [{ role: 'user', content, }],\n//diff-add\n            temperature: 0.7,\n//diff-add\n            max_tokens: this.options.expert?.maxTokens || 50,\n//diff-add\n            stop: ['.'],\n//diff-add\n          })\n//diff-add\n        });\n//diff-add\n        const data = await resp.json();\n//diff-add\n        let suggestion = data.choices[0].message.content + (\n//diff-add\n          data.choices[0].finish_reason === 'stop' ? (\n//diff-add\n            this.columnType === AdminForthDataTypes.TEXT ? '. ' : ''\n//diff-add\n          ) : ''\n//diff-add\n        );\n//diff-add\n        if (suggestion.startsWith(currentVal)) {\n//diff-add\n          suggestion = suggestion.slice(currentVal.length);\n//diff-add\n        }\n//diff-add\n        return { completion: suggestion };\n//diff-add\n      }\n    });\n  }\n"})}),"\n",(0,i.jsx)(e.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(e.p,{children:["in your app ",(0,i.jsx)(e.code,{children:"index.ts"})," file:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",metastring:"title='./index.ts'",children:"\nimport ChatGptPlugin from '../af-plugin-chatgpt/index.js';\n\n...\n\n{\n  resourceId: 'aparts',\n  ...\n  plugins: [\n    ...\n    new ChatGptPlugin({\n      openAiApiKey: process.env.OPENAI_API_KEY as string,\n      fieldName: 'title',\n    }),\n  ]\n}\n\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Go to ",(0,i.jsx)(e.a,{href:"https://platform.openai.com/",children:"https://platform.openai.com/"}),", go to Dashboard -> API keys -> Create new secret key. Paste value in your .env file OPENAI_API_KEY=your_key"]})]})}function p(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>a});var i=t(6540);const o={},d=i.createContext(o);function s(n){const e=i.useContext(d);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),i.createElement(d.Provider,{value:e},n.children)}}}]);