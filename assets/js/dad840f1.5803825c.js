"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[8993],{51013:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"tutorial/Advanced/plugin-development","title":"Plugin development guide","description":"Creating a plugin is a powerful way to extend AdminForth functionality.","source":"@site/docs/tutorial/08-Advanced/01-plugin-development.md","sourceDirName":"tutorial/08-Advanced","slug":"/tutorial/Advanced/plugin-development","permalink":"/docs/tutorial/Advanced/plugin-development","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Clone row","permalink":"/docs/tutorial/Plugins/clone-row"}}');var o=i(74848),d=i(28453);const s={},r="Plugin development guide",a={},l=[{value:"Concepts",id:"concepts",level:2},{value:"Boilerplate",id:"boilerplate",level:2},{value:"Creating plugin logic",id:"creating-plugin-logic",level:2},{value:"Installation of plugin",id:"installation-of-plugin",level:2},{value:"Configuring plugin activation order",id:"configuring-plugin-activation-order",level:2},{value:"Splitting frontend logic into multiple files",id:"splitting-frontend-logic-into-multiple-files",level:2},{value:"Using Adapters",id:"using-adapters",level:2}];function c(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"plugin-development-guide",children:"Plugin development guide"})}),"\n",(0,o.jsx)(e.p,{children:"Creating a plugin is a powerful way to extend AdminForth functionality."}),"\n",(0,o.jsx)(e.h2,{id:"concepts",children:"Concepts"}),"\n",(0,o.jsx)(e.p,{children:"Every plugin is installed to resource."}),"\n",(0,o.jsx)(e.p,{children:"Every plugin simply does modification of AdminForth config which developer passed on AdminForth initialization."}),"\n",(0,o.jsx)(e.p,{children:"Plugin can modify both config of resource where it is installed or whole global config."}),"\n",(0,o.jsxs)(e.p,{children:["To perform modification plugin defines a method ",(0,o.jsx)(e.code,{children:"modifyResourceConfig"})," which accepts ",(0,o.jsx)(e.code,{children:"config"})," object. The ",(0,o.jsx)(e.code,{children:"modifyResourceConfig"})," method called after first config validation and preprocessing."]}),"\n",(0,o.jsx)(e.p,{children:"Also plugins can define custom components and custom APIs."}),"\n",(0,o.jsx)(e.h2,{id:"boilerplate",children:"Boilerplate"}),"\n",(0,o.jsx)(e.p,{children:"Let's create plugin which auto-completes text in strings"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"mkdir -p af-plugin-chatgpt\ncd af-plugin-chatgpt\nnpx adminforth create-plugin\n"})}),"\n",(0,o.jsx)(e.p,{children:"CLI options:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:(0,o.jsx)(e.code,{children:"--plugin-name"})})," - name for your plugin."]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"This command will:"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsx)(e.li,{children:"Set up the TypeScript configuration"}),"\n",(0,o.jsx)(e.li,{children:"Create initial plugin files"}),"\n",(0,o.jsx)(e.li,{children:"Install required dependencies"}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"The CLI will create the following files and directories:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-text",children:"af-plugin-chatgpt/\n\u251c\u2500\u2500 custom\n\u2502   \u2514\u2500\u2500 tsconfig.json     # TypeScript configuration for custom components\n\u251c\u2500\u2500 index.ts              # Main plugin file with boilerplate code\n\u251c\u2500\u2500 package.json          # Plugin package configuration\n\u251c\u2500\u2500 tsconfig.json         # TypeScript configuration\n\u2514\u2500\u2500 types.ts              # TypeScript types for your plugin\n\n"})}),"\n",(0,o.jsx)(e.p,{children:"This is very important step! (otherwise some features like method redefinition might blindly fail)."}),"\n",(0,o.jsx)(e.h2,{id:"creating-plugin-logic",children:"Creating plugin logic"}),"\n",(0,o.jsx)(e.p,{children:"In previous section we created boilerplate which is a must for every plugin.\nNow let's implement plugin logic."}),"\n",(0,o.jsx)(e.p,{children:"First of all we want one plugin installation to be able to set custom Vue component on create and edit pages."}),"\n",(0,o.jsxs)(e.p,{children:["In plugin options we will pass field name and ",(0,o.jsx)(e.code,{children:"OPENAI_API_KEY"}),"."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",metastring:"title='./af-plugin-chatgpt/types.ts'",children:"\nexport interface PluginOptions {\n\n//diff-add\n  /**\n//diff-add\n   * Field where plugin will auto-complete text. Should be string or text field.\n//diff-add\n   */\n//diff-add\n  fieldName: string;\n\n//diff-add\n  /**\n//diff-add\n   * OpenAI API key. Go to https://platform.openai.com/, go to Dashboard -> API keys -> Create new secret key\n//diff-add\n   * Paste value in your .env file OPENAI_API_KEY=your_key\n//diff-add\n   * Set openAiApiKey: process.env.OPENAI_API_KEY to access it\n//diff-add\n   */\n//diff-add\n  openAiApiKey: string;\n\n//diff-add\n  /**\n//diff-add\n   * Model name. Go to https://platform.openai.com/docs/models, select model and copy name.\n//diff-add\n   * Default is `gpt-4o-mini`. Use e.g. more expensive `gpt-4o` for more powerful model.\n//diff-add\n   */\n//diff-add\n  model?: string;\n\n//diff-add\n  /**\n//diff-add\n   * Expert settings\n//diff-add\n   */\n//diff-add\n  expert?: {\n\n//diff-add\n    /**\n//diff-add\n     * Number of tokens to generate. Default is 50. 1 token ~= \xbe words \n//diff-add\n     */\n//diff-add\n    maxTokens?: number;\n//diff-add\n  }\n\n\n}\n"})}),"\n",(0,o.jsxs)(e.p,{children:["We will use ",(0,o.jsx)(e.code,{children:"vue-suggestion-input"})," package in our frontend component.\nTo install package into frontend component, first of all we have to initialize npm package in custom folder:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"cd af-plugin-chatgpt/custom\nnpm init -y\n"})}),"\n",(0,o.jsx)(e.p,{children:"Now install our dependency:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"npm i vue-suggestion-input -D\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Create file ",(0,o.jsx)(e.code,{children:"completionInput.vue"}),":"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-html",metastring:"title='./af-plugin-chatgpt/custom/completionInput.vue'",children:"<template>\n  <SuggestionInput \n    class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 \n      focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400\n      dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 whitespace-normal\"\n      v-model=\"currentValue\"\n      :type=\"column.type\"\n      :completionRequest=\"complete\"\n      :debounceTime=\"meta.debounceTime\"\n    />\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted, watch, Ref  } from 'vue';\nimport { callAdminForthApi } from '@/utils';\nimport type { AdminForthColumnCommon } from '@/types/Common';\nimport SuggestionInput from 'vue-suggestion-input';\nimport 'vue-suggestion-input/dist/style.css';\n\nconst props = defineProps<{\n  column: AdminForthColumnCommon,\n  record: any,\n  meta: any,\n}>();\n\nconst emit = defineEmits([\n  'update:value',\n]);\n\nconst currentValue: Ref<string> = ref('');\n\nonMounted(() => {\n  currentValue.value = props.record[props.column.name] || '';\n});\n\nwatch(() => currentValue.value, (value) => {\n  emit('update:value', value);\n});\n\nwatch(() => props.record, (value) => {\n  currentValue.value = value[props.column.name] || '';\n});\n\nasync function complete(textBeforeCursor: string) {\n  const res = await callAdminForthApi({\n      path: `/plugin/${props.meta.pluginInstanceId}/doComplete`,\n      method: 'POST',\n      body: {\n        record: {...props.record, [props.column.name]: textBeforeCursor},\n      },\n  });\n\n  return res.completion;\n}\n<\/script>\n\n"})}),"\n",(0,o.jsxs)(e.p,{children:["As you can see we call API endpoint ",(0,o.jsx)(e.code,{children:"/plugin/${props.meta.pluginInstanceId}/doComplete"})," to get completion."]}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsx)(e.p,{children:"For all your API calls from your own plugins we recommend to use same url format which includes pluginInstanceId. This way you can be sure that your API calls are unique for each plugin installation."}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"Let's define API endpoint in our plugin:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",metastring:"title='./af-plugin-chatgpt/index.ts'",children:"  setupEndpoints(server: IHttpServer) {\n    server.endpoint({\n      method: 'POST',\n//diff-remove\n      path: `/plugin/${this.pluginInstanceId}/example`,\n//diff-add\n      path: `/plugin/${this.pluginInstanceId}/doComplete`,\n      handler: async ({ body }) => {\n//diff-remove\n        const { name } = body;\n//diff-remove\n        return { hey: `Hello ${name}` };\n//diff-add\n        const { record } = body;\n//diff-add\n        let currentVal = record[this.options.fieldName];\n//diff-add\n        const promptLimit = 500;\n//diff-add\n        if (currentVal && currentVal.length > promptLimit) {\n//diff-add\n          currentVal = currentVal.slice(-promptLimit);\n//diff-add\n        }\n//diff-add\n        const resLabel = this.resourceConfig.label;\n//diff-add\n        let content;\n//diff-add\n        if (currentVal) {\n//diff-add\n          content = `Continue writing for text/string field \"${this.options.fieldName}\" in the table \"${resLabel}\"\\n` +\n//diff-add\n              `Current field value: ${currentVal}\\n` +\n//diff-add\n              \"Don't talk to me. Just write text. No quotes. Don't repeat current field value, just write completion\\n\";\n//diff-add\n        } else {\n//diff-add\n          content = `Fill text/string field \"${this.options.fieldName}\" in the table \"${resLabel}\"\\n` +\n//diff-add\n              \"Be short, clear and precise. No quotes. Don't talk to me. Just write text\\n\";\n//diff-add\n        }\n//diff-add\n        const resp = await fetch('https://api.openai.com/v1/chat/completions', {\n//diff-add\n          method: 'POST',\n//diff-add\n          headers: {\n//diff-add\n            'Content-Type': 'application/json',\n//diff-add\n            'Authorization': `Bearer ${this.options.openAiApiKey}`\n//diff-add\n          },\n//diff-add\n          body: JSON.stringify({\n//diff-add\n            model: this.options.model || 'gpt-4o-mini',\n//diff-add\n            messages: [{ role: 'user', content, }],\n//diff-add\n            temperature: 0.7,\n//diff-add\n            max_tokens: this.options.expert?.maxTokens || 50,\n//diff-add\n            stop: ['.'],\n//diff-add\n          })\n//diff-add\n        });\n//diff-add\n        const data = await resp.json();\n//diff-add\n        if (!data.choices) {\n//diff-add\n              throw new Error(`Wrong response from OpenAI ${JSON.stringify(data)}`)\n//diff-add\n        }\n//diff-add\n        let suggestion = data.choices[0].message.content + (\n//diff-add\n          data.choices[0].finish_reason === 'stop' ? (\n//diff-add\n            this.columnType === AdminForthDataTypes.TEXT ? '. ' : ''\n//diff-add\n          ) : ''\n//diff-add\n        );\n//diff-add\n        if (suggestion.startsWith(currentVal)) {\n//diff-add\n          suggestion = suggestion.slice(currentVal.length);\n//diff-add\n        }\n//diff-add\n        if (suggestion.startsWith(currentVal)) {\n//diff-add\n          suggestion = suggestion.slice(currentVal.length);\n//diff-add\n        }\n//diff-add\n        const wordsList = suggestion.split(' ').map((w, i) => {\n//diff-add\n          return (i === suggestion.split(' ').length - 1) ? w : w + ' ';\n//diff-add\n        });\n//diff-add\n        return { completion: wordsList };\n//diff-add\n      }\n      })\n    }\n"})}),"\n",(0,o.jsx)(e.p,{children:"Now we have to set custom input on create and edit pages for field which user defined in fieldName:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",metastring:"title='./af-plugin-chatgpt/index.ts'",children:"\nexport default class ChatGptPlugin extends AdminForthPlugin {\n  options: PluginOptions;\n\n//diff-add\n  resourceConfig!: AdminForthResource;\n//diff-add\n  columnType!: AdminForthDataTypes;\n\n  ...\n\n  async modifyResourceConfig(adminforth: IAdminForth, resourceConfig: AdminForthResource) {\n    super.modifyResourceConfig(adminforth, resourceConfig);\n\n//diff-add\n    // ensure that column exists\n//diff-add\n    const column = resourceConfig.columns.find(f => f.name === this.options.fieldName);\n//diff-add\n    if (!column) {\n//diff-add\n      throw new Error(`Field ${this.options.fieldName} not found in resource ${resourceConfig.label}`);\n//diff-add\n    }\n//diff-add\n    if (!column.components) {\n//diff-add\n      column.components = {};\n//diff-add\n    }\n//diff-add\n    const filed = {\n//diff-add\n      file: this.componentPath('completionInput.vue'),\n//diff-add\n      meta: {\n//diff-add\n        pluginInstanceId: this.pluginInstanceId,\n//diff-add\n        fieldName: this.options.fieldName,\n//diff-add\n        debounceTime: 300,\n//diff-add\n      }\n//diff-add\n    }\n//diff-add\n    column.components.create = filed;\n//diff-add\n    column.components.edit = filed;\n//diff-add\n    this.columnType = column.type!;\n  }\n\n"})}),"\n",(0,o.jsx)(e.p,{children:"Additionally we should check that column type is string or text, otherwise our input will not work properly.\nFrom first sight we can make this validation in modifyResourceConfig method, but it is not good idea because we can't be sure that column type is\ndefined and known at this stage. If user defined it manually then it will be there, but if type is auto-discovered then it will be undefined at this stage."}),"\n",(0,o.jsxs)(e.p,{children:["That is why we will use ",(0,o.jsx)(e.code,{children:"validateConfigAfterDiscover"})," method:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",metastring:"title='./af-plugin-chatgpt/index.ts'",children:"  validateConfigAfterDiscover(adminforth: IAdminForth, resourceConfig: AdminForthResource) {\n//diff-add\n    const column = this.resourceConfig.columns.find(f => f.name === this.options.fieldName);\n//diff-add\n    if (![AdminForthDataTypes.STRING, AdminForthDataTypes.TEXT].includes(column!.type!)) {\n//diff-add\n      throw new Error(`Field ${this.options.fieldName} should be string or text type, but it is ${column!.type}`);\n//diff-add\n    }\n//diff-add\n    // any validation better to do here e.g. because bundleNow might no have enough environment\n//diff-add\n    if (!this.options.openAiApiKey) {\n//diff-add\n      throw new Error('OPENAI_API_KEY is required');\n//diff-add\n    }\n  }\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Finally, since we want to support multiple installations on one resource (e.g. one plugin installation for ",(0,o.jsx)(e.code,{children:"title"})," field and another for ",(0,o.jsx)(e.code,{children:"description"})," field), we have to define plugin instance unique representation. Best idea in this case to use field name which will be different for each installation:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",metastring:"title='./af-plugin-chatgpt/index.ts'",children:"  instanceUniqueRepresentation(pluginOptions: any) : string {\n//diff-add\n    return `${pluginOptions.fieldName}`;\n//diff-remove\n    return `single`;\n  }\n"})}),"\n",(0,o.jsx)(e.p,{children:"To compile plugin run:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"npm run build\n"})}),"\n",(0,o.jsxs)(e.p,{children:["You can also publish your plugin to npm using ",(0,o.jsx)(e.code,{children:"npm publish"}),"."]}),"\n",(0,o.jsx)(e.h2,{id:"installation-of-plugin",children:"Installation of plugin"}),"\n",(0,o.jsx)(e.p,{children:"If you want to test your plugin locally before publishing, enter plugin dir and run:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"cd af-plugin-chatgpt\nnpm link\n"})}),"\n",(0,o.jsx)(e.p,{children:"Then enter your AdminForth project and run:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"npm link af-plugin-chatgpt\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Now  in your app ",(0,o.jsx)(e.code,{children:"index.ts"})," file:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",metastring:"title='./index.ts'",children:"\nimport ChatGptPlugin from 'af-plugin-chatgpt';\n\n...\n\n{\n  resourceId: 'aparts',\n  ...\n  plugins: [\n    ...\n    new ChatGptPlugin({\n      openAiApiKey: process.env.OPENAI_API_KEY as string,\n      fieldName: 'title',\n    }),\n    new ChatGptPlugin({\n      openAiApiKey: process.env.OPENAI_API_KEY as string,\n      fieldName: 'description',\n    }),\n  ]\n}\n\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Go to ",(0,o.jsx)(e.a,{href:"https://platform.openai.com/",children:"https://platform.openai.com/"}),", go to Dashboard -> API keys -> Create new secret key. Paste value in your ",(0,o.jsx)(e.code,{children:".env"})," file OPENAI_API_KEY=your_key"]}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:["\u261d\ufe0f Using ",(0,o.jsx)(e.code,{children:"npm link"})," approach still requires ",(0,o.jsx)(e.code,{children:"npm run build"})," in plugin dir after each change because plugin entry point is defined as ",(0,o.jsx)(e.code,{children:"dist/index.js"})," in\n",(0,o.jsx)(e.code,{children:"package.json"})," file. To speed up plugin development you can also don't use ",(0,o.jsx)(e.code,{children:"npm link"})," and just import plugin main file from your demo file:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"import ChatGptPlugin from '<path to af plugin>/af-plugin-chatgpt/index.js';\n"})}),"\n"]}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:["\ud83c\udf93 Homework 1: Extend ",(0,o.jsx)(e.code,{children:"expert"})," settings section to include next parameters: ",(0,o.jsx)(e.code,{children:"temperature"}),", ",(0,o.jsx)(e.code,{children:"promptLimit"}),", ",(0,o.jsx)(e.code,{children:"debounceTime"}),","]}),"\n"]}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsx)(e.p,{children:"\ud83c\udf93 Homework 2: Plugin does not pass record other values to Chat GPT which can help to create better prompts with context understanding.\nTry to adjust prompt to include other record values. Keep in mind that longer prompts can be more expensive and slower, so should smartly limit prompt length."}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"configuring-plugin-activation-order",children:"Configuring plugin activation order"}),"\n",(0,o.jsx)(e.p,{children:"By default all plugins are activated in random order."}),"\n",(0,o.jsx)(e.p,{children:"Rarely, it might happen that your plugin somehow depends on other plugins (e.g. default AdminForth rich text editor plugin depends on AdminForth upload file to support images in text)."}),"\n",(0,o.jsxs)(e.p,{children:["To control plugin activation order you can set ",(0,o.jsx)(e.code,{children:"activationOrder"})," property in plugin class:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",metastring:"title='./af-plugin-chatgpt/index.ts'",children:"export default class ChatGptPlugin extends AdminForthPlugin {\n  options: PluginOptions;\n\n  activationOrder = 100;\n\n  ...\n}\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Default value of activationOrder for most plugins is ",(0,o.jsx)(e.code,{children:"0"}),". Plugins with higher activationOrder will be activated later."]}),"\n",(0,o.jsxs)(e.p,{children:["To ensure that plugin activates before some other plugins set ",(0,o.jsx)(e.code,{children:"activationOrder"})," to negative value."]}),"\n",(0,o.jsx)(e.h2,{id:"splitting-frontend-logic-into-multiple-files",children:"Splitting frontend logic into multiple files"}),"\n",(0,o.jsxs)(e.p,{children:["In case your plugin ",(0,o.jsx)(e.code,{children:".vue"})," files getting too big, you can split them into multiple files (components)\nUnfortunately when developing plugin, you should register such components(files) manually by calling ",(0,o.jsx)(e.code,{children:"componentPath"})," in ",(0,o.jsx)(e.code,{children:"modifyResourceConfig"})," method:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",metastring:"title='./af-plugin-chatgpt/index.ts'",children:"  async modifyResourceConfig(adminforth: IAdminForth, resourceConfig: AdminForthResource) {\n    super.modifyResourceConfig(adminforth, resourceConfig);\n//diff-add\n      // we just call componentPath method to register component, not using it's result\n//diff-add\n      this.componentPath('subComponent.vue'),\n    };\n  }\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Now to import ",(0,o.jsx)(e.code,{children:"subComponent.vue"})," in ",(0,o.jsx)(e.code,{children:"completionInput.vue"})," file you should use ",(0,o.jsx)(e.code,{children:"@@/plugins/<plugin-class-name>/subComponent.vue"})," path:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-html",metastring:"title='./af-plugin-chatgpt/custom/completionInput.vue'",children:"<template>\n  ...\n//diff-add\n  <SubComponent />\n  ...\n</template>\n\n<script setup lang=\"ts\">\n//diff-add\nimport SubComponent from '@@/plugins/ChatGptPlugin/subComponent.vue';\n<\/script>\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Pay attention that ",(0,o.jsx)(e.code,{children:"ChatGptPlugin"})," is a class name of your plugin so it should be used in path."]}),"\n",(0,o.jsx)(e.h2,{id:"using-adapters",children:"Using Adapters"}),"\n",(0,o.jsxs)(e.p,{children:["There are couple of adapter interfaces in AdminForth like ",(0,o.jsx)(e.code,{children:"EmailAdapter"})," for sending emails and ",(0,o.jsx)(e.code,{children:"CompletionAdapter"}),".\nAdapter is a way to provide same function from different vendors. For example plugin created in this guide uses exactly OpenAI API to get completion.\nBut in fact OpenAI is not only one API provider for completion, so ",(0,o.jsx)(e.code,{children:"CompletionAdapter"})," interface is created to be easily extended.\nHere is code from AdminForth:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",children:"export interface CompletionAdapter {\n\n  validate();\n\n  complete(\n    content: string,\n    stop: string[],\n    maxTokens: number,\n  ): Promise<{\n    content?: string;\n    finishReason?: string;\n    error?: string;\n  }>;\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"To use adapter in plugin you should define it in plugin options:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",metastring:"title='./af-plugin-any-complete/types.ts'",children:'\nimport { CompletionAdapter } from "adminforth";\n\nexport interface PluginOptions {\n  ...\n\n//diff-add\n  /**\n//diff-add\n   * Adapter for completion\n//diff-add\n   */\n//diff-add\n  adapter: CompletionAdapter;\n}\n'})}),"\n",(0,o.jsxs)(e.p,{children:["Then, in your plugin you should call ",(0,o.jsx)(e.code,{children:"this.options.validate()"}),", this function will throw error if adminforth app developer did not pass\nrequired parameter (e.g. API token for OpenAI). You can do it in ",(0,o.jsx)(e.code,{children:"modifyResourceConfig"})," but, then it will be called at build time (e.g. in Dockerfile). However build time not always has access to all environment variables including ",(0,o.jsx)(e.code,{children:"OPENAI_API_KEY"}),"."]}),"\n",(0,o.jsxs)(e.p,{children:["So we recommend calling validation in ",(0,o.jsx)(e.code,{children:"validateConfigAfterDiscover"})," method because it called only in runtime on app start and not in build time."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",metastring:"title='./af-plugin-any-complete/index.ts'",children:"  validateConfigAfterDiscover(adminforth: IAdminForth, resourceConfig: AdminForthResource) {\n//diff-add\n    this.options.adapter.validate();\n\n    ...\n  }\n"})}),"\n",(0,o.jsx)(e.p,{children:"If some issue with config will happen, validate method will throw error and instance will be crashed so AdminForth app developer will see error message in console and will have to fix it before starting app."}),"\n",(0,o.jsx)(e.p,{children:"Now you can simply use adapter:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",metastring:"title='./af-plugin-any-complete/index.ts'",children:"handler: async (a) => {\n  ...\n  const resp = await this.options.adapter.complete(content, ['.'], this.options.expert?.maxTokens || 50);\n  ...\n}\n"})})]})}function p(n={}){const{wrapper:e}={...(0,d.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(c,{...n})}):c(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>r});var t=i(96540);const o={},d=t.createContext(o);function s(n){const e=t.useContext(d);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),t.createElement(d.Provider,{value:e},n.children)}}}]);