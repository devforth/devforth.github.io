"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[6117],{5163:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>a});var i=t(4848),o=t(8453);const s={},l="Plugin development guide",r={id:"tutorial/Advanced/plugin-development",title:"Plugin development guide",description:"Creating a plugin is a powerful way to extend AdminForth functionality.",source:"@site/docs/tutorial/04-Advanced/01-plugin-development.md",sourceDirName:"tutorial/04-Advanced",slug:"/tutorial/Advanced/plugin-development",permalink:"/docs/tutorial/Advanced/plugin-development",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Custom bulk actions",permalink:"/docs/tutorial/Customization/bulkActions"},next:{title:"Deploy in Docker",permalink:"/docs/tutorial/deploy"}},d={},a=[{value:"Concepts",id:"concepts",level:2},{value:"Hello world plugin",id:"hello-world-plugin",level:2},{value:"Installation",id:"installation",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"plugin-development-guide",children:"Plugin development guide"}),"\n",(0,i.jsx)(e.p,{children:"Creating a plugin is a powerful way to extend AdminForth functionality."}),"\n",(0,i.jsx)(e.h2,{id:"concepts",children:"Concepts"}),"\n",(0,i.jsx)(e.p,{children:"Every plugin is installed to resource."}),"\n",(0,i.jsx)(e.p,{children:"Main concept is pretty simple: every plugin simply does modification of AdminForth config which developer passed on AdminForth initialization."}),"\n",(0,i.jsx)(e.p,{children:"Plugin can modify only config of resource where it is installed or whole global config."}),"\n",(0,i.jsxs)(e.p,{children:["To do modification plugin defines a method ",(0,i.jsx)(e.code,{children:"modifyResourceConfig"})," which accepts ",(0,i.jsx)(e.code,{children:"config"})," object. The ",(0,i.jsx)(e.code,{children:"modifyResourceConfig"})," method called after first\nconfig validation and preprocessing. After all plugins did modification, AdminForth calls validation and preprocessing again second time\nto make sure all plugins did not screw up the config."]}),"\n",(0,i.jsx)(e.p,{children:"Also plugins can define custom components and custom APIs."}),"\n",(0,i.jsx)(e.h2,{id:"hello-world-plugin",children:"Hello world plugin"}),"\n",(0,i.jsx)(e.p,{children:"Let's create plugin which auto-completes text in strings"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"mkdir -p af-plugin-chatgpt\ncd af-plugin-chatgpt\nnpm init -y\ntouch index.ts\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Edit ",(0,i.jsx)(e.code,{children:"package.json"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",metastring:"title='./af-plugin-chatgpt/package.json'",children:'{\n  ...\n//diff-remove\n  "main": "index.js",\n//diff-add\n  "main": "dist/index.js",\n//diff-add\n  "types": "dist/index.d.ts",\n//diff-add\n  "type": "module",\n  "scripts": {\n//diff-remove\n    "test": "echo \\"Error: no test specified\\" && exit 1",\n//diff-add\n    "build": "tsc && cp -rf custom dist/",\n  },\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"Install AdminForth for types and classes imports"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"npm i adminforth --save\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Now create plugin boilerplate in ",(0,i.jsx)(e.code,{children:"index.ts"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",metastring:"title='./af-plugin-chatgpt/index.ts'",children:"\nimport { AdminForthResourcePages, IAdminForth, IHttpServer, AdminForthPlugin, AdminForthResourceColumn  } from \"adminforth\";\nimport { PluginOptions } from './types.js';\n\n\nexport default class ChatGptPlugin extends AdminForthPlugin {\n  options: PluginOptions;\n\n  constructor(options: PluginOptions) {\n    super(options, import.meta.url);\n    this.options = options;\n  }\n\n  async modifyResourceConfig(adminforth: IAdminForth, resourceConfig: AdminForthResource) {\n    super.modifyResourceConfig(adminforth, resourceConfig);\n  \n    // simply modify resourceConfig or adminforth.config. You can get access to plugin options via this.options;\n  }\n \n\n  setupEndpoints(server: IHttpServer) {\n    server.endpoint({\n      method: 'POST',\n      path: `/plugin/${this.pluginInstanceId}/example`,\n      handler: async ({ body }) => {\n        const { name } = body;\n        \n        return {\n          `Hello ${name}`,\n        };\n      }\n    });\n  }\n\n}\n\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Create ",(0,i.jsx)(e.code,{children:"types.ts"})," file:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",metastring:"title='./af-plugin-chatgpt/types.ts'",children:"\nexport interface PluginOptions {\n  /**\n   * Field where plugin will auto-complete text. Should be string or text field.\n   */\n  fieldName: string;\n\n  /**\n   * OpenAI API key. Go to https://platform.openai.com/, go to Dashboard -> API keys -> Create new secret key\n   * Paste value in your .env file\n   * Set OPENAI_API_KEY: process.env.OPENAI_API_KEY to access it\n   */\n  OPENAI_API_KEY: string;\n\n  /**\n   * Model name. Go to https://platform.openai.com/docs/models, select model and copy name.\n   * Default is `gpt-3.5-turbo`\n   */\n  model: string = 'gpt-3.5-turbo';\n\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(e.p,{children:["in your app ",(0,i.jsx)(e.code,{children:"index.ts"})," file:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",metastring:"title='./index.ts'",children:"\nimport ChatGptPlugin from '../af-plugin-chatgpt/index.js';\n\n...\n\n{\n  resourceId: 'aparts',\n  ...\n  plugins: [\n    ...\n    new ChatGptPlugin({\n      openAiApiKey: process.env.OPENAI_API_KEY as string,\n      fieldName: 'title',\n    }),\n  ]\n}\n\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Go to ",(0,i.jsx)(e.a,{href:"https://platform.openai.com/",children:"https://platform.openai.com/"}),", go to Dashboard -> API keys -> Create new secret key. Paste value in your .env file OPENAI_API_KEY=your_key"]})]})}function p(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>l,x:()=>r});var i=t(6540);const o={},s=i.createContext(o);function l(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:l(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);