"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[8643],{2166:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var i=t(4848),s=t(8453);const r={},o="Two-Factor Authentication Plugin",a={id:"tutorial/Plugins/TwoFactorsAuth",title:"Two-Factor Authentication Plugin",description:"The Two-Factor Authentication Plugin provides an additional layer of security to the application by requiring users to provide a second form of authentication in addition to their password. This plugin supports  authenticator apps.",source:"@site/docs/tutorial/05-Plugins/02-TwoFactorsAuth.md",sourceDirName:"tutorial/05-Plugins",slug:"/tutorial/Plugins/TwoFactorsAuth",permalink:"/docs/tutorial/Plugins/TwoFactorsAuth",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"AuditLog",permalink:"/docs/tutorial/Plugins/AuditLog"},next:{title:"ForeignInlineList",permalink:"/docs/tutorial/Plugins/ForeignInlineList"}},d={},l=[{value:"Installation",id:"installation",level:2},{value:"Disabling Two-Factor Authentication locally",id:"disabling-two-factor-authentication-locally",level:2},{value:"Select which users should use Two-Factor Authentication",id:"select-which-users-should-use-two-factor-authentication",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"two-factor-authentication-plugin",children:"Two-Factor Authentication Plugin"}),"\n",(0,i.jsx)(e.p,{children:"The Two-Factor Authentication Plugin provides an additional layer of security to the application by requiring users to provide a second form of authentication in addition to their password. This plugin supports  authenticator apps."}),"\n",(0,i.jsx)(e.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"npm i @adminforth/two-factors-auth --save\n"})}),"\n",(0,i.jsx)(e.p,{children:"Plugin is already installed into adminforth, to import:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"import TwoFactorsAuthPlugin from '@adminforth/two-factors-auth';\n"})}),"\n",(0,i.jsx)(e.p,{children:"Plugin required some additional setup, to make it work properly. It should be added to the resource auth resource. In our example we will add it to the user resource ."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",metastring:"title='./index.ts'",children:"\nexport const admin = new AdminForth({\n  //... other resource configurations\n  auth: {\n      resourceId: 'users'\n      //... other resource configurations\n  },\n  ...\n}\n\nasync function initDataBase() {\n  ...\n//diff-add\n  // check column secret2fa in apartments table\n//diff-add\n  const columns = await db.prepare('PRAGMA table_info(users);').all();\n//diff-add\n  const columnExists = columns.some((c) => c.name === 'secret2fa');\n//diff-add\n  if (!columnExists) {\n//diff-add\n    await db.prepare('ALTER TABLE users ADD COLUMN secret2fa VARCHAR(255);').run();\n//diff-add\n  }\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["And add it to ",(0,i.jsx)(e.code,{children:"users.ts"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",metastring:'tittle="./resources/users.ts"',children:"{\n    table: 'users',\n//diff-add\n    plugins: [\n//diff-add\n        new TwoFactorsAuthPlugin ({ twoFaSecretFieldName: 'secret2fa' }),\n//diff-add\n    ],\n    columns: [\n        ...\n//diff-add\n        {\n//diff-add\n            name: 'secret2fa',\n//diff-add\n            showIn: [],\n//diff-add\n            backendOnly: true,\n//diff-add\n        }\n    ],\n  }\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Thats it! Two-Factor Authentication is now enabled:\n",(0,i.jsx)(e.img,{alt:"alt text",src:t(9454).A+"",width:"3700",height:"1932"})]}),"\n",(0,i.jsx)(e.h2,{id:"disabling-two-factor-authentication-locally",children:"Disabling Two-Factor Authentication locally"}),"\n",(0,i.jsxs)(e.p,{children:["If it is not convenient to enter the code every time you log in during local development, you can disable Two-Factor Authentication\nfor the dev environment using ",(0,i.jsx)(e.code,{children:"usersFilterToApply"})," option."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",metastring:"title='./index.ts'",children:"\n    plugins: [\n        new TwoFactorsAuthPlugin ({ \n          twoFaSecretFieldName: 'secret2fa',\n//diff-add\n          usersFilterToApply: (adminUser: AdminUser) => {\n//diff-add\n            // if this method returns true, 2FA will be enforced for this user, if returns false - 2FA will be disabled\n//diff-add\n            if (process.env.NODE_ENV === 'development') {\n//diff-add\n              return false;\n//diff-add\n            }\n//diff-add\n            return true;\n//diff-add\n          },\n        }),\n    ],\n"})}),"\n",(0,i.jsx)(e.h2,{id:"select-which-users-should-use-two-factor-authentication",children:"Select which users should use Two-Factor Authentication"}),"\n",(0,i.jsx)(e.p,{children:"By default plugin enforces Two-Factor Authentication for all users."}),"\n",(0,i.jsxs)(e.p,{children:["If you wish to enforce 2FA only for specific users, you can again use ",(0,i.jsx)(e.code,{children:"usersFilterToApply"})," option:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",metastring:"title='./index.ts'",children:"  usersFilterToApply: (adminUser: AdminUser) => {\n    // disable 2FA for users which email is 'adminforth' or 'adminguest'\n    return !(['adminforth', 'adminguest'].includes(adminUser.dbUser.email));\n  },\n"})}),"\n",(0,i.jsx)(e.p,{children:"You can even add a boolean column to the user table to store whether the user should use 2FA or not:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",metastring:"title='./index.ts'",children:"{\n    resourceId: 'users',\n    ...\n    columns: [\n        ...\n        {\n            name: 'use2fa',\n        }\n        ...\n    ],\n    options: {\n      allowedActions: {\n        delete: ({ adminUser }: { adminUser: AdminUser }) => {\n          // only superadmin can delete users\n          return adminUser.dbUser.role === 'superadmin';\n        },\n        create: ({ adminUser }: { adminUser: AdminUser }) => {\n          // only superadmin can create users\n          return adminUser.dbUser.role === 'superadmin';\n        },\n        edit: ({ adminUser, meta }: { adminUser: AdminUser }) => {\n          // user can modify only his own record\n          const { oldRecord } = meta;\n          return adminUser.dbUser.id === oldRecord.id;\n        },\n      }\n    },\n    plugins: [\n        new TwoFactorsAuthPlugin ({ \n          twoFaSecretFieldName: 'secret2fa',\n          usersFilterToApply: (adminUser: AdminUser) => {\n            return adminUser.dbUser.use2fa;\n          },\n        }),\n    ],\n}\n"})})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},9454:(n,e,t)=>{t.d(e,{A:()=>i});const i=t.p+"assets/images/image-1-1aa4ed0aa37a198c7c9e14c981db42dd.png"},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>a});var i=t(6540);const s={},r=i.createContext(s);function o(n){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:o(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);