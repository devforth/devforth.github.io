"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[1122],{7937:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var t=s(4848),o=s(8453);const i={},r="Limiting actions access",a={id:"tutorial/Customization/limitingAccess",title:"Limiting actions access",description:"Statically disable some action",source:"@site/docs/tutorial/03-Customization/05-limitingAccess.md",sourceDirName:"tutorial/03-Customization",slug:"/tutorial/Customization/limitingAccess",permalink:"/docs/tutorial/Customization/limitingAccess",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Hooks",permalink:"/docs/tutorial/Customization/hooks"},next:{title:"Custom pages",permalink:"/docs/tutorial/Customization/customPages"}},d={},c=[{value:"Statically disable some action",id:"statically-disable-some-action",level:2},{value:"Disable some action based on logged in user record or role",id:"disable-some-action-based-on-logged-in-user-record-or-role",level:2},{value:"Reuse the same callback for multiple actions",id:"reuse-the-same-callback-for-multiple-actions",level:2},{value:"Customizing the access control based on resource values",id:"customizing-the-access-control-based-on-resource-values",level:2},{value:"Disable editing of the resource based on owner",id:"disable-editing-of-the-resource-based-on-owner",level:3},{value:"Disable deletion of the resource based on owner",id:"disable-deletion-of-the-resource-based-on-owner",level:3}];function l(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"limiting-actions-access",children:"Limiting actions access"}),"\n",(0,t.jsx)(n.h2,{id:"statically-disable-some-action",children:"Statically disable some action"}),"\n",(0,t.jsxs)(n.p,{children:["You can use ",(0,t.jsx)(n.code,{children:"options.allowedActions"})," on resource to limit access to the resource actions (list, show, create, edit, delete)."]}),"\n",(0,t.jsx)(n.p,{children:"If you want to disable deletion of the resource records for all users:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="./resources/users.ts"',children:"{\n  ...\n  resourceId: 'users',\n  ...\n//diff-add\n  options: {\n//diff-add\n    allowedActions: {\n//diff-add\n      delete: false\n//diff-add\n    }\n//diff-add\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"disable-some-action-based-on-logged-in-user-record-or-role",children:"Disable some action based on logged in user record or role"}),"\n",(0,t.jsxs)(n.p,{children:["If you want to disable deletion of apartments for all users apart from users with role ",(0,t.jsx)(n.code,{children:"superadmin"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"title='./resources/apartments.ts'",children:"//diff-add\nimport type { AdminUser } from  'adminforth';\n\n{\n  ...\n  resourceId: 'aparts',\n  ...\n  options: {\n//diff-add\n    allowedActions: {\n//diff-add\n      delete: async ({ adminUser }: { adminUser: AdminUser }): Promise<boolean> => {\n//diff-add\n        return adminUser.dbUser.role === 'superadmin';\n//diff-add\n      }\n//diff-add\n    }\n    ...\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"\u261d\ufe0f instead of reading role from user you can check permission using complex ACL/RBAC models with permissions stored in the database.\nHowever we recommend you to keep in mind that allowedActions callback is called on every request related to resource, so it should be fast.\nSo try to minimize requests to database as much as possible."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"reuse-the-same-callback-for-multiple-actions",children:"Reuse the same callback for multiple actions"}),"\n",(0,t.jsxs)(n.p,{children:["Let's disable creating and editing of new users for all users apart from users with role ",(0,t.jsx)(n.code,{children:"superadmin"}),", and at the same time disable deletion for all users:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="./resources/users.ts"',children:"//diff-add\nimport type { AdminUser } from  'adminforth';\n\n//diff-add\nasync function canModifyUsers({ adminUser }: { adminUser: AdminUser }): Promise<boolean> {\n//diff-add\n  return adminUser.dbUser.role === 'superadmin';\n//diff-add\n}\n\n{\n  ...\n  resourceId: 'users',\n  ...\n  options: {\n    allowedActions: {\n//diff-add\n      create: canModifyUsers,\n//diff-add\n      edit: canModifyUsers,\n      delete: false\n    }\n    ...\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"customizing-the-access-control-based-on-resource-values",children:"Customizing the access control based on resource values"}),"\n",(0,t.jsx)(n.p,{children:"In more advanced cases you might need to check access based on record value.\nGenerally it happens in multi-tenant applications where you need to check if user has access to the record based on some field value."}),"\n",(0,t.jsx)(n.h3,{id:"disable-editing-of-the-resource-based-on-owner",children:"Disable editing of the resource based on owner"}),"\n",(0,t.jsx)(n.p,{children:'For example, allow to edit apartments only if user is a realtor of the apartment (defined as realtor_id), otherwise return error\n"You are not assigned to this apartment and can\'t edit it":'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="./index.ts"',children:"import type { AdminUser } from  'adminforth';\nimport { ActionCheckSource } from  'adminforth';\n\n\nasync function canModifyAppart({ adminUser, source, meta }: { adminUser: AdminUser, meta: any, source: ActionCheckSource }): Promise<boolean | string> {\n  if (source === ActionCheckSource.DisplayButtons) {\n    // if check is done for displaying button - we show button to everyone\n    return true; \n  }\n  const { oldRecord, newRecord } = meta;\n  if (oldRecord.realtor_id !== adminUser.dbUser.id) {\n    return \"You are not assigned to this apartment and can't edit it\";\n  }\n  if (newRecord.realtor_id !== oldRecord.realtor_id) {\n    return \"You can't change the owner of the apartment\";\n  }\n  return true;\n}\n\n\n{\n  ...\n  resourceId: 'aparts',\n  ...\n  options: {\n    allowedActions: {\n      edit: canModifyAppart,\n    }\n    ...\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"disable-deletion-of-the-resource-based-on-owner",children:"Disable deletion of the resource based on owner"}),"\n",(0,t.jsx)(n.p,{children:"If we need to allow only owner to delete the apartment:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="./index.ts"',children:"import type { AdminUser } from  'adminforth';\n\nasync function canDeleteAppart({ adminUser, meta }: { adminUser: AdminUser, meta: any }): Promise<boolean | string> {\n  const { record } = meta;\n  if (record.realtor_id !== adminUser.dbUser.id) {\n    return \"You are not assigned to this apartment and can't delete it\";\n  }\n  return true;\n}\n\n{\n  ...\n  resourceId: 'aparts',\n  ...\n  options: {\n    allowedActions: {\n      delete: canDeleteAppart,\n    }\n    ...\n  }\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var t=s(6540);const o={},i=t.createContext(o);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);