"use strict";(globalThis.webpackChunkadminforth=globalThis.webpackChunkadminforth||[]).push([[3170],{16124:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"tutorial/Plugins/email-invite","title":"Email Invite","description":"Email Invite plugin allows administrators to create users without setting passwords. Instead, the plugin sends an email invitation to the newly created user, asking them to set their own password. This is more secure and user-friendly than having administrators set passwords for users.","source":"@site/docs/tutorial/07-Plugins/16-email-invite.md","sourceDirName":"tutorial/07-Plugins","slug":"/tutorial/Plugins/email-invite","permalink":"/docs/tutorial/Plugins/email-invite","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":16,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ForeignInlineShow","permalink":"/docs/tutorial/Plugins/ForeignInlineShow"},"next":{"title":"Bulk AI Flow","permalink":"/docs/tutorial/Plugins/bulk-ai-flow"}}');var i=a(36870),r=a(55569);const t={},o="Email Invite",d={},l=[{value:"Installation",id:"installation",level:2},{value:"SES",id:"ses",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Email Confirmation boolean flag",id:"email-confirmation-boolean-flag",level:2},{value:"Mailgun usage example",id:"mailgun-usage-example",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"email-invite",children:"Email Invite"})}),"\n",(0,i.jsx)(n.p,{children:"Email Invite plugin allows administrators to create users without setting passwords. Instead, the plugin sends an email invitation to the newly created user, asking them to set their own password. This is more secure and user-friendly than having administrators set passwords for users."}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.p,{children:"To install the plugin:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install @adminforth/email-invite --save\n"})}),"\n",(0,i.jsx)(n.p,{children:"You'll also need an email adapter. For AWS SES:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install @adminforth/email-adapter-aws-ses --save\n"})}),"\n",(0,i.jsx)(n.h2,{id:"ses",children:"SES"}),"\n",(0,i.jsx)(n.p,{children:"To Setup SES, you need to have an AWS account and SES service enabled. You can follow the steps below to setup SES."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Go to the AWS Management Console and open the Amazon SES console at ",(0,i.jsx)(n.a,{href:"https://console.aws.amazon.com/ses/",children:"https://console.aws.amazon.com/ses/"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Make sure you are in the correct region. You can change the region from the top right corner. For example, if you are in the ",(0,i.jsx)(n.code,{children:"us-east-1"})," region, you can see the region name US East (N. Virginia) in the top right corner."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Add your email address (any email), and verify it."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Add some domain you own and verify it by creating DNS records which AWS suggests. This will be used as the domain for sending emails. e.g. if you want to send from ",(0,i.jsx)(n.a,{href:"mailto:no-reply@devforth.io",children:"no-reply@devforth.io"})," you need to verify ",(0,i.jsx)(n.code,{children:"devforth.io"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/adminuser.ts"',children:"import EmailInvitePlugin from '@adminforth/email-invite';\nimport EmailAdapterAwsSes from '@adminforth/email-adapter-aws-ses';\n\nexport default {\n  dataSource: 'maindb',\n  table: 'adminuser',\n  resourceId: 'adminuser',\n  columns: [\n    { name: 'id', primaryKey: true },\n    { name: 'email', required: true },\n    { name: 'password_hash', showIn: [] }, // Hide from UI\n\n    { name: 'role' },\n\n    {\n          name: 'password',\n          virtual: true,\n          required: { create: true },\n          editingNote: { edit: 'Leave empty to keep password unchanged' },\n          minLength: 8,\n          type: AdminForthDataTypes.STRING,\n          showIn: {\n// hide password column - but don't remove whole column it because it has constrains for password field!\n// diff-remove\n            show: false,\n// diff-remove\n            list: false,\n// diff-remove\n            filter: false,\n// diff-add\n            all: false,\n          },\n          masked: true,\n        },\n\n    // ... other columns\n  ],\n  hooks: {\n    create: {\n      beforeSave: async ({ record, adminUser, resource }: { record: any, adminUser: AdminUser, resource: AdminForthResource }) => {\n// since we don't show password input in resource - no sense to hande it in hook anymore!       \n//diff-remove   \n          record.password_hash = await AdminForth.Utils.generatePasswordHash(record.password);\n          return { ok: true };\n        }\n    },\n    edit: {\n      beforeSave: async ({ oldRecord, updates, adminUser, resource }: { oldRecord: any, updates: any, adminUser: AdminUser, resource: AdminForthResource }) => {\n        console.log('Updating user', updates);\n        if (oldRecord.id === adminUser.dbUser.id && updates.role) {\n          return { ok: false, error: 'You cannot change your own role' };\n        }\n// also no sense to have updatres - we dont allow edit password by admin anymore\n//diff-remove  \n        if (updates.password) {\n//diff-remove  \n          updates.password_hash = await AdminForth.Utils.generatePasswordHash(updates.password);\n//diff-remove  \n        }\n        return { ok: true }\n      },\n    },\n  },\n  plugins: [\n    //diff-add\n    new EmailInvitePlugin({\n     //diff-add\n      emailField: 'email',\n     //diff-add\n      passwordField: 'password',\n     //diff-add\n      sendFrom: 'noreply@yourapp.com',\n     //diff-add\n      adapter: new EmailAdapterAwsSes({\n     //diff-add\n        region: 'us-east-1',\n     //diff-add\n        accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n     //diff-add\n        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n     //diff-add\n      }),\n     //diff-add\n    }),\n  ],\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"Please note that previously (in defauklt CLI setup) we needed it to allow admins to set passwords when created new users (to invite them). Also Admens were able to edit passwords of users.\nNow since we added this plugin, user will have email link on which he will get form to enter password by hiumself.\nPlease note that the form for user will still use constraints from password virtual field, that is why we just hid it using showIn - not remove it."}),"\n",(0,i.jsxs)(n.p,{children:["To allow users to edit their passwords please use ",(0,i.jsx)(n.a,{href:"https://adminforth.dev/docs/tutorial/Plugins/email-password-reset/",children:"email password reset plugin"})]}),"\n",(0,i.jsx)(n.h2,{id:"email-confirmation-boolean-flag",children:"Email Confirmation boolean flag"}),"\n",(0,i.jsx)(n.p,{children:"This plugin can write into the database the fact that invited user was able to set password and as a result confirmed that he owns his email.\nTo enable email this behaviour, first add a boolean field to your user table:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-prisma",metastring:'title="./schema.prisma"',children:'model adminuser {\n  id             String   @id @default(cuid())\n  email          String   @unique\n  password_hash  String\n  role           String   @default("user")\n  //diff-add\n  email_confirmed Boolean? @default(false)\n  // ... other fields\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Run the migration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx prisma migrate dev --name add-email-confirmed\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then update your resource configuration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/adminuser.ts"',children:"export default {\n  // ... existing config\n  columns: [\n    { name: 'id', primaryKey: true },\n    { name: 'email', required: true },\n    { name: 'password_hash', showIn: [] },\n    { name: 'role' },\n    //diff-add\n    { name: 'email_confirmed', type: AdminForthDataTypes.BOOLEAN },\n    // ... other columns\n  ],\n  plugins: [\n    new EmailInvitePlugin({\n      emailField: 'email',\n      sendFrom: 'noreply@yourapp.com',\n      passwordField: 'password',\n      adapter: new EmailAdapterAwsSes(/* ... */),\n      //diff-add\n      emailConfirmedField: 'email_confirmed', // Enable email confirmation\n    }),\n  ],\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"mailgun-usage-example",children:"Mailgun usage example"}),"\n",(0,i.jsx)(n.p,{children:"If you want to use this plugin with Mailgun, first install it:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install @adminforth/email-adapter-mailgun\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then, in the adapter options, add:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"//diff-add\nimport EmailAdapterMailgun from \"@adminforth/email-adapter-mailgun\";\n \n...\n\n  plugins: [\n    new EmailInvitePlugin({\n      emailField: 'email',\n      passwordField: 'password',\n      sendFrom: 'noreply@yourapp.com',\n      //diff-add\n      adapter: new EmailAdapterMailgun({\n      //diff-add\n        apiKey: process.env.MAILGUN_API_KEY as string,\n      //diff-add\n        domain: process.env.MAILGUN_DOMAIN as string,\n      //diff-add\n        baseUrl: process.env.MAILGUN_REGION_URL as string,\n      //diff-add\n      }),\n    }),\n  ],\n\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},55569:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>o});var s=a(86326);const i={},r=s.createContext(i);function t(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);