"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[4753],{279:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"tutorial/Customization/standardPagesTuning","title":"Standard pages tuning","description":"Fields Grouping","source":"@site/docs/tutorial/03-Customization/13-standardPagesTuning.md","sourceDirName":"tutorial/03-Customization","slug":"/tutorial/Customization/standardPagesTuning","permalink":"/docs/tutorial/Customization/standardPagesTuning","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":13,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Security","permalink":"/docs/tutorial/Customization/security"},"next":{"title":"AdminForth Components Library","permalink":"/docs/tutorial/Customization/afcl"}}');var a=t(4848),s=t(8453);const r={},d="Standard pages tuning",o={},l=[{value:"Fields Grouping",id:"fields-grouping",level:2},{value:"List",id:"list",level:2},{value:"Default Sorting",id:"default-sorting",level:3},{value:"Page size",id:"page-size",level:3},{value:"Custom row click action",id:"custom-row-click-action",level:3},{value:"Auto-refresh records",id:"auto-refresh-records",level:3},{value:"Creating",id:"creating",level:2},{value:"Fill with default values",id:"fill-with-default-values",level:3},{value:"Suggest default value in create form",id:"suggest-default-value-in-create-form",level:3},{value:"Link to create form with preset values",id:"link-to-create-form-with-preset-values",level:3},{value:"Editing",id:"editing",level:2},{value:"minValue and maxValue",id:"minvalue-and-maxvalue",level:3},{value:"Validation",id:"validation",level:3},{value:"Input prefix and suffix",id:"input-prefix-and-suffix",level:3},{value:"Editing note",id:"editing-note",level:3},{value:"Filling an array of values",id:"filling-an-array-of-values",level:3},{value:"Foreign resources",id:"foreign-resources",level:3},{value:"Unset label",id:"unset-label",level:3},{value:"Filtering",id:"filtering",level:2},{value:"Filter Options",id:"filter-options",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"standard-pages-tuning",children:"Standard pages tuning"})}),"\n",(0,a.jsx)(n.h2,{id:"fields-grouping",children:"Fields Grouping"}),"\n",(0,a.jsx)(n.p,{children:'In some cases, you may want to organize data fields into specific groups for better structure and clarity. For example, you could create a "Main Info" group to include columns like title, description, country, and apartment_image. Another group, "Characteristics," could hold attributes such as price, square_meter, number_of_rooms, and listed. Any values without a specified group will be categorized under "Other.'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/apartments.ts"',children:"export default {\n      ...\n      options: {\n        ...\n          //diff-add\n        fieldGroups: [\n          //diff-add\n          {\n          //diff-add\n            groupName: 'Main info',\n          //diff-add\n            columns: ['id','title', 'description', 'country', 'apartment_image']\n          //diff-add\n          },\n          //diff-add\n          {\n          //diff-add\n            groupName: 'Characteristics',\n          //diff-add\n            columns: ['price', 'square_meter', 'number_of_rooms', \"listed\"]\n          //diff-add\n          }\n          //diff-add\n        ],\n      }\n    }\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Here is how it looks:\n",(0,a.jsx)(n.img,{alt:"alt text",src:t(5276).A+"",width:"2281",height:"1129"})]}),"\n",(0,a.jsx)(n.p,{children:"You can also specify on which page you want to create or delete groups. If you assign null, the groups will disappear from this page."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/apartments.ts"',children:"export default {\n      ...\n      options: {\n        //diff-add\n        createFieldGroups: [\n          //diff-add\n          {\n          //diff-add\n            groupName: 'Main info',\n          //diff-add\n            columns: ['id','title']\n          //diff-add\n          },\n          //diff-add\n          {\n          //diff-add\n            groupName: 'Characteristics',\n          //diff-add\n            columns: ['description', 'country', 'price', 'square_meter', 'number_of_rooms', \"listed\"]\n          //diff-add\n          }\n          //diff-add\n        ],\n          //diff-add\n        editFieldGroups: null,\n          //diff-add\n        showFieldGroups: null,\n      }\n    }\n"})}),"\n",(0,a.jsx)(n.h2,{id:"list",children:"List"}),"\n",(0,a.jsx)(n.h3,{id:"default-sorting",children:"Default Sorting"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/apartments.ts"',children:"import { AdminForthSortDirections } from 'adminforth';\n\n...\nexport default {\n  resourceId: 'aparts',\n  options: {\n//diff-add\n    defaultSort: {\n//diff-add\n      columnName: 'created_at',\n//diff-add\n      direction: AdminForthSortDirections.asc, \n//diff-add\n    }\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"page-size",children:"Page size"}),"\n",(0,a.jsxs)(n.p,{children:["use ",(0,a.jsx)(n.code,{children:"options.listPageSize"})," to define how many records will be shown on the page"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/apartments.ts"',children:"export default {\n      resourceId: 'aparts',\n      options: {\n        ...\n//diff-add\n        listPageSize: 10,\n      }\n    }\n  ]\n"})}),"\n",(0,a.jsx)(n.h3,{id:"custom-row-click-action",children:"Custom row click action"}),"\n",(0,a.jsx)(n.p,{children:"By default, when you click on a record in the list view, the show view will be opened."}),"\n",(0,a.jsxs)(n.p,{children:["You can change this behavior by using ",(0,a.jsx)(n.code,{children:"options.listTableClickUrl"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"To disable any action (don't open show) return null:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/apartments.ts"',children:"export default {\n      resourceId: 'aparts',\n      options: {\n        ...\n//diff-add\n        listTableClickUrl: async (record, adminUser) => null,\n      }\n    }\n  ]\n"})}),"\n",(0,a.jsx)(n.p,{children:"To open a custom page, return URL to the custom page (can start with https://, or relative adminforth path):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/apartments.ts"',children:"      options: {\n        ...\n//diff-add\n        listTableClickUrl: async (record, adminUser) => {\n          return `https://google.com/search?q=${record.name}`;\n        }\n      }\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If you wish to open the page in a new tab, add ",(0,a.jsx)(n.code,{children:"target=_blank"})," get param to the returned URL:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/apartments.ts"',children:"      options: {\n        ...\n//diff-add\n        listTableClickUrl: async (record, adminUser) => {\n          return `https://google.com/search?q=${record.name}&target=_blank`;\n        }\n      }\n"})}),"\n",(0,a.jsx)(n.h3,{id:"auto-refresh-records",children:"Auto-refresh records"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"options.listRowsAutoRefreshSeconds"})," might be used to silently refresh records that are loaded (no new records will be fetched if\nthey appear)"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/apartments.ts"',children:"export default {\n        resourceId: 'aparts',\n        hooks: {\n//diff-add\n          list: {\n//diff-add\n            afterDatasourceResponse: async ({ response }: { response: any }) => { \n//diff-add\n              response.forEach((r: any) => {\n//diff-add\n                // substitute random country on any load\n//diff-add\n                const countries = [ 'US', 'DE', 'FR', 'GB', 'NL', 'IT', 'ES', 'DK', 'PL', 'UA', \n//diff-add\n                  'CA', 'AU', 'BR', 'JP', 'CN', 'IN', 'KR', 'TR', 'MX', 'ID']\n//diff-add\n                r.country = countries[Math.floor(Math.random() * countries.length)];\n//diff-add\n              })\n//diff-add\n              return { ok: true, error: \"\" }\n//diff-add\n            }\n//diff-add\n          }\n        },\n        options: {\n          ...\n//diff-add\n          listRowsAutoRefreshSeconds: 1,\n        }\n      }\n  ]\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"alt text",src:t(8481).A+"",width:"1999",height:"1499"})}),"\n",(0,a.jsx)(n.h2,{id:"creating",children:"Creating"}),"\n",(0,a.jsx)(n.h3,{id:"fill-with-default-values",children:"Fill with default values"}),"\n",(0,a.jsx)(n.p,{children:"Sometimes you want to generate some field value without asking user to fill it. For example createdAt oftenly store time of creation of the record. You can do this by using fillOnCreate:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/apartments.ts" ',children:"\nexport default {\n      name: 'apartments',\n      fields: [\n        ...\n        {\n          name: 'created_at',\n          type: AdminForthDataTypes.DATETIME,\n//diff-add\n          showIn: {\n//diff-add\n            all: true,\n//diff-add\n            create: false,  // don't show field in create form\n//diff-add\n          }\n//diff-add\n          fillOnCreate: ({ initialRecord, adminUser }) => (new Date()).toISOString(),\n        },\n      ],\n    },\n    ...\n  ],\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Also you can assign adminUser ID by ",(0,a.jsx)(n.code,{children:"adminUser.dbUser.id"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/apartments.ts"',children:"export default {\n      name: 'apartments',\n      fields: [\n        ...\n        {\n          name: 'created_by',\n          type: AdminForthDataTypes.STRING,\n//diff-add\n          showIn: {\n//diff-add\n            all: true,\n//diff-add\n            create: false,  // don't show field in create form\n//diff-add\n          }\n//diff-add\n          fillOnCreate: ({ initialRecord, adminUser }) => adminUser.dbUser.id,\n        },\n      ],\n    },\n    ...\n  ],\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["Same effect can be achieved by using ",(0,a.jsx)(n.a,{href:"/docs/tutorial/Customization/hooks/#example-modify-the-created-object-before-it-is-saved-to-the-database",children:"hooks"}),". But ",(0,a.jsx)(n.code,{children:"fillOnCreate"})," might be shorter and more readable."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"suggest-default-value-in-create-form",children:"Suggest default value in create form"}),"\n",(0,a.jsx)(n.p,{children:"You can suggest a default value for a field in the create form which user can instantly change even before creating record.\nThis might be used to give user some example value or to suggest some default value."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/apartments.ts"',children:"export default {\n      name: 'apartments',\n      fields: [\n        ...\n        {\n          name: 'description',\n//diff-add\n          suggestOnCreate: 'Great apartment in the heart of the city',\n        },\n      ],\n    },\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["A difference between ",(0,a.jsx)(n.code,{children:"fillOnCreate"})," and ",(0,a.jsx)(n.code,{children:"suggestOnCreate"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"fillOnCreate"})," is called on the backend when the record is saved to a database. Value returned by ",(0,a.jsx)(n.code,{children:"fillOnCreate"})," will be saved to the database."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"suggestOnCreate"})," is just a single value that will be substituted in create form. User can change it before saving the record."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"fillOnCreate"})," should be used when ",(0,a.jsx)(n.code,{children:"showIn.create"})," is a ",(0,a.jsx)(n.code,{children:"false"})," value because if it is ",(0,a.jsx)(n.code,{children:"true"}),", the input will be shown in the create form but then(during actual save to db) it will be overwritten by the value returned by ",(0,a.jsx)(n.code,{children:"fillOnCreate"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"suggestOnCreate"})," should be used with ",(0,a.jsx)(n.code,{children:"showIn.create"})," set to true because if it is not set, the input will not be shown in the create form and default suggestion will not make sense."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"link-to-create-form-with-preset-values",children:"Link to create form with preset values"}),"\n",(0,a.jsx)(n.p,{children:"Sometimes you might need to create a link that will open the create form with some fields pre-filled. For example, you might want to create a link that will open the create form with the realtor_id field pre-filled with the current user's ID."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",metastring:'title="./resources/Dashboard.vue',children:"<template>\n  ...\n  <LinkButton\n    :to=\"{\n      name: 'resource-create',\n      params: {\n        resourceId: 'aparts',\n      },\n      query: {\n        values: encodeURIComponent(JSON.stringify({\n          realtor_id: coreStore?.adminUser.dbUser.id \n        })),\n      },\n    }\"\n  >\n    {{$t('Create new apartment')}}\n  </LinkButton>\n  ...\n</template>\n\n<script setup lang=\"ts\">\nimport { LinkButton } from '@afcl';\nimport { useCoreStore } from '@/stores/core';\n\nconst coreStore = useCoreStore();\n<\/script>\n"})}),"\n",(0,a.jsx)(n.h2,{id:"editing",children:"Editing"}),"\n",(0,a.jsxs)(n.p,{children:["You can set a column ",(0,a.jsx)(n.code,{children:"editReadonly"})," so it will be shown in the edit form but will be disabled.",(0,a.jsx)(n.br,{}),"\n","This might be useful to better identify the record during editing or to show some additional information that should not be changed but can help to edit the record."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/apartments.ts"',children:"export default {\n      name: 'apartments',\n      fields: [\n        ...\n        {\n          name: 'created_at',\n          type: AdminForthDataTypes.DATETIME,\n//diff-add\n          editReadonly: true,\n        },\n      ],\n    },\n    ...\n  ],\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"editReadonly"})," is check enforced both on fronted and backend. So it is safe to use it to make sure that data will be never changes."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"minvalue-and-maxvalue",children:"minValue and maxValue"}),"\n",(0,a.jsxs)(n.p,{children:["You can add ",(0,a.jsx)(n.code,{children:"minValue"})," and ",(0,a.jsx)(n.code,{children:"maxValue"})," limits to columns, so it will show an error below an input when entered value is out of bounds."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/apartments.ts"',children:"export default {\n      name: 'apartments',\n      columns: [\n        ...\n        {\n          name: 'square_meter',\n          label: 'Square',\n          minValue: 3,\n          maxValue: 1000,\n        },\n      ],\n    },\n    ...\n  ],\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"minValue"})," and ",(0,a.jsx)(n.code,{children:"maxValue"})," checks are enforced both on frontend and backend."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"validation",children:"Validation"}),"\n",(0,a.jsxs)(n.p,{children:["In cases when column values must follow certain format, you can add ",(0,a.jsx)(n.code,{children:"validation"})," to it.\n",(0,a.jsx)(n.code,{children:"validation"})," is an array of rules, each containing ",(0,a.jsx)(n.code,{children:"regExp"})," that defines a format for a value and ",(0,a.jsx)(n.code,{children:"message"})," that will be displayed in case when entered value does not pass the check."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/adminuser.ts"',children:"export default {\n      name: 'adminuser',\n      columns: [\n        ...\n        {\n          name: 'email',\n          required: true,\n          isUnique: true,\n          validation: [\n            {\n              regExp: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$',\n              message: 'Email is not valid, must be in format example@test.com',\n            },\n          ],\n        },\n      ],\n    },\n    ...\n  ],\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"validation"})," checks are enforced both on frontend and backend."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"input-prefix-and-suffix",children:"Input prefix and suffix"}),"\n",(0,a.jsxs)(n.p,{children:["You can add prefix or suffix to inputs by adding ",(0,a.jsx)(n.code,{children:"inputPrefix"})," or ",(0,a.jsx)(n.code,{children:"inputSuffix"})," fields to a column."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/users.ts"',children:'export default {\n      name: \'users\',\n      columns: [\n        ...\n        {\n          name: "price",\n          inputSuffix: "USD",\n          allowMinMaxQuery: true,\n        },\n      ],\n    },\n    ...\n  ],\n'})}),"\n",(0,a.jsxs)(n.p,{children:["These fields can only be used with following ",(0,a.jsx)(n.code,{children:"AdminForthDataTypes"}),": ",(0,a.jsx)(n.code,{children:"DECIMAL"}),", ",(0,a.jsx)(n.code,{children:"FLOAT"}),", ",(0,a.jsx)(n.code,{children:"INTEGER"}),", ",(0,a.jsx)(n.code,{children:"STRING"})," and ",(0,a.jsx)(n.code,{children:"JSON"})," (only if ",(0,a.jsx)(n.code,{children:"JSON"})," column is an array with appropriate ",(0,a.jsx)(n.code,{children:"itemType"}),")."]}),"\n",(0,a.jsx)(n.h3,{id:"editing-note",children:"Editing note"}),"\n",(0,a.jsxs)(n.p,{children:["You can add ",(0,a.jsx)(n.code,{children:"editingNote"})," to a column to show a note below the input field."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/adminuser.ts"',children:'export default {\n      name: \'adminuser\',\n      columns: [\n        ...\n        {\n          name: "password",\n          editingNote: { edit: "Leave empty to keep password unchanged" },\n        },\n      ],\n    },\n    ...\n  ],\n'})}),"\n",(0,a.jsx)(n.h3,{id:"filling-an-array-of-values",children:"Filling an array of values"}),"\n",(0,a.jsxs)(n.p,{children:["Whenever you want to have a column to store not a single value but an array of values you have to set column as ",(0,a.jsx)(n.code,{children:"AdminForthDataTypes.JSON"}),". This way when you are creating or editing a record you can type in a JSON array into a textfield. To simplify this process and allow you to create and edit separate items you can add ",(0,a.jsx)(n.code,{children:"isArray"})," to a column."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/adminuser.ts"',children:"export default {\n      name: 'adminuser',\n      columns: [\n        ...\n        {\n          name: \"room_sizes\",\n          type: AdminForthDataTypes.JSON,\n//diff-add\n          isArray: {\n//diff-add\n            enabled: true,\n//diff-add\n            itemType: AdminForthDataTypes.FLOAT,\n//diff-add\n          },\n        },\n      ],\n    },\n    ...\n  ],\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Doing so, will result in UI displaying each item of the array as a separate input corresponding to ",(0,a.jsx)(n.code,{children:"isArray.itemType"})," on create and edit pages."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"itemType"})," value can be any of ",(0,a.jsx)(n.code,{children:"AdminForthDataTypes"})," except ",(0,a.jsx)(n.code,{children:"JSON"})," and ",(0,a.jsx)(n.code,{children:"RICHTEXT"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["By default it is forbidden to store duplicate values in an array column. To change that you can add ",(0,a.jsx)(n.code,{children:"allowDuplicateItems: true"})," to ",(0,a.jsx)(n.code,{children:"isArray"}),", like so:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/adminuser.ts"',children:"export default {\n      name: 'adminuser',\n      columns: [\n        ...\n        {\n          name: \"room_sizes\",\n          type: AdminForthDataTypes.JSON,\n          isArray: {\n            enabled: true,\n            itemType: AdminForthDataTypes.FLOAT,\n//diff-add\n            allowDuplicateItems: true,\n          },\n        },\n      ],\n    },\n    ...\n  ],\n"})}),"\n",(0,a.jsxs)(n.p,{children:["All validation rules, such as ",(0,a.jsx)(n.code,{children:"minValue"}),", ",(0,a.jsx)(n.code,{children:"maxValue"}),", ",(0,a.jsx)(n.code,{children:"minLength"}),", ",(0,a.jsx)(n.code,{children:"maxLength"})," and ",(0,a.jsx)(n.code,{children:"validation"})," will be applied not to array itself but instead to each item."]}),"\n",(0,a.jsxs)(n.p,{children:["Note: array columns can not be marked as ",(0,a.jsx)(n.code,{children:"masked"}),", be a ",(0,a.jsx)(n.code,{children:"primaryKey"})," and at the time can not be linked to a foreign resource."]}),"\n",(0,a.jsx)(n.h3,{id:"foreign-resources",children:"Foreign resources"}),"\n",(0,a.jsxs)(n.p,{children:["When you want to create a connection between two resources, you need to add ",(0,a.jsx)(n.code,{children:"foreignResource"})," to a column, like so:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/adminuser.ts"',children:"export default {\n      name: 'adminuser',\n      columns: [\n        ...\n        {\n          name: \"realtor_id\",\n          foreignResource: {\n            resourceId: 'adminuser',\n          },\n        },\n      ],\n    },\n    ...\n  ],\n"})}),"\n",(0,a.jsx)(n.p,{children:"This way, when creating or editing a record you will be able to choose value for this field from a dropdown selector and on list and show pages this field will be displayed as a link to a foreign resource."}),"\n",(0,a.jsx)(n.h3,{id:"unset-label",children:"Unset label"}),"\n",(0,a.jsxs)(n.p,{children:["When foreign resource column is not required, selector will have an 'Unset' option that will set field to ",(0,a.jsx)(n.code,{children:"null"}),". You can change label for this option using ",(0,a.jsx)(n.code,{children:"unsetLabel"}),", like so:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/adminuser.ts"',children:"export default {\n      name: 'adminuser',\n      columns: [\n        ...\n        {\n          name: \"realtor_id\",\n          foreignResource: {\n            resourceId: 'adminuser',\n//diff-add\n            unsetLabel: 'No realtor',\n          },\n        },\n      ],\n    },\n    ...\n  ],\n"})}),"\n",(0,a.jsx)(n.h2,{id:"filtering",children:"Filtering"}),"\n",(0,a.jsx)(n.h3,{id:"filter-options",children:"Filter Options"}),"\n",(0,a.jsxs)(n.p,{children:["You can specify the delay between filtering requests and filtering operator for a column using ",(0,a.jsx)(n.code,{children:"filterOptions"})," field."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/adminuser.ts"',children:"export default {\n      name: 'adminuser',\n      columns: [\n        ...\n        {\n          name: \"title\",\n          required: true,\n          maxLength: 255,\n          minLength: 3,\n//diff-add\n          filterOptions: {\n//diff-add\n            debounceTimeMs: 500,\n//diff-add\n            substringSearch: false,\n//diff-add\n          },\n        },\n      ],\n    },\n    ...\n  ],\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"debounceTimeMs"})," field dictates how long (in milliseconds) to wait between inputs to send updated data request. By increasing this value, you can reduce the amount of requests set to backend. Default value for this field is set to 10ms.\n",(0,a.jsx)(n.code,{children:"substringSearch"})," sets what comparison operator to use for text field. By default this field is set to ",(0,a.jsx)(n.code,{children:"true"}),", which results in using case-insensitive ",(0,a.jsx)(n.code,{children:"ILIKE"})," operator, that will look for records that have filter string anywhere inside field value. Setting this ",(0,a.jsx)(n.code,{children:"substringSearch"})," to ",(0,a.jsx)(n.code,{children:"false"})," will result in using more strict ",(0,a.jsx)(n.code,{children:"EQ"})," operator, that will look for exact full-string matches."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},5276:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/createEditGroups-f18aa6d458361110bb74ccf4de8d7bb1.png"},8481:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/silent refresh-f8dfa7102e3a1d31345a43ece682ba02.gif"},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var i=t(6540);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);