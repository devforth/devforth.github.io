"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[5292],{1140:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"tutorial/Plugins/ForeignInlineList","title":"ForeignInlineList","description":"Foreign inline list plugin allows to display a list (table) of items from a foreign table in the show view.","source":"@site/docs/tutorial/05-Plugins/03-ForeignInlineList.md","sourceDirName":"tutorial/05-Plugins","slug":"/tutorial/Plugins/ForeignInlineList","permalink":"/docs/tutorial/Plugins/ForeignInlineList","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Two-Factor Authentication Plugin","permalink":"/docs/tutorial/Plugins/TwoFactorsAuth"},"next":{"title":"Rich editor","permalink":"/docs/tutorial/Plugins/RichEditor"}}');var s=i(4848),o=i(8453);const t={},a=void 0,d={},l=[{value:"Usage",id:"usage",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Foreign inline list plugin allows to display a list (table) of items from a foreign table in the show view."}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.p,{children:"Import plugin:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm i @adminforth/foreign-inline-list --save\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="./resources/users.ts"',children:"import ForeignInlineListPlugin from '@adminforth/foreign-inline-list';\nimport { AdminForthResource, AdminForthResourceColumn } from 'adminforth';\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.a,{href:"/docs/tutorial/gettingStarted",children:"Getting Started"})," we created a ",(0,s.jsx)(n.code,{children:"'aparts'"})," resource which has a field ",(0,s.jsx)(n.code,{children:"'realtor_id'"}),".\nThis field refers to record from ",(0,s.jsx)(n.code,{children:"'users'"})," resource. To remind you, we configured this relation using ",(0,s.jsx)(n.code,{children:"foreignResource"})," setting in the column configuration:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="./resources/apartments.ts"',children:"// \nexport default {\n  resourceId: 'aparts',\n  ...\n  columns: [\n    ...\n    {\n      name: 'realtor_id',\n      foreignResource: {\n        resourceId: 'users',  // this means that aparts.realtor_id refers to primary key of 'users' resource\n                              // this is Many-To-One relatin: many aparts can refer to one user\n      }\n    }\n  ],\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"This means that we can display a list of apartments in the user's show view."}),"\n",(0,s.jsxs)(n.p,{children:["Add to your ",(0,s.jsx)(n.code,{children:"'users'"})," resource configuration the plugin instance:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="./resources/users.ts"',children:"{ \n    ...\n    resourceId: 'users',\n    ...\n//diff-add\n    plugins: [\n//diff-add\n      new ForeignInlineListPlugin({\n//diff-add\n        foreignResourceId: 'aparts',\n//diff-add\n        modifyTableResourceConfig: (resourceConfig: AdminForthResource) => {\n//diff-add\n          // hide column 'square_meter' from both 'list' and 'filter'\n//diff-add\n          const column = resourceConfig.columns.find((c: AdminForthResourceColumn) => c.name === 'square_meter')!.showIn = { all: false };\n//diff-add\n          resourceConfig.options!.listPageSize = 1;\n//diff-add\n          // feel free to console.log and edit resourceConfig as you need\n//diff-add\n        },\n//diff-add\n      }),\n//diff-add\n    ],\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can use ",(0,s.jsx)(n.code,{children:"modifyTableResourceConfig"})," callback to modify what columns to show in the list and filter of the foreign table."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"alt text",src:i(4836).A+"",width:"3700",height:"2044"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["\ud83d\udc46 To make plugin work, the specified resource (defined with ",(0,s.jsx)(n.code,{children:"foreignResourceId"}),") should have one (and only one) column that refers to the current resource on which you add a plugin.\nIn our case we add plugin to ",(0,s.jsx)(n.code,{children:"users"})," resource, so the ",(0,s.jsx)(n.code,{children:"aparts"})," resource should have one column with ",(0,s.jsx)(n.code,{children:"foreignResource.resourceId"})," equal to ",(0,s.jsx)(n.code,{children:"users"})," resourceId."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},4836:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/ForeignInlineList-c1a0e3a31c3b8942866b0dad7bd668fd.png"},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var r=i(6540);const s={},o=r.createContext(s);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);