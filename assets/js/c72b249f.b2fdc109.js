"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[8870],{7580:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var o=t(4848),a=t(8453);const r={slug:"compose-ec2-deployment",title:"Deploy AdminForth to EC2 with terraform",authors:"ivanb",tags:["aws","terraform"]},s=void 0,i={permalink:"/blog/compose-ec2-deployment",source:"@site/blog/2024-10-31-compose-ec2-deployment/index.md",title:"Deploy AdminForth to EC2 with terraform",description:"Here is a row snippet to deploy AdminForth to Terraform.",date:"2024-10-31T00:00:00.000Z",tags:[{inline:!1,label:"AWS",permalink:"/blog/tags/aws",description:"Amazon Web Services (AWS) is a cloud computing platform that provides a wide range of services for building and deploying applications."},{inline:!1,label:"Terraform",permalink:"/blog/tags/terraform",description:"Terraform is an open-source infrastructure as code software tool created by HashiCorp that enables users to define and provision data center infrastructure using a declarative configuration language."}],readingTime:3.04,hasTruncateMarker:!1,authors:[{name:"Ivan Borshcho",title:"Maintainer of AdminForth",url:"https://github.com/ivictbor",imageURL:"https://avatars.githubusercontent.com/u/1838656?v=4",key:"ivanb"}],frontMatter:{slug:"compose-ec2-deployment",title:"Deploy AdminForth to EC2 with terraform",authors:"ivanb",tags:["aws","terraform"]},unlisted:!1,nextItem:{title:"Build AI-Assisted blog with AdminForth and Nuxt in 20 minutes",permalink:"/blog/ai-blog"}},c={authorsImageUrls:[void 0]},d=[];function l(e){const n={code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Here is a row snippet to deploy AdminForth to Terraform."}),"\n",(0,o.jsxs)(n.p,{children:["Assume you have your AdminForth project in ",(0,o.jsx)(n.code,{children:"myadmin"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Create file ",(0,o.jsx)(n.code,{children:"Dockerfile"})," in ",(0,o.jsx)(n.code,{children:"myadmin"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-Dockerfile",metastring:'title="./myadmin/Dockerfile"',children:'# use the same node version which you used during dev\nFROM node:20-alpine\nWORKDIR /code/\nADD package.json package-lock.json /code/\nRUN npm ci  \nADD . /code/\nRUN --mount=type=cache,target=/tmp npx tsx bundleNow.ts\nCMD ["npm", "run", "startLive"]\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Create file ",(0,o.jsx)(n.code,{children:"compose.yml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yml",metastring:'title="compose.yml"',children:'\nservices:\n  traefik:\n    image: "traefik:v2.5"\n    command:\n      - "--api.insecure=true"\n      - "--providers.docker=true"\n      - "--entrypoints.web.address=:80"\n    ports:\n      - "80:80"\n    volumes:\n      - "/var/run/docker.sock:/var/run/docker.sock:ro"\n\n  myadmin:\n    build: ./myadmin\n    restart: always\n    env_file:\n      - ./myadmin/.env\n    volumes:\n      - myadmin-db:/code/db\n    labels:\n      - "traefik.enable=true"\n      - "traefik.http.routers.myadmin.rule=PathPrefix(`/`)"\n      - "traefik.http.services.myadmin.loadbalancer.server.port=3500"\n      - "traefik.http.routers.myadmin.priority=2"\n\nvolumes:\n  myadmin-db:\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Create file ",(0,o.jsx)(n.code,{children:"main.tf"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",metastring:'title="main.tf"',children:'\nprovider "aws" {\n  region = "eu-central-1"\n  profile = "myaws"\n}\n\ndata "aws_ami" "ubuntu_linux" {\n  most_recent = true\n  owners      = ["amazon"]\n\n  filter {\n    name   = "name"\n    values = ["ubuntu/images/hvm-ssd-gp3/ubuntu-noble-24.04-amd64-server-*"]\n  }\n}\n\ndata "aws_vpc" "default" {\n  default = true\n}\n\nresource "aws_eip" "eip" {\n vpc = true\n}\nresource "aws_eip_association" "eip_assoc" {\n instance_id   = aws_instance.myadmin_instance.id\n allocation_id = aws_eip.eip.id\n}\n\ndata "aws_subnet" "default_subnet" {\n  filter {\n    name   = "vpc-id"\n    values = [data.aws_vpc.default.id]\n  }\n\n  filter {\n    name   = "default-for-az"\n    values = ["true"]\n  }\n\n  filter {\n    name   = "availability-zone"\n    values = ["eu-central-1a"]\n  }\n}\n\n\nresource "aws_security_group" "instance_sg" {\n  name   = "myadmin-instance-sg"\n  vpc_id = data.aws_vpc.default.id\n\n  ingress {\n    description = "Allow HTTP"\n    from_port   = 80\n    to_port     = 80\n    protocol    = "tcp"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n\n  # SSH\n  ingress {\n    description = "Allow SSH"\n    from_port   = 22\n    to_port     = 22\n    protocol    = "tcp"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n\n  egress {\n    description = "Allow all outbound traffic"\n    from_port   = 0\n    to_port     = 0\n    protocol    = "-1"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n}\n\nresource "aws_key_pair" "myadmin_deploy_key" {\n  key_name   = "terraform-myadmin_deploy_key-key"\n  public_key = file("~/.ssh/id_rsa.pub") # Path to your public SSH key\n}\n\n\nresource "aws_instance" "myadmin_instance" {\n  ami                    = data.aws_ami.ubuntu_linux.id\n  instance_type          = "t3a.small"\n  subnet_id              = data.aws_subnet.default_subnet.id\n  vpc_security_group_ids = [aws_security_group.instance_sg.id]\n  key_name               = aws_key_pair.myadmin_deploy_key.key_name\n\n  root_block_device {\n    volume_size = 20 // Size in GB for root partition\n    volume_type = "gp2"\n  }\n\n  user_data = <<-EOF\n    #!/bin/bash\n    sudo apt-get update\n    sudo apt-get install ca-certificates curl\n    sudo install -m 0755 -d /etc/apt/keyrings\n    sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\n    sudo chmod a+r /etc/apt/keyrings/docker.asc\n\n    # Add the repository to Apt sources:\n    echo \\\n      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n      $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \\\n      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n    sudo apt-get update\n\n    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n    systemctl start docker\n    systemctl enable docker\n    usermod -a -G docker ubuntu\n  EOF\n\n  tags = {\n    Name = "myadmin-instance"\n  }\n}\n\nresource "null_resource" "sync_files_and_run" {\n  # Use rsync to exclude node_modules, .git, db\n  provisioner "local-exec" {\n    # heredoc syntax\n    command = <<-EOF\n    rsync -t -av \\\n      --delete \\\n      --exclude \'node_modules\' \\\n      --exclude \'.git\' \\\n      --exclude \'.terraform\' \\\n      --exclude \'terraform*\' \\\n      --exclude \'.vscode\' \\\n      --exclude \'db\' \\\n      ./ ubuntu@${aws_eip_association.eip_assoc.public_ip}:/home/ubuntu/app/\n    EOF\n    \n  }\n\n  # Run docker compose after files have been copied\n  provisioner "remote-exec" {\n    inline = [\n      "bash -c \'while ! command -v docker &> /dev/null; do echo \\"Waiting for Docker to be installed...\\"; sleep 1; done\'",\n      "bash -c \'while ! docker info &> /dev/null; do echo \\"Waiting for Docker to start...\\"; sleep 1; done\'",\n      # -a would destroy cache\n      "docker system prune -f",\n      "cd /home/ubuntu/app/",\n      "docker compose -f compose.yml up --build -d"\n    ]\n\n    connection {\n      type        = "ssh"\n      user        = "ubuntu"\n      private_key = file("~/.ssh/id_rsa")\n      host        = aws_eip_association.eip_assoc.public_ip\n    }\n  }\n\n  # Ensure the resource is triggered every time based on timestamp or file hash\n  triggers = {\n    always_run = timestamp()\n  }\n\n  depends_on = [aws_instance.myadmin_instance, aws_eip_association.eip_assoc]\n}\n\n\noutput "instance_public_ip" {\n  value = aws_eip_association.eip_assoc.public_ip\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"To run the deployment first time, you need to run:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"terraform init\n"})}),"\n",(0,o.jsx)(n.p,{children:"Then with any change in code:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"terraform apply -auto-approve\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var o=t(6540);const a={},r=o.createContext(a);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);