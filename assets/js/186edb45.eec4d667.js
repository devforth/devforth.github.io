"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[1980],{6777:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=t(4848),a=t(8453);const i={},s="Getting Started",o={id:"tutorial/gettingStarted",title:"Getting Started",description:"This Getting Started Page has some explanations and tables with various field types.",source:"@site/docs/tutorial/001-gettingStarted.md",sourceDirName:"tutorial",slug:"/tutorial/gettingStarted",permalink:"/docs/tutorial/gettingStarted",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",next:{title:"Hello world app",permalink:"/docs/tutorial/helloWorld"}},d={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Basic Philosophy",id:"basic-philosophy",level:2},{value:"Setting up a first demo",id:"setting-up-a-first-demo",level:2},{value:"Database creation",id:"database-creation",level:2},{value:"Generating fake records",id:"generating-fake-records",level:2},{value:"Possible configuration options",id:"possible-configuration-options",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"getting-started",children:"Getting Started"}),"\n",(0,r.jsxs)(n.p,{children:["This Getting Started Page has some explanations and tables with various field types.\nFor faster and shorter hello world example check out ",(0,r.jsx)(n.a,{href:"/docs/tutorial/helloWorld",children:"Hello World"})]}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.p,{children:"AdminForth requires Node v18 or higher:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"nvm install 20\nnvm alias default 20\nnvm use 20\n"})}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir myadmin\ncd myadmin\nnpm init -y\nnpm install adminforth\n"})}),"\n",(0,r.jsxs)(n.p,{children:["AdminForth does not provide own HTTP server, but can add own listeners over exisitng ",(0,r.jsx)(n.a,{href:"https://expressjs.com/",children:"Express"})," server (Fastify support is planned in future). This allows to create custom APIs for backoffice in a way you know."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install express@4.19.2\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can use AdminForth in pure Node, but we recommend using TypeScript for better development experience:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install typescript@5.4.5 tsx@4.11.2 --save-dev\n"})}),"\n",(0,r.jsx)(n.p,{children:"Also we will store secret for JWTs in .env file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install dotenv --save-dev\n"})}),"\n",(0,r.jsx)(n.h2,{id:"basic-philosophy",children:"Basic Philosophy"}),"\n",(0,r.jsx)(n.p,{children:"AdminForth connects to existing databases and provides a backoffice for managing data including CRUD operations, filtering, sorting, and more."}),"\n",(0,r.jsx)(n.p,{children:"Database should be already created by using any database management tool, ORM or migrator. AdminForth does not provide a way to create tables or columns in the database."}),"\n",(0,r.jsx)(n.p,{children:'Once you have a database, you pass a connection string to AdminForth and define resources(tables) and columns you would like to see in backoffice. For most DBs AdminForth can "discover" column types and constraints (e.g. max-length) by connecting to DB. However you can redefine them in AdminForth configuration. Type and constraints definition are take precedence over DB schema.'}),"\n",(0,r.jsx)(n.p,{children:'Also in AdminForth you can define in "Vue" way:'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"how each field will be rendered"}),"\n",(0,r.jsx)(n.li,{children:"create own pages e.g. Dashboards"}),"\n",(0,r.jsx)(n.li,{children:"insert injections into standard pages (e.g. add diagram to list view)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"setting-up-a-first-demo",children:"Setting up a first demo"}),"\n",(0,r.jsxs)(n.p,{children:["In the demo we will create a simple database with 2 tables: ",(0,r.jsx)(n.code,{children:"apartments"})," and ",(0,r.jsx)(n.code,{children:"users"}),". We will just use plain SQL to create tables and insert some fake data."]}),"\n",(0,r.jsx)(n.p,{children:"Users table will be used to store a credentials for login into backoffice itself."}),"\n",(0,r.jsxs)(n.p,{children:["Open ",(0,r.jsx)(n.code,{children:"package.json"}),", set ",(0,r.jsx)(n.code,{children:"type"})," to ",(0,r.jsx)(n.code,{children:"module"})," and add ",(0,r.jsx)(n.code,{children:"start"})," script:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="./package.json"',children:'{\n  ...\n//diff-add\n  "type": "module",\n  "scripts": {\n    ...\n//diff-add\n    "start": "tsx watch --env-file=.env index.ts"\n  },\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:".env"})," file in root directory with following content:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",metastring:'title="./.env"',children:"DATABASE_FILE=./db.sqlite\nDATABASE_FILE_URL=file:${DATABASE_FILE}\nADMINFORTH_SECRET=123\nNODE_ENV=development\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"\u261d\ufe0f In production:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["you should set ",(0,r.jsx)(n.code,{children:"NODE_ENV"})," to ",(0,r.jsx)(n.code,{children:"production"})," so it will not waste extra resources on hot reload."]}),"\n",(0,r.jsxs)(n.li,{children:["You should autogenerate ",(0,r.jsx)(n.code,{children:"ADMINFORTH_SECRET"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["\u261d\ufe0f If you are using Git, obviously you should make sure you will never commit ",(0,r.jsx)(n.code,{children:".env"})," file to the repository, because\nit might contain your own sensitive secrets. So to follow best practices, we recommend to add ",(0,r.jsx)(n.code,{children:".env"})," into ",(0,r.jsx)(n.code,{children:".gitignore"})," and create ",(0,r.jsx)(n.code,{children:".env.sample"})," as template for other repository users.\nDuring deployment you should set ",(0,r.jsx)(n.code,{children:"ADMINFORTH_SECRET"})," in environment variables of Docker image or in other way without using ",(0,r.jsx)(n.code,{children:".env"})," file."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"database-creation",children:"Database creation"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"\u261d\ufe0f For demo purposes we will create a database using Prisma and SQLite.\nYou can also create it using any other favorite tool or ORM and skip this step."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:"./schema.prisma"})," and put next content there:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",metastring:'title="./schema.prisma"',children:'generator client {\n  provider = "prisma-client-js"\n}\n\ndatasource db {\n  provider = "sqlite"\n  url      = env("DATABASE_FILE_URL")\n}\n\nmodel users {\n  id            String     @id\n  created_at    DateTime \n  email         String   @unique\n  role          String     \n  password_hash String\n}\n\nmodel apartments {\n  id                String     @id\n  created_at        DateTime? \n  title             String \n  square_meter      Float?\n  price             Decimal\n  number_of_rooms   Int?\n  description       String?\n  country           String?\n  listed            Boolean\n  realtor_id        String?\n}\n\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Create database using ",(0,r.jsx)(n.code,{children:"prisma migrate"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx --yes prisma migrate dev --name init\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:"index.ts"})," file in root directory with following content:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="./index.ts"',children:"import express from 'express';\nimport AdminForth, { Filters } from 'adminforth';\nimport usersResource from \"./resources/users\";\nimport apartmentsResource from \"./resources/apartments\";\n\n\nconst ADMIN_BASE_URL = '';\n\nexport const admin = new AdminForth({\n  baseUrl : ADMIN_BASE_URL,\n  auth: {\n    usersResourceId: 'users',  // resource to get user during login\n    usernameField: 'email',  // field where username is stored, should exist in resource\n    passwordHashField: 'password_hash',\n    rememberMeDays: 30, // users who will check \"remember me\" will stay logged in for 30 days\n  },\n  customization: {\n    brandName: 'My Admin',\n    datesFormat: 'D MMM YY HH:mm:ss',\n    emptyFieldPlaceholder: '-',\n  },\n\n  dataSources: [\n    {\n      id: 'maindb',\n      url: `sqlite://${process.env.DATABASE_FILE}`\n    },\n  ],\n  resources: [\n    apartmentsResource,\n    usersResource,\n  ],\n  menu: [\n    {\n      label: 'Core',\n      icon: 'flowbite:brain-solid', // any icon from iconify supported in format <setname>:<icon>, e.g. from here https://icon-sets.iconify.design/flowbite/\n      open: true,\n      children: [\n        {\n          homepage: true,\n          label: 'Apartments',\n          icon: 'flowbite:home-solid',\n          resourceId: 'aparts',\n        },\n      ]\n    },\n    {\n      type: 'gap'\n    },\n    {\n      type: 'divider'\n    },\n    {\n      type: 'heading',\n      label: 'SYSTEM',\n    },\n    {\n      label: 'Users',\n      icon: 'flowbite:user-solid',\n      resourceId: 'users',\n    }\n  ],\n});\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  // if script is executed directly e.g. node index.ts or npm start\n\n\n  const app = express()\n  app.use(express.json());\n  const port = 3500;\n\n  // needed to compile SPA. Call it here or from a build script e.g. in Docker build time to reduce downtime\n  await admin.bundleNow({ hotReload: process.env.NODE_ENV === 'development'});\n  console.log('Bundling AdminForth done. For faster serving consider calling bundleNow() from a build script.');\n\n\n  // serve after you added all api\n  admin.express.serve(app)\n\n  admin.discoverDatabases().then(async () => {\n    if (!await admin.resource('users').get([Filters.EQ('email', 'adminforth')])) {\n      await admin.resource('users').create({\n        email: 'adminforth',\n        password_hash: await AdminForth.Utils.generatePasswordHash('adminforth'),\n        role: 'superadmin',\n      });\n    }\n  });\n\n  app.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`)\n    console.log(`\\n\u26a1 AdminForth is available at http://localhost:${port}${ADMIN_BASE_URL}\\n`)\n  });\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Next step you need to create ",(0,r.jsx)(n.code,{children:"resources"})," folder."]}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:"apartments.ts"})," in ",(0,r.jsx)(n.code,{children:"resources"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="/apartments.ts"',children:"import { AdminForthDataTypes } from 'adminforth';\n\nexport default {\n  dataSource: 'maindb',\n  table: 'apartments',\n  resourceId: 'aparts', // resourceId is defaulted to table name but you can redefine it like this e.g. \n  // in case of same table names from different data sources\n  label: 'Apartments',   // label is defaulted to table name but you can change it\n  recordLabel: (r) => `\ud83c\udfe1 ${r.title}`,\n  columns: [\n    {\n      name: 'id',\n      label: 'Identifier',  // if you wish you can redefine label, defaulted to uppercased name\n      showIn: ['filter', 'show'], // show column in filter and in show page\n      primaryKey: true,\n      fillOnCreate: ({ initialRecord, adminUser }) => Math.random().toString(36).substring(7),  // called during creation to generate content of field, initialRecord is values user entered, adminUser object of user who creates record\n    },\n    {\n      name: 'title',\n      required: true,\n      showIn: ['list', 'create', 'edit', 'filter', 'show'],  // all available options\n      maxLength: 255,  // you can set max length for string fields\n      minLength: 3,  // you can set min length for string fields\n    },\n    {\n      name: 'created_at',\n      type: AdminForthDataTypes.DATETIME,\n      allowMinMaxQuery: true,\n      showIn: ['list', 'filter', 'show', 'edit'],\n      fillOnCreate: ({ initialRecord, adminUser }) => (new Date()).toISOString(),\n    },\n    {\n      name: 'price',\n      allowMinMaxQuery: true,  // use better experience for filtering e.g. date range, set it only if you have index on this column or if you sure there will be low number of rows\n      editingNote: 'Price is in USD',  // you can put a note near field on editing or creating page\n    },\n    {\n      name: 'square_meter',\n      label: 'Square',\n      allowMinMaxQuery: true,\n      minValue: 1,  // you can set min /max value for number columns so users will not be able to enter more/less\n      maxValue: 1000,\n    },\n    {\n      name: 'number_of_rooms',\n      allowMinMaxQuery: true,\n      enum: [\n        { value: 1, label: '1 room' },\n        { value: 2, label: '2 rooms' },\n        { value: 3, label: '3 rooms' },\n        { value: 4, label: '4 rooms' },\n        { value: 5, label: '5 rooms' },\n      ],\n    },\n    {\n      name: 'description',\n      sortable: false,\n      showIn: ['show', 'edit', 'create', 'filter'],\n    },\n    {\n      name: 'country',\n      enum: [{\n        value: 'US',\n        label: 'United States'\n      }, {\n        value: 'DE',\n        label: 'Germany'\n      }, {\n        value: 'FR',\n        label: 'France'\n      }, {\n        value: 'UK',\n        label: 'United Kingdom'\n      }, {\n        value: 'NL',\n        label: 'Netherlands'\n      }, {\n        value: 'IT',\n        label: 'Italy'\n      }, {\n        value: 'ES',\n        label: 'Spain'\n      }, {\n        value: 'DK',\n        label: 'Denmark'\n      }, {\n        value: 'PL',\n        label: 'Poland'\n      }, {\n        value: 'UA',\n        label: 'Ukraine'\n      }, {\n        value: null,\n        label: 'Not defined'\n      }],\n    },\n    {\n      name: 'listed',\n      required: true,  // will be required on create/edit\n    },\n    {\n      name: 'realtor_id',\n      foreignResource: {\n        resourceId: 'users',\n      }\n    }\n  ],\n  options: {\n    listPageSize: 12,\n    allowedActions: {\n      edit: true,\n      delete: true,\n      show: true,\n      filter: true,\n    },\n  },\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:"users.ts"})," in ",(0,r.jsx)(n.code,{children:"resources"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="/users.ts"',children:"import AdminForth, { AdminForthDataTypes } from 'adminforth';\nexport default {\n  dataSource: 'maindb',\n  table: 'users',\n  resourceId: 'users',\n  label: 'Users',\n  recordLabel: (r) => `\ud83d\udc64 ${r.email}`,\n  columns: [\n    {\n      name: 'id',\n      primaryKey: true,\n      fillOnCreate: ({ initialRecord, adminUser }) => Math.random().toString(36).substring(7),\n      showIn: ['list', 'filter', 'show'],\n    },\n    {\n      name: 'email',\n      required: true,\n      isUnique: true,\n      validation: [\n        {\n          regExp: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$',\n          message: 'Email is not valid, must be in format example@test.com'\n        },\n      ]\n    },\n    {\n      name: 'created_at',\n      type: AdminForthDataTypes.DATETIME,\n      showIn: ['list', 'filter', 'show'],\n      fillOnCreate: ({ initialRecord, adminUser }) => (new Date()).toISOString(),\n    },\n    {\n      name: 'role',\n      enum: [\n        { value: 'superadmin', label: 'Super Admin' },\n        { value: 'user', label: 'User' },\n      ]\n    },\n    {\n      name: 'password',\n      virtual: true,  // field will not be persisted into db\n      required: { create: true }, // make required only on create page\n      editingNote: { edit: 'Leave empty to keep password unchanged' },\n      minLength: 8,\n      type: AdminForthDataTypes.STRING,\n      showIn: ['create', 'edit'], // to show field only on create and edit pages\n      masked: true, // to show stars in input field\n    },\n    { name: 'password_hash', backendOnly: true, showIn: [] }\n  ],\n  hooks: {\n    create: {\n      beforeSave: async ({ record, adminUser, resource }) => {\n        record.password_hash = await AdminForth.Utils.generatePasswordHash(record.password);\n        return { ok: true };\n      }\n    },\n    edit: {\n      beforeSave: async ({ record, adminUser, resource }) => {\n        if (record.password) {\n          record.password_hash = await AdminForth.Utils.generatePasswordHash(record.password);\n        }\n        return { ok: true }\n      },\n    },\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Now you can run your app:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm start\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Open ",(0,r.jsx)(n.a,{href:"http://localhost:3500",children:"http://localhost:3500"})," in your browser and login with credentials ",(0,r.jsx)(n.code,{children:"adminforth"})," / ",(0,r.jsx)(n.code,{children:"adminforth"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"alt text",src:t(8332).A+"",width:"2428",height:"1932"})}),"\n",(0,r.jsx)(n.h2,{id:"generating-fake-records",children:"Generating fake records"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="./index.ts"',children:"//diff-add\nasync function seedDatabase() {\n//diff-add\n  if (await admin.resource('aparts').count() > 0) {\n//diff-add\n    return\n//diff-add    \n  }\n//diff-add  \n  for (let i = 0; i <= 50; i++) {\n//diff-add    \n    await admin.resource('aparts').create({\n//diff-add      \n      id: `${i}`,\n//diff-add      \n      title: `Apartment ${i}`,\n//diff-add      \n      square_meter: (Math.random() * 100).toFixed(1),\n//diff-add      \n      price: (Math.random() * 10000).toFixed(2),\n//diff-add      \n      number_of_rooms: Math.floor(Math.random() * 4) + 1,\n//diff-add      \n      description: 'Next gen apartments',\n//diff-add      \n      created_at: (new Date(Date.now() - Math.random() * 60 * 60 * 24 * 14 * 1000)).toISOString(),\n//diff-add      \n      listed: i % 2 == 0,\n//diff-add      \n      country: `${['US', 'DE', 'FR', 'UK', 'NL', 'IT', 'ES', 'DK', 'PL', 'UA'][Math.floor(Math.random() * 10)]}`\n//diff-add      \n    });\n//diff-add    \n  };\n//diff-add  \n};\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n\n  ...\n\n  admin.discoverDatabases().then(async () => {\n    if (!await admin.resource('users').get([Filters.EQ('email', 'adminforth')])) {\n      await admin.resource('users').create({\n        email: 'adminforth',\n        password_hash: await AdminForth.Utils.generatePasswordHash('adminforth'),\n        role: 'superadmin',\n      });\n    }\n//diff-add\n    await seedDatabase();\n  });\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This will create records during first launch. Now you should see:\n",(0,r.jsx)(n.img,{alt:"alt text",src:t(4973).A+"",width:"3700",height:"1932"})]}),"\n",(0,r.jsx)(n.h2,{id:"possible-configuration-options",children:"Possible configuration options"}),"\n",(0,r.jsxs)(n.p,{children:["Check ",(0,r.jsx)(n.a,{href:"/docs/api/types/AdminForthConfig/type-aliases/AdminForthConfig",children:"AdminForthConfig"})," for all possible options."]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8332:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/localhost_3500_login-22b59511349c51948267c9a4080e4d87.png"},4973:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/localhost_3500_resource_aparts-dddac951816a2a7b58c84b6348828ecb.png"},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(6540);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);