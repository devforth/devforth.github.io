"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[5481],{68840:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"tutorial/Plugins/i18n","title":"Internationalization (i18n)","description":"This plugin allows you translate your AdminForth application to multiple languages.","source":"@site/docs/tutorial/07-Plugins/10-i18n.md","sourceDirName":"tutorial/07-Plugins","slug":"/tutorial/Plugins/i18n","permalink":"/docs/tutorial/Plugins/i18n","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Open Signup","permalink":"/docs/tutorial/Plugins/open-signup"},"next":{"title":"OAuth Authentication","permalink":"/docs/tutorial/Plugins/oauth"}}');var s=t(74848),i=t(28453);const r={},o="Internationalization (i18n)",l={},d=[{value:"Installation",id:"installation",level:2},{value:"Primary Language Configuration",id:"primary-language-configuration",level:2},{value:"How Primary Language Works",id:"how-primary-language-works",level:3},{value:"Example: Portuguese as Primary Language",id:"example-portuguese-as-primary-language",level:3},{value:"Translation for custom components",id:"translation-for-custom-components",level:2},{value:"Variables in frontend translations",id:"variables-in-frontend-translations",level:3},{value:"HTML in translations",id:"html-in-translations",level:3},{value:"Pluralization",id:"pluralization",level:3},{value:"Limiting access to translating",id:"limiting-access-to-translating",level:2},{value:"Proofreading checkboxes",id:"proofreading-checkboxes",level:2},{value:"Translations in custom APIs",id:"translations-in-custom-apis",level:2},{value:"Pluralisation in backend translations",id:"pluralisation-in-backend-translations",level:3},{value:"Translating messages within bulk action",id:"translating-messages-within-bulk-action",level:2},{value:"Translating external application",id:"translating-external-application",level:2},{value:"Feeding messages during build time",id:"feeding-messages-during-build-time",level:4},{value:"Get language names",id:"get-language-names",level:3},{value:"Disable translation for admin (external app only)",id:"disable-translation-for-admin-external-app-only",level:3}];function c(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"internationalization-i18n",children:"Internationalization (i18n)"})}),"\n",(0,s.jsx)(e.p,{children:"This plugin allows you translate your AdminForth application to multiple languages.\nMain features:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Stores all translation strings in your application in a single AdminForth resource. You can set ",(0,s.jsx)(e.a,{href:"/docs/tutorial/Customization/limitingAccess/",children:"allowed actions"})," only  to Developers/Translators role if you don't want other users to see/edit the translations."]}),"\n",(0,s.jsx)(e.li,{children:"Supports AI completion adapters to help with translations. For example, you can use OpenAI ChatGPT to generate translations. Supports correct pluralization, even for Slavic languages."}),"\n",(0,s.jsx)(e.li,{children:"Supports any number of languages."}),"\n",(0,s.jsxs)(e.li,{children:["Supports BCP47 language codes (e.g., ",(0,s.jsx)(e.code,{children:"en-GB"}),", ",(0,s.jsx)(e.code,{children:"pt-BR"}),") for regional language variants."]}),"\n",(0,s.jsx)(e.li,{children:"Configurable primary language."}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"Under the hood it uses vue-i18n library and provides several additional facilities to make the translation process easier."}),"\n",(0,s.jsx)(e.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(e.p,{children:"To install the plugin:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"npm install @adminforth/i18n --save\nnpm install @adminforth/completion-adapter-open-ai-chat-gpt --save\n"})}),"\n",(0,s.jsx)(e.p,{children:"For example lets add translations to next 4 languages: Ukrainian, Japanese, French, Spanish. Also we will support basic translation for English."}),"\n",(0,s.jsx)(e.p,{children:"Add a model for translations, if you are using prisma, add something like this:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:"title='./schema.prisma'",children:"model translations {\n    id              String   @id\n    en_string       String\n    created_at      DateTime\n    uk_string       String?  // translation for Ukrainian language\n    ja_string       String?  // translation for Japanese language\n    fr_string       String?  // translation for French language\n    es_string       String?  // translation for Spanish language\n    ptBR_string      String?  // Brazilian Portuguese translation using BCP47 code (pt-BR)\n    category        String\n    source          String?\n    completedLangs   String?\n    \n    // we need both indexes on en_string+category and separately on category\n    @@index([en_string, category])\n    @@index([category])\n    @@index([completedLangs])\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["If you want more languages, just add more fields like ",(0,s.jsx)(e.code,{children:"uk_string"}),", ",(0,s.jsx)(e.code,{children:"ja_string"}),", ",(0,s.jsx)(e.code,{children:"fr_string"}),", ",(0,s.jsx)(e.code,{children:"es_string"})," to the model."]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["\ud83d\udca1 ",(0,s.jsx)(e.strong,{children:"Tip"}),": For regional language variants, you can also use BCP47 codes like ",(0,s.jsx)(e.code,{children:"en-GB"}),", ",(0,s.jsx)(e.code,{children:"pt-BR"}),", ",(0,s.jsx)(e.code,{children:"fr-CA"})," and add corresponding fields like ",(0,s.jsx)(e.code,{children:"enGB_string"}),", ",(0,s.jsx)(e.code,{children:"ptBR_string"}),", ",(0,s.jsx)(e.code,{children:"frCA_string"}),"."]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"Next, add resource for translations:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:"title='./resources/translations.ts'",children:"\nimport AdminForth, { AdminForthDataTypes, AdminForthResourceInput } from \"adminforth\";\nimport CompletionAdapterOpenAIChatGPT from \"@adminforth/completion-adapter-open-ai-chat-gpt\";\nimport I18nPlugin from \"@adminforth/i18n\";\nimport { v1 as uuid } from \"uuid\";\n\n\nexport default {\n  dataSource: \"maindb\",\n  table: \"translations\",\n  resourceId: \"translations\",\n  label: \"Translations\",\n\n  recordLabel: (r: any) => `\u270d\ufe0f ${r.en_string}`,\n  plugins: [\n    new I18nPlugin({\n      supportedLanguages: ['en', 'uk', 'ja', 'fr', 'pt-BR'],\n\n      // names of the fields in the resource which will store translations\n      translationFieldNames: {\n        en: 'en_string',\n        uk: 'uk_string',\n        ja: 'ja_string',\n        fr: 'fr_string',\n        'pt-BR': 'ptBR_string',\n\n      },\n\n      // name of the field which will store the category of the string\n      // this helps to categorize strings and deliver them efficiently\n      categoryFieldName: 'category',\n\n      // optional field to store the source (e.g. source file name)\n      sourceFieldName: 'source',\n\n      // optional field store list of completed translations\n      // will hel to filter out incomplete translations\n      completedFieldName: 'completedLangs',\n\n      // optional: set primary language (defaults to 'en' if not specified)\n      // primaryLanguage: 'fr', // Uncomment to set French as primary language\n\n      completeAdapter: new CompletionAdapterOpenAIChatGPT({\n        openAiApiKey: process.env.OPENAI_API_KEY as string,\n        model: 'gpt-4o-mini',\n        expert: {\n          // for UI translation it is better to lower down the temperature from default 0.7. Less creative and more accurate\n          temperature: 0.5,\n        },\n      }),\n    }),\n\n  ],\n  options: {\n    listPageSize: 30,\n  },\n  columns: [\n    {\n      name: \"id\",\n      fillOnCreate: ({ initialRecord, adminUser }: any) => uuid(),\n      primaryKey: true,\n      showIn: { all: false },\n    },\n    {\n      name: \"en_string\",\n      type: AdminForthDataTypes.STRING,\n      label: 'English',\n    },\n    {\n      name: \"created_at\",\n      fillOnCreate: ({ initialRecord, adminUser }: any) => new Date().toISOString(),\n      showIn: {\n        all: false,\n        show: true,\n        edit: false,\n      },\n    },\n    {\n      name: \"uk_string\",\n      type: AdminForthDataTypes.STRING,\n      label: 'Ukrainian',\n    },\n    {\n      name: \"ja_string\",\n      type: AdminForthDataTypes.STRING,\n      label: 'Japanese',\n    },\n    {\n      name: \"fr_string\",\n      type: AdminForthDataTypes.STRING,\n      label: 'French',\n    },\n    { \n      name: \"ptBR_string\",\n      type: AdminForthDataTypes.STRING,\n      label: \"Portuguese (BR)\"\n    },\n    {\n      name: \"completedLangs\",\n    },\n    {\n      name: \"source\",\n      showIn: {\n        list: false,\n        edit: false,\n        create: false,\n      },\n      type: AdminForthDataTypes.STRING,\n    },\n    {\n      name: \"category\",\n      showIn: {\n        edit: false,\n        create: false,\n      },\n      type: AdminForthDataTypes.STRING,\n    }\n  ],\n} as AdminForthResourceInput;\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Add ",(0,s.jsx)(e.code,{children:"OPENAI_API_KEY"})," to your ",(0,s.jsx)(e.code,{children:".env"})," file:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"OPENAI_API_KEY=your_openai_api_key\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Also add the resource to main file and add menu item in ",(0,s.jsx)(e.code,{children:"./index.ts"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:"title='./index.ts'",children:"\n//diff-add\nimport translations from \"./resources/translations\";\n...\n\nconst adminForth = new AdminForth({\n  ...\n  resources: [\n    ...\n//diff-add\n    translations,\n  ],\n  menu: [\n    ...\n//diff-add\n    {\n//diff-add\n      label: 'Translations',\n//diff-add\n      icon: 'material-symbols:translate',\n//diff-add\n      resourceId: 'translations',\n//diff-add\n    },\n  ],\n  ...\n});\n\n"})}),"\n",(0,s.jsx)(e.p,{children:"This is it, now you should restart your app and see the translations resource in the menu."}),"\n",(0,s.jsx)(e.p,{children:"You can add translations for each language manually or use Bulk actions to generate translations with AI completion adapter."}),"\n",(0,s.jsx)(e.p,{children:'For simplicity you can also use filter to get only untranslated strings and complete them one by one (filter name "Fully translated" in the filter).'}),"\n",(0,s.jsx)(e.h2,{id:"primary-language-configuration",children:"Primary Language Configuration"}),"\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"primaryLanguage"})," option allows you to set the default language for your application. This is particularly useful when your application's primary language is not English."]}),"\n",(0,s.jsx)(e.h3,{id:"how-primary-language-works",children:"How Primary Language Works"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Default Language"}),": The language shown to users by default"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Fallback Chain"}),": When a translation is missing, the system falls back to: ",(0,s.jsx)(e.code,{children:"requested language"})," \u2192 ",(0,s.jsx)(e.code,{children:"primaryLanguage"})," \u2192 ",(0,s.jsx)(e.code,{children:"English"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Translation Source"}),": English (",(0,s.jsx)(e.code,{children:"en_string"}),") is always used as the source for AI translations, regardless of the primary language setting"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"example-portuguese-as-primary-language",children:"Example: Portuguese as Primary Language"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:"title='./resources/translations.ts'",children:"export default {\n  // ... other configuration\n  plugins: [\n    new I18nPlugin({\n      // Set Portuguese as the primary language\n      primaryLanguage: 'pt-BR',\n      \n      supportedLanguages: ['pt-BR', 'en', 'en-GB', 'es', 'fr'],\n      translationFieldNames: {\n        'pt-BR': 'ptBR_string',\n        en: 'en_string',\n        'en-GB': 'enGB_string',\n        es: 'es_string',\n        fr: 'fr_string',\n      },\n      \n      // ... rest of configuration\n    }),\n  ],\n  // ... rest of configuration\n} as AdminForthResourceInput;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"translation-for-custom-components",children:"Translation for custom components"}),"\n",(0,s.jsx)(e.p,{children:"To translate custom components, you should simply wrap all strings in $t function. For example:"}),"\n",(0,s.jsxs)(e.p,{children:["Now create file ",(0,s.jsx)(e.code,{children:"CustomLoginFooter.vue"})," in the ",(0,s.jsx)(e.code,{children:"custom"})," folder of your project:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",metastring:'title="./custom/CustomLoginFooter.vue"',children:'<template>\n  <div class="text-center text-gray-500 text-sm mt-4">\n//diff-remove\n    By logging in, you agree to our <a href="#" class="text-blue-500">Terms of Service</a> and <a href="#" class="text-blue-500">Privacy Policy</a>\n//diff-add\n    {{$t(\'By logging in, you agree to our\')}} <a href="#" class="text-blue-500">{{$t(\'Terms of Service\')}}</a> {{$t(\'and\')}} <a href="#" class="text-blue-500">{{$t(\'Privacy Policy\')}}</a>\n  </div>\n</template>\n'})}),"\n",(0,s.jsx)(e.h3,{id:"variables-in-frontend-translations",children:"Variables in frontend translations"}),"\n",(0,s.jsx)(e.p,{children:"You can use variables in translations in same way like you would do it with vue-i18n library."}),"\n",(0,s.jsx)(e.p,{children:"This is generally helps to understand the context of the translation for AI completion adapters and simplifies the translation process, even if done manually."}),"\n",(0,s.jsx)(e.p,{children:'For example if you have string "Showing 1 to 10 of 100 entries" you can of course simply do'}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:"{{ $t('Showing')}} {{from}} {{$t('to')}} {{to}} {{$t('of')}} {{total}} {{$t('entries') }}\n"})}),"\n",(0,s.jsx)(e.p,{children:"And it will form 4 translation strings. But it is much better to have it as single string with variables like this:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:"{{ $t('Showing {from} to {to} of {total} entries', { from, to, total } ) }}\n"})}),"\n",(0,s.jsx)(e.p,{children:"For example, let's add user greeting to the header."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",metastring:'title="./custom/Header.vue"',children:'<template>\n  <div class="flex items-center justify-between p-4 bg-white shadow-md">\n    <div class="text-lg font-semibold text-gray-800">\n      {{ $t(\'Welcome, {name}\', { name: adminUser.username }) }}\n    </div>\n  </div>\n</template>\n\n<script setup lang="ts">\nimport type { AdminForthResourceColumnCommon, AdminForthResourceCommon, AdminUser } from \'@/types/Common\';\n\nconst props = defineProps<{\n    column: AdminForthResourceColumnCommon;\n    record: any;\n    meta: any;\n    resource: AdminForthResourceCommon;\n    adminUser: AdminUser\n}>();\n<\/script>\n'})}),"\n",(0,s.jsx)(e.p,{children:"How to use such component"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",metastring:'title="./index.ts"',children:"\nconst adminForth = new AdminForth({\n  ...\n  customization{ \n    globalInjections: {\n      header: {\n        file: '@@/Header.vue',\n      },\n    }\n  },\n  ...\n});\n\n"})}),"\n",(0,s.jsx)(e.h3,{id:"html-in-translations",children:"HTML in translations"}),"\n",(0,s.jsxs)(e.p,{children:["Sometimes you might want to have HTML in translations. You can use ",(0,s.jsx)(e.code,{children:"i18n-t"})," translation component for this. For example:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:'<span class="hidden sm:inline">\n  <i18n-t keypath="Showing {from} to {to} of {total} Entries" tag="p"  >\n    <template v-slot:from>\n      <strong>{{ from }}</strong>\n    </template>\n    <template v-slot:to>\n      <strong>{{ to }}</strong>\n    </template>\n    <template v-slot:total>\n      <strong>{{ totalRows }}</strong>\n    </template>\n  </i18n-t>\n</span>\n'})}),"\n",(0,s.jsx)(e.h3,{id:"pluralization",children:"Pluralization"}),"\n",(0,s.jsx)(e.p,{children:"Frontend uses same pluralization rules as vue-i18n library. You can use it in the same way. For example:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:"{{ $t('Apartment last 7 days | Apartments last 7 days', data.totalAparts) }}\n"})}),"\n",(0,s.jsx)(e.p,{children:"For English it will use 2 pluralization forms (1 and other), for Slavic languages, LLM adapter will be instructed to generate 4 forms via Pipe: for zero, for one, for 2-4 and for 5+:"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{alt:"alt text",src:t(70881).A+"",width:"2809",height:"1367"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["\ud83d\udea7 Cheaper LLM models like ",(0,s.jsx)(e.code,{children:"gpt-4o-mini"})," might still purely generate pluralisation slavic forms, even despite the fact plugin carefully\ninstructs the model and gives it examples. So if you are using cheap model we recommend reviewing generated translations for plurals and fixing them manually. You can use filter with '|' parameter to filter out strings with pluralisation."]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"limiting-access-to-translating",children:"Limiting access to translating"}),"\n",(0,s.jsxs)(e.p,{children:["If you want to limit access to translations resource only to developers or translators, you can use ",(0,s.jsx)(e.a,{href:"/docs/tutorial/Customization/limitingAccess/",children:"limiting access"})," feature."]}),"\n",(0,s.jsx)(e.p,{children:'Please note that access to "Translate selected" bulk action which uses LLM AI translation adapter is determined by allowedActions.edit permission of resource.'}),"\n",(0,s.jsx)(e.h2,{id:"proofreading-checkboxes",children:"Proofreading checkboxes"}),"\n",(0,s.jsx)(e.p,{children:'You can enable didicated checkboxes for proofreading translations. This will allow proofreaders to check each translation and mark it "reviewed" or "not reviewed".'}),"\n",(0,s.jsx)(e.p,{children:"TO enable this options add TEXT column to the resource."}),"\n",(0,s.jsx)(e.p,{children:"If using prisma, add something like this:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:"title='./schema.prisma'",children:"model translations {\n  ...\n    completedLangs   String?\n  //diff-add\n    reviewed          String? \n    \n    // we need both indexes on en_string+category and separately on category\n    @@index([en_string, category])\n    @@index([category])\n    @@index([completedLangs])\n}  \n"})}),"\n",(0,s.jsx)(e.p,{children:"And add column to the resource:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:"title='./resources/translations.ts'",children:"{\n  ...\n  columns: [\n    ...\n    {\n      name: \"reviewed\",\n      type: AdminForthDataTypes.JSON, // should be JSON type\n      label: 'Reviewed',\n      showIn: {\n        all: false\n      },\n    },\n  ],\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Now just add ",(0,s.jsx)(e.code,{children:"reviewedCheckboxesFieldName"})," to the plugin options:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:"title='./resources/translations.ts'",children:"  plugins: [\n    new I18nPlugin({\n      ...\n      reviewedCheckboxesFieldName: 'reviewed',\n    }),\n  ],\n"})}),"\n",(0,s.jsx)(e.p,{children:"This will add checkboxes to the translations resource:"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{alt:"alt text",src:t(98168).A+"",width:"2336",height:"1542"})}),"\n",(0,s.jsx)(e.h2,{id:"translations-in-custom-apis",children:"Translations in custom APIs"}),"\n",(0,s.jsxs)(e.p,{children:["Sometimes you need to return a translated error or success message from your API. You can use special ",(0,s.jsx)(e.code,{children:"tr"})," function for this."]}),"\n",(0,s.jsx)(e.p,{children:"For simple example let's move previous example to format string on the backend side:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",metastring:'title="./custom/Header.vue"',children:"<template>\n  <div class=\"flex items center justify-between p-4 bg-white shadow-md\">\n    <div class=\"text-lg font-semibold text-gray-800\">\n      {{ greeting }}\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport type { AdminForthResourceColumnCommon, AdminForthResourceCommon, AdminUser } from '@/types/Common';\nimport { callApi } from '@/utils';\nimport { ref, onMounted } from 'vue';\nimport adminforth from '@/adminforth';\n\nconst greeting: Ref<string> = ref('');\n\nonMounted(async () => {\n  try {\n    const data = await callApi({path: '/api/greeting', method: 'GET'});\n    greeting.value = data.text;\n  } catch (error) {\n    adminforth.alert({\n      message: `Error fetching data: ${error.message}`,\n      variant: 'danger',\n      timeout: 'unlimited'\n    });\n    return;\n  }\n})\n<\/script>\n"})}),"\n",(0,s.jsx)(e.p,{children:"And on the backend side you can use tr function to translate the string:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:'title="./index.ts"',children:"import type { IAdminUserExpressRequest, ITranslateExpressRequest } from 'adminforth';\nimport express from 'express';\n\n....\n\n  app.get(`${ADMIN_BASE_URL}/api/greeting`, \n    admin.express.authorize(\n      admin.express.translatable(\n        async (req: IAdminUserExpressRequest & ITranslateExpressRequest, res: express.Response) => {\n          res.json({\n            text: await req.tr('Welcome, {name}', 'customApis', { name: req.adminUser.username }),\n          });\n        }\n      )\n    )\n  );\n\n  // serve after you added all api\n  admin.discoverDatabases();\n  admin.express.serve(app)\n"})}),"\n",(0,s.jsxs)(e.p,{children:["As you can see we should use ",(0,s.jsx)(e.code,{children:"admin.express.translatable"})," middleware which will inject ",(0,s.jsx)(e.code,{children:"tr"})," function to the request object.\nFirst param is the string to translate, second is the category of the string (actually you can use any string here), and the third is the variables object."]}),"\n",(0,s.jsxs)(e.p,{children:["If you don't use params, you can use ",(0,s.jsx)(e.code,{children:"tr"})," without third param:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"{\n  text: await tr('Welcome, dear user', 'customApis'),\n}\n"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["\ud83d\udd04 ",(0,s.jsx)(e.strong,{children:"Fallback Behavior"}),": The ",(0,s.jsx)(e.code,{children:"tr"})," function automatically handles fallbacks when translations are missing. It follows this chain: ",(0,s.jsx)(e.code,{children:"requested language"})," \u2192 ",(0,s.jsx)(e.code,{children:"primaryLanguage"})," \u2192 ",(0,s.jsx)(e.code,{children:"English"}),". This ensures users always see content in a language they can understand, even if specific translations are missing."]}),"\n"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["\ud83d\ude45\u200d\u2642\ufe0f Temporary limitation: For now all translations strings for backend (adminforth internal and for from custom APIs)\nappear in Translations resource and table only after they are used. So greeting string will appear in the Translations table only after the first request to the API which reaches the ",(0,s.jsx)(e.code,{children:"tr"})," function call.\nSo to collect all translations you should use your app for some time and make sure all strings are used at\nIn future we plan to add backend strings collection in same way like frontend strings are collected."]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"pluralisation-in-backend-translations",children:"Pluralisation in backend translations"}),"\n",(0,s.jsx)(e.p,{children:"In same way you can use pluralisation in backend translations:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:'title="./index.ts"',children:"await req.tr('{count} apartment last 7 days | {count} apartments last 7 days', 'customApis', { count: totalAparts }, totalAparts) \n"})}),"\n",(0,s.jsxs)(e.p,{children:["Please pay attention that you should pass ",(0,s.jsx)(e.code,{children:"totalAparts"})," as last argument to ",(0,s.jsx)(e.code,{children:"tr"})," function."]}),"\n",(0,s.jsx)(e.p,{children:"If you don't have parameters, you can pass empty object as 3rd argument:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:'title="./index.ts"',children:"await req.tr('Apartment last 7 days | Apartments last 7 days', 'customApis', {}, totalAparts) \n"})}),"\n",(0,s.jsx)(e.p,{children:"Pluralisation rules are the same as in frontend"}),"\n",(0,s.jsx)(e.h2,{id:"translating-messages-within-bulk-action",children:"Translating messages within bulk action"}),"\n",(0,s.jsxs)(e.p,{children:["Label and confirm strings of bulk actions are already translated by AdminForth, but\n",(0,s.jsx)(e.code,{children:"succesMessage"})," returned by action function should be translated manually because of the dynamic nature of the message."]}),"\n",(0,s.jsxs)(e.p,{children:["Let's rework the bulk action from ",(0,s.jsx)(e.a,{href:"/docs/tutorial/Customization/Actions/#custom-bulk-actions",children:"bulkActions example"})," to use translations:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:'title="./resources/apartments.ts"',children:"import { AdminUser } from 'adminforth';\nimport { admin } from '../index';\n\n{\n  ...\n  resourceId: 'aparts',\n     ...\n     options: {\n        bulkActions: [\n          {\n            label: 'Mark as listed',\n            icon: 'flowbite:eye-solid',\n            // if optional `confirm` is provided, user will be asked to confirm action\n            confirm: 'Are you sure you want to mark all selected apartments as listed?',\n            action: function ({selectedIds, adminUser }: {selectedIds: any[], adminUser: AdminUser }) {\n              const stmt = admin.resource('aparts').dataConnector.client.prepare(`UPDATE apartments SET listed = 1 WHERE id IN (${selectedIds.map(() => '?').join(',')})`);\n              stmt.run(...selectedIds);\n//diff-remove\n              return { ok: true, error: false, successMessage: `Marked ${selectedIds.length} apartments as listed` };\n//diff-add\n              return { ok: true, error: false, successMessage: await tr('Marked {count} apartments as listed', 'apartments', { count:   selectedIds.length }) };\n            },\n          }\n        ],\n      }\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"translating-external-application",children:"Translating external application"}),"\n",(0,s.jsxs)(e.p,{children:["You can use this module not only to translate admin area of your application but also to translate other parts like SEO-facing or user-facing services.\nThis will allow you to reuse the same functionality and AI completion adapters for all your translations and manage them in one place.\nFor example in this app we will consider translating a Nuxt.js SEO-centric frontend which we want to translate with ",(0,s.jsx)(e.a,{href:"https://i18n.nuxtjs.org/",children:"nuxt i18n"}),"."]}),"\n",(0,s.jsxs)(e.p,{children:["To do it you need to use 2 exposed methods from the plugin: ",(0,s.jsx)(e.code,{children:"feedCategoryTranslations"})," and ",(0,s.jsx)(e.code,{children:"getCategoryTranslations"}),"."]}),"\n",(0,s.jsxs)(e.p,{children:["First of all, at some step, e.g. CI pipeline you should get all translation strings from your external app and feed them an own rest API like ",(0,s.jsx)(e.code,{children:"'/feed-nuxt-strings'"}),", this API might look like this"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:'title="./index.ts"',children:"  app.post(`${ADMIN_BASE_URL}/feed-nuxt-strings`, \n    async (req, res) => {\n      // req.body will be an array of objects like:\n      // [{\n      //    path: 'Login',\n      //    file: 'src/views/Login.vue:35',\n      // }]\n\n      const messagesForFeed = req.body.missingKeys.map((mk: any) => {\n        return {\n          en_string: mk.path,\n          source: mk.file,\n        };\n      });\n\n      admin.getPluginByClassName<I18nPlugin>('I18nPlugin').feedCategoryTranslations(\n        messagesForFeed,\n        'seoApp'\n      )\n\n      res.json({\n        ok: true\n      });\n    }\n  );\n\n"})}),"\n",(0,s.jsxs)(e.p,{children:["For extracting i18n messages we use ",(0,s.jsx)(e.a,{href:"https://github.com/Spittal/vue-i18n-extract",children:"vue-i18n-extract"})," package.\nYou can add extract command to ",(0,s.jsx)(e.code,{children:"package.json"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "scripts": {\n    "i18n:extract": "echo \'{}\' > i18n-empty.json && vue-i18n-extract report --vueFiles \'./?(pages|components)/**/*.?(js|vue)\' --output ./i18n-messages.json --languageFiles \'i18n-empty.json\' --add",\n    "i18n:feed-to-local-backoffice": "npm run i18n:extract && curl -X POST -H \'Content-Type: application/json\' -d @i18n-messages.json http://localhost:3000/feed-nuxt-strings"\n  }\n}\n'})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:["For plain non-nuxt apps ",(0,s.jsx)(e.code,{children:"--vueFiles './?(pages|components)/**/*.?(js|vue)'"})," should be replaced with ",(0,s.jsx)(e.code,{children:"--vueFiles './src/**/*.?(js|vue)'"})]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["Make sure to replace ",(0,s.jsx)(e.code,{children:"localhost:3000"})," with AdminForth API URL."]}),"\n",(0,s.jsxs)(e.p,{children:["So locally you can run ",(0,s.jsx)(e.code,{children:"npm run i18n:feed-to-local-backoffice"})," to extract messages from your Nuxt.js app and feed them to AdminForth."]}),"\n",(0,s.jsxs)(e.p,{children:["Next part. When we will need translations on the nuxt instance, we should use ",(0,s.jsx)(e.a,{href:"https://vue-i18n.intlify.dev/guide/advanced/lazy",children:"vue-i18n's lazy loading feature"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",metastring:'title="./your-nuxt-app-source-file.ts"',children:"const { locale, setLocaleMessage, } = useI18n();\nconst { data: messages } = await useFetch(\n  useRuntimeConfig().public.adminUrl + `api/translations/?lang=${locale.value}`,\n  {\n    method: 'GET',\n  }\n);\nif (messages.value) {\n  setLocaleMessage(locale.value, messages.value);\n} else {\n  console.error('Translations or language data are missing.');\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"Here is how API for messages will look:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:'title="./index.ts"',children:"app.get(`${ADMIN_BASE_URL}/api/translations/`, \n  async (req, res) => {\n    const lang = req.query.lang as string;\n    const messages = await admin.getPluginByClassName<I18nPlugin>('I18nPlugin').getCategoryTranslations('seoApp', lang);\n    res.json(messages);\n  }\n);\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Also in ",(0,s.jsx)(e.code,{children:"nuxt.config.ts"})," you can set ",(0,s.jsx)(e.code,{children:"prefix_except_default"})," strategy and put it in ",(0,s.jsx)(e.code,{children:"i18n"})," config as this:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"  ...\n  i18n: {\n    locales: ['en', 'uk', 'ja', 'fr'],\n    defaultLocale: 'en',\n    strategy: 'prefix_except_default',\n    detectBrowserLanguage: false,\n  },\n  ...\n"})}),"\n",(0,s.jsx)(e.h4,{id:"feeding-messages-during-build-time",children:"Feeding messages during build time"}),"\n",(0,s.jsx)(e.p,{children:"For Dockerized pipelines you can feed messages when building the image in Docker build time:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dockerfile",children:'FROM node:22-alpine\nWORKDIR /app\nADD package.json /app\nADD package-lock.json /app\nRUN true | npm ci\nADD . /app\nRUN --mount=type=cache,target=/app/node_modules/.cache true | npm run build\n\n//diff-add\n# Run i18n extraction and API call\n//diff-add\nRUN npm run i18n:extract && \\\n//diff-add\n    curl -X POST -H \'Content-Type: application/json\' -d @i18n-messages.json http://adminforth:3000/bo/api/feed-nuxt-strings\n\nCMD ["node", ".output/server/index.mjs"]\nEXPOSE 3000\n'})}),"\n",(0,s.jsxs)(e.p,{children:["This assumes that ",(0,s.jsx)(e.code,{children:"http://adminforth:3000/"})," is the name of the Docker service running AdminForth."]}),"\n",(0,s.jsx)(e.p,{children:"This will work if you are building the image in the same Docker network as AdminForth. Otherwise you might need use absolute URL of the AdminForth instance."}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"\ud83d\udc46 The example method is just a stub, please make sure you not expose endpoint to public or add some simple authorization on it,\notherwise someone might flood you with dump translations requests."}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"get-language-names",children:"Get language names"}),"\n",(0,s.jsx)(e.p,{children:"Also you can use handy method to get language names in native and English form with emoji flags:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",metastring:'title="./api.ts"',children:"const languages = await admin.getPluginByClassName<I18nPlugin>('I18nPlugin').languagesList();\n"})}),"\n",(0,s.jsx)(e.p,{children:"Response will look like this:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'  "languages": [\n        {\n            "code": "en",\n            "nameOnNative": "English",\n            "nameEnglish": "English",\n            "emojiFlag": "\ud83c\uddfa\ud83c\uddf8"\n        },\n        {\n            "code": "uk",\n            "nameOnNative": "\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430",\n            "nameEnglish": "Ukrainian",\n            "emojiFlag": "\ud83c\uddfa\ud83c\udde6"\n        },\n        {\n            "code": "ar",\n            "nameOnNative": "\u0627\u0644\u0639\u0631\u0628\u064a\u0629",\n            "nameEnglish": "Arabic",\n            "emojiFlag": "\ud83c\udde6\ud83c\uddf7"\n        },\n'})}),"\n",(0,s.jsx)(e.h3,{id:"disable-translation-for-admin-external-app-only",children:"Disable translation for admin (external app only)"}),"\n",(0,s.jsxs)(e.p,{children:["If you want to use this plugin only for external app, and not backoffice, which is probably the case, you can disable translation for admin by setting ",(0,s.jsx)(e.code,{children:"externalAppOnly"})," to ",(0,s.jsx)(e.code,{children:"true"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",metastring:'title="./resources/translations.ts"',children:"    new I18nPlugin({\n    //diff-add\n      externalAppOnly: true,\n      supportedLanguages: ['en', 'uk', 'ja', 'fr'],\n      ...\n    }),\n"})})]})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},70881:(n,e,t)=>{t.d(e,{A:()=>a});const a=t.p+"assets/images/image-4-c661c73e502760f974b3f5475d9b02b4.png"},98168:(n,e,t)=>{t.d(e,{A:()=>a});const a=t.p+"assets/images/image-5-4c69d086630c29ec4861d97f7d2651fc.png"},28453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>o});var a=t(96540);const s={},i=a.createContext(s);function r(n){const e=a.useContext(i);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),a.createElement(i.Provider,{value:e},n.children)}}}]);