"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[6914],{1906:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var s=t(4848),r=t(8453);const i={},o="Hello world app",a={id:"tutorial/helloWorld",title:"Hello world app",description:"No water. Pure code to get started ASAP.",source:"@site/docs/tutorial/01-helloWorld.md",sourceDirName:"tutorial",slug:"/tutorial/helloWorld",permalink:"/docs/tutorial/helloWorld",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/docs/tutorial/gettingStarted"},next:{title:"Glossary",permalink:"/docs/tutorial/glossary"}},l={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Env variables",id:"env-variables",level:2},{value:"Database creation",id:"database-creation",level:2},{value:"Setting up adminforth",id:"setting-up-adminforth",level:2},{value:"Possible configuration options",id:"possible-configuration-options",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"hello-world-app",children:"Hello world app"}),"\n",(0,s.jsx)(n.p,{children:"No water. Pure code to get started ASAP."}),"\n",(0,s.jsx)(n.p,{children:"Here we create database with users and posts tables and admin panel for it."}),"\n",(0,s.jsx)(n.p,{children:"Users table will be used to store a credentials for login into admin panel itself."}),"\n",(0,s.jsxs)(n.p,{children:["When back-office user creates a new post it will be automatically assigned using ",(0,s.jsx)(n.code,{children:"authorId"})," to the user who created it."]}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.p,{children:["We will use Node v20 for this demo. If you have other Node versions, we recommend using ",(0,s.jsx)(n.a,{href:"https://github.com/nvm-sh/nvm?tab=readme-ov-file#install--update-script",children:"NVM"})," to switch them easily:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nvm install 20\nnvm alias default 20\nnvm use 20\n"})}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir af-hello\ncd af-hello\nnpm init -y\nnpm install adminforth express @types/express typescript tsx @types/node --save-dev\nnpx --yes tsc --init --module ESNext --target ESNext\n"})}),"\n",(0,s.jsx)(n.h2,{id:"env-variables",children:"Env variables"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:".env"})," file in root directory and put following content:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="./.env"',children:"DATABASE_FILE=../db.sqlite\nDATABASE_FILE_URL=file:${DATABASE_FILE}\nADMINFORTH_SECRET=123\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"\u261d\ufe0f Production best practices:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Most likely you not need ",(0,s.jsx)(n.code,{children:".env"})," file at all, instead you should use environment variables (from Docker, Kubernetes, Operating System, etc.)"]}),"\n",(0,s.jsxs)(n.li,{children:["You should set ",(0,s.jsx)(n.code,{children:"NODE_ENV"})," to ",(0,s.jsx)(n.code,{children:"production"})," so it will not waste extra resources on hot reload."]}),"\n",(0,s.jsxs)(n.li,{children:["You should generate very unique value ",(0,s.jsx)(n.code,{children:"ADMINFORTH_SECRET"})," and store it in Vault or other secure place."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["\u261d\ufe0f If you are using Git, obviously you should make sure you will never commit ",(0,s.jsx)(n.code,{children:".env"})," file to the repository, because\nit might contain your own sensitive secrets. So to follow best practices, we recommend to add ",(0,s.jsx)(n.code,{children:".env"})," into ",(0,s.jsx)(n.code,{children:".gitignore"})," and create ",(0,s.jsx)(n.code,{children:".env.sample"})," as template for other repository users with demo data."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"database-creation",children:"Database creation"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"\u261d\ufe0f For demo purposes we will create a database using Prisma and SQLite.\nYou can also create it using any other favorite tool or ORM and skip this step."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"./schema.prisma"})," and put next content there:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",metastring:'title="./schema.prisma"',children:'generator client {\n  provider = "prisma-client-js"\n}\n\ndatasource db {\n  provider = "sqlite"\n  url      = env("DATABASE_FILE_URL")\n}\n\nmodel User {\n  id           String     @id\n  createdAt    DateTime \n  email        String   @unique\n  role         String     \n  passwordHash String\n  posts        Post[]\n}\n\nmodel Post {\n  id        String     @id\n  createdAt DateTime \n  title     String\n  content   String?\n  published Boolean  \n  author    User?    @relation(fields: [authorId], references: [id])\n  authorId  String?\n}\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Create database using ",(0,s.jsx)(n.code,{children:"prisma migrate"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npx --yes prisma migrate dev --name init\n"})}),"\n",(0,s.jsx)(n.h2,{id:"setting-up-adminforth",children:"Setting up adminforth"}),"\n",(0,s.jsxs)(n.p,{children:["Open ",(0,s.jsx)(n.code,{children:"package.json"}),", set ",(0,s.jsx)(n.code,{children:"type"})," to ",(0,s.jsx)(n.code,{children:"module"})," and add ",(0,s.jsx)(n.code,{children:"start"})," script:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="./package.json"',children:'{\n  ...\n//diff-add\n  "type": "module",\n  "scripts": {\n    ...\n//diff-add\n    "start": "NODE_ENV=development tsx watch --env-file=.env index.ts",\n  },\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"index.ts"})," file in root directory with following content:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="./index.ts"',children:"import express from 'express';\nimport AdminForth, { AdminForthDataTypes, AdminUser, Filters } from 'adminforth';\n\nexport const admin = new AdminForth({\n  baseUrl: '',\n  auth: {\n    usersResourceId: 'users',  // resource to get user during login\n    usernameField: 'email',  // field where username is stored, should exist in resource\n    passwordHashField: 'passwordHash',\n  },\n  customization: {\n    brandName: 'My Admin',\n    datesFormat: 'D MMM YY',\n    timeFormat: 'HH:mm:ss',\n    emptyFieldPlaceholder: '-',\n  },\n  dataSources: [{\n    id: 'maindb',\n    url: `sqlite://${process.env.DATABASE_FILE}`,\n  }],\n  resources: [\n    {\n      dataSource: 'maindb',\n      table: 'user',\n      resourceId: 'users',\n      label: 'Users',\n      recordLabel: (r: any) => `\ud83d\udc64 ${r.email}`,\n      columns: [\n        {\n          name: 'id',\n          primaryKey: true,\n          fillOnCreate: () => Math.random().toString(36).substring(7),\n          showIn: ['list', 'filter', 'show'],\n        },\n        {\n          name: 'email',\n          required: true,\n          isUnique: true,\n          enforceLowerCase: true,\n          validation: [\n            AdminForth.Utils.EMAIL,\n          ]\n        },\n        {\n          name: 'createdAt',\n          type: AdminForthDataTypes.DATETIME,\n          showIn: ['list', 'filter', 'show'],\n          fillOnCreate: () => (new Date()).toISOString(),\n        },\n        {\n          name: 'role',\n          enum: [\n            { value: 'superadmin', label: 'Super Admin' },\n            { value: 'user', label: 'User' },\n          ]\n        },\n        {\n          name: 'password',\n          virtual: true,\n          required: { create: true },\n          editingNote: { edit: 'Leave empty to keep password unchanged' },\n          minLength: 8,\n          type: AdminForthDataTypes.STRING,\n          showIn: ['create', 'edit'],\n          masked: true,\n        },\n        { name: 'passwordHash', backendOnly: true, showIn: [] }\n      ],\n    },\n    {\n      table: 'post',\n      resourceId: 'posts',\n      dataSource: 'maindb',\n      label: 'Posts',\n      recordLabel: (r: any) => `\ud83d\udcdd ${r.title}`,\n      columns: [\n        {\n          name: 'id',\n          primaryKey: true,\n          fillOnCreate: () => Math.random().toString(36).substring(7),\n          showIn: ['list', 'filter', 'show'],\n        },\n        {\n          name: 'title',\n          type: AdminForthDataTypes.STRING,\n          required: true,\n          showIn: ['list', 'create', 'edit', 'filter', 'show'],\n          maxLength: 255,\n          minLength: 3,\n        },\n        {\n          name: 'content',\n          showIn: ['list', 'create', 'edit', 'filter', 'show'],\n        },\n        {\n          name: 'createdAt',\n          showIn: ['list', 'filter', 'show',],\n          fillOnCreate: () => (new Date()).toISOString(),\n        },\n        {\n          name: 'published',\n          required: true,\n        },\n        {\n          name: 'authorId',\n          foreignResource: {\n            resourceId: 'users',\n          },\n          showIn: ['list', 'filter', 'show'],\n          fillOnCreate: ({ adminUser }: { adminUser: AdminUser }) => {\n            return adminUser.dbUser.id;\n          }\n        }\n      ],\n    }\n  ],\n  menu: [\n    {\n      label: 'Core',\n      icon: 'flowbite:brain-solid', // any icon from iconify supported in format <setname>:<icon>, e.g. from here https://icon-sets.iconify.design/flowbite/\n      open: true,\n      children: [\n        {\n          homepage: true,\n          label: 'Posts',\n          icon: 'flowbite:home-solid',\n          resourceId: 'posts',\n        },\n      ]\n    },\n    { type: 'gap' },\n    { type: 'divider' },\n    { type: 'heading', label: 'SYSTEM' },\n    {\n      label: 'Users',\n      icon: 'flowbite:user-solid',\n      resourceId: 'users',\n    }\n  ],\n});\n\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  // if script is executed directly e.g. node index.ts or npm start\n\n  const app = express()\n  app.use(express.json());\n  const port = 3500;\n\n  // needed to compile SPA. Call it here or from a build script e.g. in Docker build time to reduce downtime\n  await admin.bundleNow({ hotReload: process.env.NODE_ENV === 'development' });\n  console.log('Bundling AdminForth done. For faster serving consider calling bundleNow() from a build script.');\n\n  // serve after you added all api\n  admin.express.serve(app)\n\n  admin.discoverDatabases().then(async () => {\n    if (!await admin.resource('users').get([Filters.EQ('email', 'adminforth')])) {\n      await admin.resource('users').create({\n        email: 'adminforth',\n        passwordHash: await AdminForth.Utils.generatePasswordHash('adminforth'),\n        role: 'superadmin',\n      });\n    }\n  });\n\n  app.listen(port, () => {\n    console.log(`\\n\u26a1 AdminForth is available at http://localhost:${port}\\n`)\n  });\n}\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["\u261d\ufe0f For simplicity we defined whole configuration in one file. Normally once configuration grows you should\nmove each resource configuration to separate file and organize them to folder and import them in ",(0,s.jsx)(n.code,{children:"index.ts"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Now you can run your app:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm start\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Open ",(0,s.jsx)(n.a,{href:"http://localhost:3500",children:"http://localhost:3500"})," in your browser and login with credentials ",(0,s.jsx)(n.code,{children:"adminforth"})," / ",(0,s.jsx)(n.code,{children:"adminforth"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"alt text",src:t(8332).A+"",width:"2428",height:"1932"})}),"\n",(0,s.jsx)(n.h2,{id:"possible-configuration-options",children:"Possible configuration options"}),"\n",(0,s.jsxs)(n.p,{children:["Check ",(0,s.jsx)(n.a,{href:"/docs/api/types/AdminForthConfig/type-aliases/AdminForthConfig",children:"AdminForthConfig"})," for all possible options."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8332:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/localhost_3500_login-22b59511349c51948267c9a4080e4d87.png"},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);