"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[6594],{61070:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var r=t(74848),s=t(28453);const i={},o="Virtual columns",a={id:"tutorial/Customization/virtualColumns",title:"Virtual columns",description:"Virtual column for show and list",source:"@site/docs/tutorial/03-Customization/03-virtualColumns.md",sourceDirName:"tutorial/03-Customization",slug:"/tutorial/Customization/virtualColumns",permalink:"/docs/tutorial/Customization/virtualColumns",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Custom record field rendering",permalink:"/docs/tutorial/Customization/customFieldRendering"},next:{title:"Hooks",permalink:"/docs/tutorial/Customization/hooks"}},l={},d=[{value:"Virtual column for show and list",id:"virtual-column-for-show-and-list",level:2},{value:"Virtual columns for filtering.",id:"virtual-columns-for-filtering",level:2},{value:"Custom SQL queries with <code>insecureRawSQL</code>",id:"custom-sql-queries-with-insecurerawsql",level:3},{value:"Custom Mongo queries with <code>insecureRawNoSQL</code>",id:"custom-mongo-queries-with-insecurerawnosql",level:3},{value:"Virtual columns for editing.",id:"virtual-columns-for-editing",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"virtual-columns",children:"Virtual columns"}),"\n",(0,r.jsx)(n.h2,{id:"virtual-column-for-show-and-list",children:"Virtual column for show and list"}),"\n",(0,r.jsxs)(n.p,{children:["Sometimes you need to visualize custom columns which do not exist in database.\nFor doing this you can use ",(0,r.jsx)(n.code,{children:"virtual"})," columns."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"title='./resources/apartments.ts'",children:"\n//diff-add\nimport { AdminForthResourcePages } from 'adminforth';\n\n...\nresourceId: 'aparts',\ncolumns: [\n  ...\n//diff-add\n  {\n//diff-add\n    name: 'Country Flag',\n//diff-add\n    label: 'Country Flag',\n//diff-add\n    type: AdminForthDataTypes.STRING,\n//diff-add\n    virtual: true,\n//diff-add\n    showIn: {\n//diff-add\n      [AdminForthResourcePages.edit]: false,\n//diff-add\n      [AdminForthResourcePages.create]: false,\n//diff-add\n      [AdminForthResourcePages.filter]: false,\n//diff-add\n    },\n//diff-add\n    components: {\n//diff-add\n      show: '@@/CountryFlag.vue',\n//diff-add\n      list: '@@/CountryFlag.vue',\n//diff-add\n    },\n//diff-add\n  }\n  ...\n]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This field will be displayed in show and list views with custom component ",(0,r.jsx)(n.code,{children:"CountryFlag.vue"}),".\nCreate file ",(0,r.jsx)(n.code,{children:"CountryFlag.vue"})," in ",(0,r.jsx)(n.code,{children:"custom"})," folder of your project:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",metastring:'title="./custom/CountryFlag.vue"',children:"<template>\n   {{ getFlagEmojiFromIso(record.country) }}\n</template>\n  \n<script setup lang=\"ts\">\n import type { AdminForthResourceColumnCommon, AdminForthResourceCommon, AdminUser } from '@/types/Common';\n\n const props = defineProps<{\n     column: AdminForthResourceColumnCommon;\n     record: any;\n     meta: any;\n     resource: AdminForthResourceCommon;\n     adminUser: AdminUser\n }>();\n   \n  function getFlagEmojiFromIso(iso) {\n     return iso?.toUpperCase()?.replace(/./g, (char) => String.fromCodePoint(char.charCodeAt(0) + 127397));\n  }\n<\/script>\n"})}),"\n",(0,r.jsx)(n.p,{children:"Here is how it looks:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"alt text",src:t(58587).A+"",width:"3700",height:"1932"})}),"\n",(0,r.jsx)(n.h2,{id:"virtual-columns-for-filtering",children:"Virtual columns for filtering."}),"\n",(0,r.jsxs)(n.p,{children:['Virtual column can also be used as a shorthand for a complex filtering.\nLets say we want to divide apartments into two types: "base" ones and "luxury" and then allow admins to filter apartments by this category. Condition for being a "luxury" apartment is either having more then 80 sq.m area or costing more then 100k.\nOne way to do it is to actually add a real column to a table and then fill it every time new apartment is added. A more simple way is to add a virtual column and then use ',(0,r.jsx)(n.code,{children:"list.beforeDatasourceRequest"})," hook to replace filtering on this column with desired one.\nFor this purpose following changes will be required for apartments config:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"title='./resources/apartments.ts'",children:"import { Filters } from \"adminforth\";\n...\nresourceId: 'aparts',\n...\nhooks: {\n...\n  list: {\n    beforeDatasourceRequest: async ({ query }: { query: any }) => {\n      query.filters = query.filters.map((filter: any) => {\n        // replace apartment_type filter with complex one\n        if (filter.field === 'apartment_type') {\n          if (filter.value === 'luxury') {\n            return Filters.OR(Filters.GTE('square_meter', 80), Filters.GTE('price', 100000));\n          }\n\n          // filter for \"base\" apartment as default\n          return Filters.AND(Filters.LT('square_meter', 80), Filters.LT('price', 100000));\n        }\n\n        return filter;\n      });\n      return { ok: true, error: \"\" };\n    },\n    ...\n  },\n...\n},\n...\ncolumns: [\n  ...\n  {\n    name: \"apartment_type\",\n    virtual: true,\n    showIn: { all: false, filter: true }, // hide it from display everywhere, except filter page\n    enum: [\n      {\n        value: 'base',\n        label: 'Base',\n      },\n      {\n        value: 'luxury',\n        label: 'Luxury'\n      },\n    ],\n    filterOptions: {\n      multiselect: false, // allow to only select one category when filtering\n    },\n  },\n  ...\n]\n"})}),"\n",(0,r.jsx)(n.p,{children:'This way, when admin selects, for example, "Luxury" option for "Apartment Type" filter, it will be replace with a more complex "or" filter.'}),"\n",(0,r.jsxs)(n.h3,{id:"custom-sql-queries-with-insecurerawsql",children:["Custom SQL queries with ",(0,r.jsx)(n.code,{children:"insecureRawSQL"})]}),"\n",(0,r.jsxs)(n.p,{children:["Rarely the sec of Filters supported by AdminForth is not enough for your needs.\nIn this case you can use ",(0,r.jsx)(n.code,{children:"insecureRawSQL"})," to write your own part of where clause."]}),"\n",(0,r.jsxs)(n.p,{children:["However the vital concern that the SQL passed to DB as is, so if you substitute any user inputs it will not be escaped and can lead to SQL injection. To miticate the issue we recommend using ",(0,r.jsx)(n.code,{children:"sqlstring"})," package which will escape the inputs for you."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm i sqlstring\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then you can use it like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"title='./resources/apartments.ts'",children:"import sqlstring from 'sqlstring';\n...\n\n  beforeDatasourceRequest: async ({ query }: { query: any }) => {\n    query.filters = query.filters.map((filter: any) => {\n      // replace apartment_type filter with complex one\n      if (filter.field === 'some_json_b_field') {\n        return {\n          // check if some_json_b_field->'$.some_field' is equal to filter.value\n          insecureRawSQL: `some_json_b_field->'$.some_field' = ${sqlstring.escape(filter.value)}`,\n        }\n      }\n\n      return filter;\n    });\n    return { ok: true, error: \"\" };\n  }\n"})}),"\n",(0,r.jsx)(n.p,{children:"This example will allow to search for some nested field in JSONB column, however you can use any SQL query here."}),"\n",(0,r.jsxs)(n.h3,{id:"custom-mongo-queries-with-insecurerawnosql",children:["Custom Mongo queries with ",(0,r.jsx)(n.code,{children:"insecureRawNoSQL"})]}),"\n",(0,r.jsxs)(n.p,{children:["For MongoDB data sources, you can inject a raw Mongo filter object via ",(0,r.jsx)(n.code,{children:"insecureRawNoSQL"}),". This is useful when the built-in filters are not enough or you need dot-notation and operators not covered by AdminForth helpers."]}),"\n",(0,r.jsxs)(n.p,{children:["Important: The object you provide is sent directly to MongoDB. Validate and sanitize any user inputs to prevent abuse of operators like ",(0,r.jsx)(n.code,{children:"$where"}),", ",(0,r.jsx)(n.code,{children:"$regex"}),", etc."]}),"\n",(0,r.jsx)(n.p,{children:"Example \u2014 filter by nested field using dot-notation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"title='./resources/apartments.ts'",children:"...\nhooks: {\n  list: {\n    beforeDatasourceRequest: async ({ query, body }: { query: any, body: any }) => {\n      // Add raw Mongo filter: meta.is_active must equal body.is_active\n      query.filters.push({\n        insecureRawNoSQL: { 'meta.is_active': body.is_active },\n      });\n      return { ok: true, error: '' };\n    },\n  },\n},\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can combine it with other AdminForth filters using AND/OR:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Filters } from 'adminforth';\n\nquery.filters = [\n  Filters.AND(\n    { insecureRawNoSQL: { 'meta.is_active': true } },\n    Filters.EQ('status', 'active'),\n  )\n];\n"})}),"\n",(0,r.jsx)(n.p,{children:"Notes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"insecureRawNoSQL"})," is Mongo-only. For SQL databases, use ",(0,r.jsx)(n.code,{children:"insecureRawSQL"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["If both ",(0,r.jsx)(n.code,{children:"field"}),"/",(0,r.jsx)(n.code,{children:"operator"}),"/",(0,r.jsx)(n.code,{children:"value"})," and ",(0,r.jsx)(n.code,{children:"insecureRawNoSQL"})," are present in one filter object, validation will fail."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"insecureRawSQL"})," is ignored by the Mongo connector."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"virtual-columns-for-editing",children:"Virtual columns for editing."}),"\n",(0,r.jsxs)(n.p,{children:["Another usecase of ",(0,r.jsx)(n.code,{children:"virtual"})," columns is to add new fields in edit and create view. In the ",(0,r.jsx)(n.a,{href:"/docs/tutorial/gettingStarted",children:"Getting started"})," we used this feature to add ",(0,r.jsx)(n.code,{children:"password"})," field to the ",(0,r.jsx)(n.code,{children:"adminuser"})," resource.\nThing is that password itself can't be stored in the database, but instead their hash is stored.\nSo we need to add ",(0,r.jsx)(n.code,{children:"password"})," field to the ",(0,r.jsx)(n.code,{children:"adminuser"})," resource and make it ",(0,r.jsx)(n.code,{children:"virtual"})," so it will not be stored in the database."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="./resources/adminuser.ts"',children:"...\nresourceId: 'adminuser',\n...\ncolumns: [\n  ...\n  {\n    name: 'password',\n    virtual: true,  // field will not be persisted into db\n    required: { create: true }, // make required only on create page\n    editingNote: { edit: 'Leave empty to keep password unchanged' },\n    minLength: 8,\n    type: AdminForthDataTypes.STRING,\n    showIn: { // to show field only on create and edit pages\n      show: false,\n      list: false,\n      filter: false,\n    },\n    masked: true, // to show stars in input field\n  }\n  ...\n]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now to handle virtual ",(0,r.jsx)(n.code,{children:"password"})," field we use hooks:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="./resources/adminuser.ts"',children:"  hooks: {\n    create: {\n      beforeSave: async ({ record, adminUser, resource }: { record: any, adminUser: AdminUser, resource: AdminForthResource }) => {\n        record.password_hash = await AdminForth.Utils.generatePasswordHash(record.password);\n        return { ok: true };\n      }\n    },\n    edit: {\n      beforeSave: async ({ updates, adminUser, resource }: { updates: any, adminUser: AdminUser, resource: AdminForthResource }) => {\n        if (updates.password) {\n          updates.password_hash = await AdminForth.Utils.generatePasswordHash(updates.password);\n        }\n        return { ok: true }\n      },\n    },\n  },\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Hook still has access to the virtual field ",(0,r.jsx)(n.code,{children:"updates.password"}),", and we use built-in AdminForth hasher to hash password and write it into\n",(0,r.jsx)(n.code,{children:"password_hash"})," field which exists in database."]}),"\n",(0,r.jsxs)(n.p,{children:["After hook is executed, ",(0,r.jsx)(n.code,{children:"updates.password"})," will be removed from the record since it is virtual, so password itself will not be saved to the database."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},58587:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/Virtual columns-6648305a00db72e9b165fa226eda0282.png"},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(96540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);