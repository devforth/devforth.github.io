"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[2526],{9336:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>t,toc:()=>l});var t=a(4697),i=a(4848),r=a(8453);const o={slug:"dynamic-strings-translation",title:"How to translate dynamic strings in AdminForth API",authors:"ivanb",tags:["keycloak","authentication"],description:"Simple example of how to translate dynamic strings from database in AdminForth API"},s="Issue one - you need to call req.tr for each string before translating it in Admin",d={authorsImageUrls:[void 0]},l=[];function c(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:["When you are using ",(0,i.jsx)(e.a,{href:"https://adminforth.dev/docs/tutorial/Plugins/i18n/#translating-external-application",children:"AdminForth i18n plugin for external Apps translation"})," you might face a case when you need to translate some data stored in your database which potentially can be changed in future."]}),"\n",(0,i.jsx)(e.p,{children:"Let's consider simple example where we have a Page resource"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:'import { AdminForthResourceInput } from "adminforth";\n\nexport default {\n  dataSource: "maindb",\n  table: "pages",\n  resourceId: "pages",\n  label: "Pages",\n  columns: [\n    {\n      name: "url",\n      primaryKey: true,\n      showIn: { all: false },\n    },\n    {\n      name: "meta_title",\n      label: "Meta Title",\n      type: "string",\n      showIn: { all: true },\n    },\n    {\n      name: "meta_desc",\n      label: "Meta Description",\n      type: "string",\n      showIn: { all: true },\n    },\n  ]\n} as AdminForthResourceInput;\n'})}),"\n",(0,i.jsx)(e.p,{children:"You might have this page and return it in your API for nuxt:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:'app.get(`${admin.config.baseUrl}/api/get_page`,\n    async (req:any, res: Response): Promise<void> => {\n      const pageUrl = req.query.pageUrl;\n      if (!pageUrl) {\n        res.status(400).json({ error: "pageUrl is required" });\n        return;\n      }\n      const page = await admin.resource("pages").get([Filters.EQ("url", pageUrl)]);\n      if (!page) {\n        res.status(404).json({ error: `Page not found ${pageUrl}` });\n        return;\n      }\n      res.json({\n        meta_title: page.meta_title,\n        meta_desc: page.meta_desc,\n      });\n    }\n  ) \n);\n'})}),"\n",(0,i.jsxs)(e.p,{children:["Now you want to translate page meta title and meta description. You can do this by using ",(0,i.jsx)(e.code,{children:"i18n"})," plugin for AdminForth."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:'import { AdminForth } from "adminforth";\n\nexport const SEO_PAGE_CATEGORY = "seo_page_config";\n\napp.get(`${admin.config.baseUrl}/api/get_page`,\\\n//diff-add\n admin.express.translatable(\n    async (req:any, res: Response): Promise<void> => {\n      const pageUrl = req.query.pageUrl;\n      if (!pageUrl) {\n        res.status(400).json({ error: "pageUrl is required" });\n        return;\n      }\n      const page = await admin.resource("pages").get([Filters.EQ("url", pageUrl)]);\n      if (!page) {\n        res.status(404).json({ error: `Page not found ${pageUrl}` });\n        return;\n      }\n\n//diff-add\n      const translateKeys = [ "meta_title", "meta_desc", ];\n//diff-add\n      const [meta_title, meta_desc] = \n//diff-add\n          await Promise.all(translateKeys.map((key: string) => req.tr(page[key], SEO_PAGE_CATEGORY)));\n        \n\n      res.json({\n  //diff-remove\n        meta_title: page.meta_title,\n  //diff-add\n        meta_title,\n  //diff-remove\n        meta_desc: page.meta_desc,\n  //diff-add\n        meta_desc,\n      });\n    }\n//diff-add\n  ) \n);\n'})}),"\n",(0,i.jsx)(e.p,{children:"Looks straightforward, but here are 2 issues:"}),"\n",(0,i.jsxs)(e.p,{children:["Since translation strings are created only when first time you call ",(0,i.jsx)(e.code,{children:"req.tr"})," function, you need to ensure you will call this API for all your pages (in all envs e.g. local, dev, staging, prod ), this might be not convinient - you have to call this API, then go to translation page and translate it with bulk action LLM or manually, but you might forget one page or so."]}),"\n",(0,i.jsx)(e.p,{children:"To fix this we suggest next, go to Page resource and add next function on top level:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:'//diff-remove\nimport { AdminForthResourceInput } from "adminforth";\n//diff-add\nimport AdminForth, { AdminForthResourceInput, Filters, IAdminForth } from "adminforth";\n//diff-add\nimport I18nPlugin from "@adminforth/i18n/index.js";\n\n//diff-add\nimport { SEO_PAGE_CATEGORY } from "../api.ts";\n\n//diff-add\nexport async function feedAllPageTranslations(adminforth: IAdminForth) {\n//diff-add\n  const i18nPlugin = adminforth.getPluginByClassName<I18nPlugin>(\'I18nPlugin\');\n//diff-add\n  const pages = await adminforth.resource(\'pages\').list([]);\n//diff-add\n  await Promise.all(\n    //diff-add\n    pages.map(async (page: any) => {\n  //diff-add\n      await Promise.all(\n  //diff-add\n      [\'meta_title\', \'meta_desc\'].map(async (key) => {\n  //diff-add\n        if (page[key]) {\n  //diff-add\n          await i18nPlugin.feedCategoryTranslations(\n    //diff-add\n            [{ en_string: page[key], source: `pages.${page.url}.${key}` }], SEO_PAGE_CATEGORY\n    //diff-add\n          );\n  //diff-add\n        }\n//diff-add\n      })\n//diff-add\n    );\n//diff-add\n  })\n//diff-add\n  );\n//diff-add\n}\n\nexport default {\n  dataSource: "maindb",\n  table: "pages",\n  resourceId: "pages",\n  ...\n'})}),"\n",(0,i.jsxs)(e.p,{children:["This function will iterate all pages and call ",(0,i.jsx)(e.code,{children:"feedCategoryTranslations"})," function for each page and each key. This will create translation strings in your database for each page and each key. If translation objects already exist, it will skip them (",(0,i.jsx)(e.strong,{children:"will not"})," create duplicates and ",(0,i.jsx)(e.strong,{children:"will not"})," overwrite translations)."]}),"\n",(0,i.jsx)(e.p,{children:"Now we need to call this function in hooks:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:'export default {\n  dataSource: "maindb",\n  table: "pages",\n  resourceId: "pages",\n  label: "Pages",\n//diff-add\n  hooks: {\n//diff-add\n    create: {\n//diff-add\n      afterSave: async ({ record, adminforth }: { record: Record<string, string>, adminforth: IAdminForth }) => {\n//diff-add\n        feedAllPageTranslations(adminforth);\n//diff-add\n        return { ok: true };\n//diff-add\n      },\n//diff-add\n    },\n//diff-add\n    edit: {\n//diff-add\n      afterSave: async ({ oldRecord, updates, adminforth }: { oldRecord: Record<string, string>, updates: Record<string, string>, adminforth: IAdminForth }) => {\n//diff-add\n        feedAllPageTranslations(adminforth);\n//diff-add\n        return { ok: true }; \n//diff-add\n      },\n//diff-add\n    },\n  },  \n  columns: [\n    ...\n'})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"Please note that we run this function without await, so it will not block your API. SO function will be called in background when hook will already return and user will not wait for it."}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["Now every time you will create or edit page, it will call ",(0,i.jsx)(e.code,{children:"feedAllPageTranslations"})," function and create translation strings for each page and each key.\nYou can also import this function into index script and run after database discover, if you already have pages in your database and you want to create translation strings for them even without clicking on create or edit button."]}),"\n",(0,i.jsx)(e.h1,{id:"issue-2---after-modification-of-page-attributes-old-translation-strings-will-not-be-removed",children:"Issue 2 - after modification of page attributes old translation strings will not be removed"}),"\n",(0,i.jsx)(e.p,{children:"You can mitigate this by adding couple of lines into edit hook:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"    edit: {\n      afterSave: async ({ oldRecord, updates, adminforth }: { oldRecord: Record<string, string>, updates: Record<string, string>, adminforth: IAdminForth }) => {\n       //diff-add\n         if (Object.keys(updates).length) {\n       //diff-add\n          // find old strings which were edited and which are not used anymore\n       //diff-add\n        const oldStrings = await adminforth.resource('translations').list([\n       //diff-add\n            Filters.AND(\n       //diff-add\n              Filters.EQ('category', 'seo_page_config'),\n       //diff-add\n              Filters.IN('en_string', Object.keys(updates).map((key: string) => oldRecord[key]))\n       //diff-add\n            )\n       //diff-add\n          ]);\n       //diff-add\n          // delete them\n       //diff-add\n          await Promise.all(\n       //diff-add\n            oldStrings.map((oldString: any) => {\n       //diff-add\n              return adminforth.resource('translations').delete(oldString.id);\n       //diff-add\n            })\n       //diff-add\n          );\n       //diff-add\n        }\n        feedAllPageTranslations(adminforth);\n        return { ok: true }; \n      },\n    },\n"})}),"\n",(0,i.jsx)(e.p,{children:"This will delete all old translation strings which are not used anymore."}),"\n",(0,i.jsx)(e.p,{children:"If your have ability to delete pages, you can also add delete hook, you can do this as a homework."}),"\n",(0,i.jsx)(e.h1,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(e.p,{children:"In this article we have shown how to translate dynamic strings in AdminForth API. We have also shown how to create translation strings for each page and each key in your database.\nWe have also shown how to delete old translation strings which are not used anymore. This will help you to keep your translation strings clean and up to date."})]})}function f(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},8453:(n,e,a)=>{a.d(e,{R:()=>o,x:()=>s});var t=a(6540);const i={},r=t.createContext(i);function o(n){const e=t.useContext(r);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),t.createElement(r.Provider,{value:e},n.children)}},4697:n=>{n.exports=JSON.parse('{"permalink":"/blog/dynamic-strings-translation","source":"@site/blog/2025-04-10-how-to-translate-dynamic-strings/index.md","title":"How to translate dynamic strings in AdminForth API","description":"Simple example of how to translate dynamic strings from database in AdminForth API","date":"2025-04-10T00:00:00.000Z","tags":[{"inline":false,"label":"Keycloak","permalink":"/blog/tags/keycloak","description":"Keycloak is an open-source identity and access management solution for modern applications and services."},{"inline":false,"label":"Auth","permalink":"/blog/tags/auth","description":"Authentication is the process of verifying the identity of a user or system. Authentication is a critical component of security in software applications and systems."}],"readingTime":4.805,"hasTruncateMarker":true,"authors":[{"name":"Ivan Borshchov","title":"Maintainer of AdminForth","url":"https://github.com/ivictbor","imageURL":"https://avatars.githubusercontent.com/u/1838656?v=4","key":"ivanb","page":null}],"frontMatter":{"slug":"dynamic-strings-translation","title":"How to translate dynamic strings in AdminForth API","authors":"ivanb","tags":["keycloak","authentication"],"description":"Simple example of how to translate dynamic strings from database in AdminForth API"},"unlisted":false,"nextItem":{"title":"Setup AdminForth Authorization via Keycloak","permalink":"/blog/keycloak-setup-example"}}')}}]);