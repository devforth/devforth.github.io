"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[1980],{1695:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"tutorial/gettingStarted","title":"Getting Started","description":"This page provides a step-by-step guide to quickly get started with AdminForth using the adminforth CLI.","source":"@site/docs/tutorial/001-gettingStarted.md","sourceDirName":"tutorial","slug":"/tutorial/gettingStarted","permalink":"/docs/tutorial/gettingStarted","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","next":{"title":"Hello world app without CLI","permalink":"/docs/tutorial/hello-world"}}');var r=a(4848),i=a(8453);const s={},d="Getting Started",o={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Creating an AdminForth Project",id:"creating-an-adminforth-project",level:2},{value:"Understand the generated Project Structure",id:"understand-the-generated-project-structure",level:3},{value:"Initial Migration &amp; Future Migrations",id:"initial-migration--future-migrations",level:3},{value:"Run the Server",id:"run-the-server",level:2},{value:"AdminForth Basic Philosophy",id:"adminforth-basic-philosophy",level:2},{value:"Adding an <code>apartments</code> Model",id:"adding-an-apartments-model",level:2},{value:"Step 1. Define the <code>apartments</code> Model in <code>schema.prisma</code>",id:"step-1-define-the-apartments-model-in-schemaprisma",level:3},{value:"Step 2. Create and Apply the Migration",id:"step-2-create-and-apply-the-migration",level:3},{value:"Step3. Create the <code>apartments</code> resource",id:"step3-create-the-apartments-resource",level:3},{value:"Step 4. Register the <code>apartments</code> Resource",id:"step-4-register-the-apartments-resource",level:3},{value:"Generating fake appartments",id:"generating-fake-appartments",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"getting-started",children:"Getting Started"})}),"\n",(0,r.jsxs)(n.p,{children:["This page provides a step-by-step guide to quickly get started with AdminForth using the ",(0,r.jsx)(n.code,{children:"adminforth"})," CLI.\nYou will learn how to set up a new project using the ",(0,r.jsx)(n.code,{children:"adminforth create-app"})," command and explore AdminForth\u2019s fundamentals."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["\ud83d\udc46 For setup example without CLI check out ",(0,r.jsx)(n.a,{href:"/docs/tutorial/hello-world",children:"Hello World without CLI"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.p,{children:["AdminForth requires ",(0,r.jsx)(n.strong,{children:"Node v20"})," or higher. If you\u2019re on a different version, you can switch or install using:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"nvm install 20\nnvm alias default 20\nnvm use 20\n"})}),"\n",(0,r.jsx)(n.h2,{id:"creating-an-adminforth-project",children:"Creating an AdminForth Project"}),"\n",(0,r.jsxs)(n.p,{children:["The recommended way to get started with AdminForth is via the ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"create-app"})})," CLI, which scaffolds a basic fully functional back-office application. Apart boilerplate it creates one resource for users management."]}),"\n",(0,r.jsx)(n.p,{children:"First, create and enter a directory where you want your AdminForth project to live. For instance:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir myadmin\ncd myadmin\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can provide options directorly:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx adminforth create-app --app-name myadmin --db sqlite://.db.sqlite\n"})}),"\n",(0,r.jsx)(n.p,{children:"Or omit them to be prompted interactively:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx adminforth create-app\n"})}),"\n",(0,r.jsx)(n.p,{children:"CLI options:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"--app-name"})})," - name for your project. Used in ",(0,r.jsx)(n.code,{children:"package.json"}),", ",(0,r.jsx)(n.code,{children:"index.ts"})," branding, etc. Default value: ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"adminforth-app"})}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"--db"})})," - database connection string. Currently PostgreSQL, MongoDB, SQLite, MySQL, Clickhouse are supported. Default value: ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"sqlite://.db.sqlite"})})]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"\u261d\ufe0f Database Connection String format:"}),"\n",(0,r.jsxs)(n.p,{children:["Format is ",(0,r.jsx)(n.code,{children:"<scheme>://<username>:<password>@<host>:<port>/<database>"}),". Examples:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["SQLite \u2014 ",(0,r.jsx)(n.code,{children:"sqlite://.db.sqlite"}),". If database not yet exists it will be created"]}),"\n",(0,r.jsxs)(n.li,{children:["PostgreSQL \u2014 ",(0,r.jsx)(n.code,{children:"postgres://user:password@localhost:5432/dbname"})]}),"\n",(0,r.jsxs)(n.li,{children:["MongoDB \u2014 ",(0,r.jsx)(n.code,{children:"mongodb://localhost:27017/dbname"})]}),"\n",(0,r.jsxs)(n.li,{children:["Clickhouse \u2014 ",(0,r.jsx)(n.code,{children:"clickhouse://localhost:8123/dbname"})]}),"\n",(0,r.jsxs)(n.li,{children:["MySQL \u2014 ",(0,r.jsx)(n.code,{children:"mysql://user:password@localhost:3306/dbname"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"understand-the-generated-project-structure",children:"Understand the generated Project Structure"}),"\n",(0,r.jsx)(n.p,{children:"The CLI will create boilerplate files and folders in your current directory and install dependencies. A typical layout looks like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"myadmin/\n\u251c\u2500\u2500 custom\n\u2502   \u251c\u2500\u2500 assets/           # Static assets like images, fonts, etc.\n\u2502   \u251c\u2500\u2500 package.json      # For any custom npm packages you will use in Vue files\n\u2502   \u2514\u2500\u2500 tsconfig.json     # Tsconfig for Vue project (adds completion for AdminForth core components)\n\u251c\u2500\u2500 resources\n\u2502   \u2514\u2500\u2500 adminuser.ts      # Example resource file for users management\n\u251c\u2500\u2500 schema.prisma         # Prisma schema file for database schema\n\u251c\u2500\u2500 index.ts              # Main entry point: configures AdminForth & starts the server\n\u251c\u2500\u2500 package.json          # Project dependencies\n\u251c\u2500\u2500 tsconfig.json         # TypeScript configuration\n\u251c\u2500\u2500 .env                  # Env vars like tokens, secrets that should not be in version control\n\u251c\u2500\u2500 .env.local            # General local environment variables\n\u2514\u2500\u2500 .gitignore\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"initial-migration--future-migrations",children:"Initial Migration & Future Migrations"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["\u261d\ufe0f CLI creates Prisma schema file for managing migrations in relational databases, however you are not forced to use it. Instead you are free to use your favourite or existing migration tool. In this case just ignore generated prisma file, and don't run migration command which will be suggested by CLI. However you have to ensure that your migration tool will generate required table ",(0,r.jsx)(n.code,{children:"adminuser"})," with same fields and types for Users resource."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"CLI will suggest you a command to initialize the database with Prisma:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run makemigration -- --name init\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This will create a migration file in ",(0,r.jsx)(n.code,{children:"migrations"})," and apply it to the database."]}),"\n",(0,r.jsxs)(n.p,{children:["In future, when you need to add new resources, you need to modify ",(0,r.jsx)(n.code,{children:"schema.prisma"})," (add models, change fields, etc.). After doing any modification you need to create a new migration using next command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run makemigration -- --name <name_of_changes>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Other developers need to pull migration and run ",(0,r.jsx)(n.code,{children:"npm run migrateLocal"})," to apply any unapplied migrations."]}),"\n",(0,r.jsx)(n.h2,{id:"run-the-server",children:"Run the Server"}),"\n",(0,r.jsx)(n.p,{children:"Now you can run your app:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm start\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Open ",(0,r.jsx)(n.a,{href:"http://localhost:3500",children:"http://localhost:3500"})," in your browser and (default credentials are ",(0,r.jsx)(n.code,{children:"adminforth"}),"/",(0,r.jsx)(n.code,{children:"adminforth"})," if you haven\u2019t changed them)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"alt text",src:a(8332).A+"",width:"2428",height:"1932"})}),"\n",(0,r.jsx)(n.h2,{id:"adminforth-basic-philosophy",children:"AdminForth Basic Philosophy"}),"\n",(0,r.jsx)(n.p,{children:"AdminForth connects to existing databases and provides a back-office for managing data including CRUD operations, filtering, sorting, and more."}),"\n",(0,r.jsx)(n.p,{children:"Database can be already created by using any database management tool, ORM or migrator."}),"\n",(0,r.jsx)(n.p,{children:"AdminForth itself never modifies database schema, does not add columns or new tables. However for those who have no own migration managment AdminForth CLI suggests using Prisma. This allows to provide simple and reliable schema management for standalone projects which have no DB yet."}),"\n",(0,r.jsx)(n.p,{children:'If you already have a database, you pass a connection string to AdminForth and define resources(tables) and describe columns you would like to see in back-office. For most DBs AdminForth can "discover" column types and constraints (e.g. max-length) by connecting to DB. However you can redefine them in AdminForth configuration. Type and constraints definition in AdminForth resource are take precedence over DB schema.'}),"\n",(0,r.jsx)(n.p,{children:'Also in AdminForth you can define in "Vue" way:'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"how each field will be rendered"}),"\n",(0,r.jsx)(n.li,{children:"create own pages e.g. Dashboard using AdminForth Components Library (AFCL) or any other Vue componetns."}),"\n",(0,r.jsx)(n.li,{children:"insert injections into standard pages (e.g. add diagram to list view)"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"adding-an-apartments-model",children:["Adding an ",(0,r.jsx)(n.code,{children:"apartments"})," Model"]}),"\n",(0,r.jsxs)(n.p,{children:["So far, our freshly generated AdminForth project includes a default ",(0,r.jsx)(n.code,{children:"adminuser"})," model and a corresponding ",(0,r.jsx)(n.code,{children:"adminuser"})," resource."]}),"\n",(0,r.jsxs)(n.p,{children:["Let\u2019s expand our app to suport managment of ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"apartments"})})," model. Adding new resource will involve next steps:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Add a new Prisma model"})," to your ",(0,r.jsx)(n.code,{children:"schema.prisma"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Run a Prisma migration"})," to update your database schema."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Create a corresponding resource"})," in the ",(0,r.jsx)(n.code,{children:"resources/"})," folder."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Register the new resource"})," in ",(0,r.jsx)(n.code,{children:"index.ts"})," and see it in your AdminForth back-office."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Please note that steps 1 and 2 are compleatly independent from 3 and 4, so you can make them with any other way then Prisma."}),"\n",(0,r.jsxs)(n.h3,{id:"step-1-define-the-apartments-model-in-schemaprisma",children:["Step 1. Define the ",(0,r.jsx)(n.code,{children:"apartments"})," Model in ",(0,r.jsx)(n.code,{children:"schema.prisma"})]}),"\n",(0,r.jsxs)(n.p,{children:["Open ",(0,r.jsx)(n.code,{children:"schema.prisma"})," in your project root and add a new model for ",(0,r.jsx)(n.code,{children:"apartments"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-prisma",metastring:'title="./schema.prisma"',children:"...\n//diff-add\nmodel apartments {\n//diff-add\n  id                String     @id\n//diff-add\n  created_at        DateTime?\n//diff-add\n  title             String\n//diff-add\n  square_meter      Float?\n//diff-add\n  price             Decimal\n//diff-add\n  number_of_rooms   Int?\n//diff-add\n  description       String?\n//diff-add\n  country           String?\n//diff-add\n  listed            Boolean\n//diff-add\n  realtor_id        String?\n//diff-add\n}\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"step-2-create-and-apply-the-migration",children:"Step 2. Create and Apply the Migration"}),"\n",(0,r.jsx)(n.p,{children:"Run the following command to create a new migration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run makemigration -- --name add-apartments\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"step3-create-the-apartments-resource",children:["Step3. Create the ",(0,r.jsx)(n.code,{children:"apartments"})," resource"]}),"\n",(0,r.jsxs)(n.p,{children:["Create a new file ",(0,r.jsx)(n.code,{children:"apartments.ts"})," in the ",(0,r.jsx)(n.code,{children:"resources/"})," folder:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="./resources/apartments.ts"',children:"import { AdminForthDataTypes, AdminForthResourceInput } from 'adminforth';\n\nexport default {\n  dataSource: 'maindb',\n  table: 'apartments',\n  resourceId: 'aparts', // resourceId is defaulted to table name but you can redefine it like this e.g. \n  // in case of same table names from different data sources\n  label: 'Apartments',   // label is defaulted to table name but you can change it\n  recordLabel: (r) => `\ud83c\udfe1 ${r.title}`,\n  columns: [\n    {\n      name: 'id',\n      type: AdminForthDataTypes.STRING,\n      label: 'Identifier',  // if you wish you can redefine label, defaulted to uppercased name\n      showIn: { // show column in filter and in show page\n        list: false,\n        edit: false,\n        create: false,\n      },\n      primaryKey: true,\n      fillOnCreate: ({ initialRecord, adminUser }) => Math.random().toString(36).substring(7),  // called during creation to generate content of field, initialRecord is values user entered, adminUser object of user who creates record\n    },\n    {\n      name: 'title',\n      required: true,\n      showIn: { all: false },  // all available options\n      type: AdminForthDataTypes.STRING,\n      maxLength: 255,  // you can set max length for string fields\n      minLength: 3,  // you can set min length for string fields\n    },\n    {\n      name: 'created_at',\n      type: AdminForthDataTypes.DATETIME,\n      allowMinMaxQuery: true,\n      showIn: { create: false },\n      fillOnCreate: ({ initialRecord, adminUser }) => (new Date()).toISOString(),\n    },\n    {\n      name: 'price',\n      inputSuffix: 'USD', // you can add a suffix to an input field that will be displayed when creating or editing records\n      allowMinMaxQuery: true,  // use better experience for filtering e.g. date range, set it only if you have index on this column or if you sure there will be low number of rows\n      editingNote: 'Price is in USD',  // you can put a note near field on editing or creating page\n    },\n    {\n      name: 'square_meter',\n      label: 'Square',\n      allowMinMaxQuery: true,\n      minValue: 1,  // you can set min /max value for number columns so users will not be able to enter more/less\n      maxValue: 1000,\n    },\n    {\n      name: 'number_of_rooms',\n      allowMinMaxQuery: true,\n      enum: [\n        { value: 1, label: '1 room' },\n        { value: 2, label: '2 rooms' },\n        { value: 3, label: '3 rooms' },\n        { value: 4, label: '4 rooms' },\n        { value: 5, label: '5 rooms' },\n      ],\n    },\n    {\n      name: 'description',\n      sortable: false,\n      showIn: { list: false },\n    },\n    {\n      name: 'country',\n      enum: [{\n        value: 'US',\n        label: 'United States'\n      }, {\n        value: 'DE',\n        label: 'Germany'\n      }, {\n        value: 'FR',\n        label: 'France'\n      }, {\n        value: 'GB',\n        label: 'United Kingdom'\n      }, {\n        value: 'NL',\n        label: 'Netherlands'\n      }, {\n        value: 'IT',\n        label: 'Italy'\n      }, {\n        value: 'ES',\n        label: 'Spain'\n      }, {\n        value: 'DK',\n        label: 'Denmark'\n      }, {\n        value: 'PL',\n        label: 'Poland'\n      }, {\n        value: 'UA',\n        label: 'Ukraine'\n      }, {\n        value: null,\n        label: 'Not defined'\n      }],\n    },\n    {\n      name: 'listed',\n      required: true,  // will be required on create/edit\n    },\n    {\n      name: 'realtor_id',\n      foreignResource: {\n        resourceId: 'adminuser',\n      }\n    }\n  ],\n  options: {\n    listPageSize: 12,\n    allowedActions: {\n      edit: true,\n      delete: true,\n      show: true,\n      filter: true,\n    },\n  },\n} as AdminForthResourceInput;\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"step-4-register-the-apartments-resource",children:["Step 4. Register the ",(0,r.jsx)(n.code,{children:"apartments"})," Resource"]}),"\n",(0,r.jsxs)(n.p,{children:["Open ",(0,r.jsx)(n.code,{children:"index.ts"})," in your project root and import the new resource:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="./index.ts"',children:"...\n//diff-add\nimport apartmentsResource from \"./resources/apartments\";\n\n...\nexport const admin = new AdminForth({\n  ...\n  resources: [\n    usersResource,\n    //diff-add\n    apartmentsResource,\n  ],\n  menu: [\n//diff-add\n    {\n//diff-add\n      label: 'Core',\n//diff-add\n      icon: 'flowbite:brain-solid',\n//diff-add\n      open: true,\n//diff-add\n      children: [\n//diff-add\n        {\n//diff-add\n          homepage: true,\n//diff-add\n          label: 'Apartments',\n//diff-add\n          icon: 'flowbite:home-solid',\n//diff-add\n          resourceId: 'aparts',\n//diff-add\n        },\n//diff-add\n      ]\n//diff-add\n    },\n//diff-add\n    { type: 'gap' },\n//diff-add\n    { type: 'divider' },\n    {\n      type: 'heading',\n      label: 'SYSTEM'\n    },\n    {\n      label: 'Users',\n      ...\n    }\n  ],\n  ...\n});\n\n"})}),"\n",(0,r.jsx)(n.h2,{id:"generating-fake-appartments",children:"Generating fake appartments"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="./index.ts"',children:"//diff-add\nasync function seedDatabase() {\n//diff-add\n  if (await admin.resource('aparts').count() > 0) {\n//diff-add\n    return\n//diff-add\n  }\n//diff-add\n  for (let i = 0; i < 100; i++) {\n//diff-add\n    await admin.resource('aparts').create({\n//diff-add\n      id: `${i}`,\n//diff-add\n      title: `Apartment ${i}`,\n//diff-add\n      square_meter: (Math.random() * 100).toFixed(1),\n//diff-add\n      price: (Math.random() * 10000).toFixed(2),\n//diff-add\n      number_of_rooms: Math.floor(Math.random() * 4) + 1,\n//diff-add\n      description: 'Next gen apartments',\n//diff-add\n      created_at: (new Date(Date.now() - Math.random() * 60 * 60 * 24 * 14 * 1000)).toISOString(),\n//diff-add\n      listed: i % 2 == 0,\n//diff-add\n      country: `${['US', 'DE', 'FR', 'GB', 'NL', 'IT', 'ES', 'DK', 'PL', 'UA'][Math.floor(Math.random() * 10)]}`\n//diff-add\n    });\n//diff-add\n  };\n//diff-add\n};\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n\n  ...\n\n  admin.discoverDatabases().then(async () => {\n    if (!await admin.resource('adminuser').get([Filters.EQ('email', 'adminforth')])) {\n      await admin.resource('adminuser').create({\n        email: 'adminforth',\n        password_hash: await AdminForth.Utils.generatePasswordHash('adminforth'),\n        role: 'superadmin',\n      });\n    }\n//diff-add\n    await seedDatabase();\n  });\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This will create records during first launch. Now you should see:\n",(0,r.jsx)(n.img,{alt:"alt text",src:a(4973).A+"",width:"3700",height:"1932"})]}),"\n",(0,r.jsx)(n.p,{children:"Feel free to play with the data, add more fields, and customize the UI to your liking."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8332:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/localhost_3500_login-22b59511349c51948267c9a4080e4d87.png"},4973:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/localhost_3500_resource_aparts-dddac951816a2a7b58c84b6348828ecb.png"},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>d});var t=a(6540);const r={},i=t.createContext(r);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);