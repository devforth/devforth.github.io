"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[510],{4060:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var o=s(4848),t=s(8453);const r={},i="Customization",a={id:"customization",title:"Customization",description:"Here is how you can customize the AdminForth to fit your needs.",source:"@site/docs/03-customization.md",sourceDirName:".",slug:"/customization",permalink:"/docs/customization",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Glossary",permalink:"/docs/glossary"},next:{title:"AuditLog",permalink:"/docs/Plugins/AuditLog"}},d={},c=[{value:"Customizing how AdminForth renders the cells with record values",id:"customizing-how-adminforth-renders-the-cells-with-record-values",level:2},{value:"Hooks",id:"hooks",level:2},{value:"Modify the data before it is saved to the database",id:"modify-the-data-before-it-is-saved-to-the-database",level:3},{value:"Limiting access to the resource actions",id:"limiting-access-to-the-resource-actions",level:2},{value:"Statically disable some action",id:"statically-disable-some-action",level:3},{value:"Disable some action based on logged in user record or role",id:"disable-some-action-based-on-logged-in-user-record-or-role",level:3},{value:"Reuse the same callback for multiple actions",id:"reuse-the-same-callback-for-multiple-actions",level:3},{value:"Customizing the access control based on resource values",id:"customizing-the-access-control-based-on-resource-values",level:3}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"customization",children:"Customization"}),"\n",(0,o.jsx)(n.p,{children:"Here is how you can customize the AdminForth to fit your needs."}),"\n",(0,o.jsx)(n.h2,{id:"customizing-how-adminforth-renders-the-cells-with-record-values",children:"Customizing how AdminForth renders the cells with record values"}),"\n",(0,o.jsxs)(n.p,{children:["Let's change how AdminForth renders the number of rooms in the 'list' and 'show' views.\nWe will render '\ud83d\udfe8' for each room and then we will print ",(0,o.jsx)(n.code,{children:"square_meter"})," at the same cells."]}),"\n",(0,o.jsxs)(n.p,{children:["Create directory ",(0,o.jsx)(n.code,{children:"custom"}),". Create a file ",(0,o.jsx)(n.code,{children:"RoomsCell.vue"})," in it:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-vue",children:'<template>\n  <div class="flex items-center">\n    <span v-for="room in record.number_of_rooms">\n      \ud83d\udfe8\n    </span>\n      \n    {{ room.square_meter }} m\xb2\n  </div>\n</template>\n\n<script setup>\ndefineProps({\n  record: Object\n});\n<\/script>\n'})}),"\n",(0,o.jsx)(n.p,{children:"Now you can use this component in the configuration of the resource:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"{\n  ...\n  resourceId: 'apparts',\n  ...\n  columns: [\n    ...\n    {\n      ...\n      name: 'number_of_rooms',\n      ...\n      components: {\n        show: '@@/RoomsCell.vue',\n        list: '@@/RoomsCell.vue',\n      }\n    },\n    ...\n  ],\n  ...\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"hooks",children:"Hooks"}),"\n",(0,o.jsx)(n.p,{children:"Hooks are used to:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"modify the data before it is saved to the database on create or update"}),"\n",(0,o.jsx)(n.li,{children:"execute something after data were saved or deleted"}),"\n",(0,o.jsx)(n.li,{children:"change the query before fetching items from the database"}),"\n",(0,o.jsx)(n.li,{children:"modify the fetched data before it is displayed in the list and show"}),"\n",(0,o.jsxs)(n.li,{children:["prevent the request to db depending on some condition (Better use ",(0,o.jsx)(n.a,{href:"#limiting-access-to-the-resource-actions",children:"allowedActions"})," for this)"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"modify-the-data-before-it-is-saved-to-the-database",children:"Modify the data before it is saved to the database"}),"\n",(0,o.jsx)(n.p,{children:"Let's add id to adminUser when user creates a new appartment:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import type { AdminUser } from  'adminforth/types/AdminForthConfig.js';\n\n{\n  ...\n  resourceId: 'apparts',\n  ...\n  columns: [\n    ...\n    {\n      name: 'user_id',\n      ...\n      showIn: ['list', 'show', 'edit'], // don't even show this field in create\n      ...\n    },\n    ...\n  ],\n  ...\n  hooks: {\n    create: {\n      beforeSave: async ({ adminUser, record }: { adminUser: AdminUser, record: any }) => {\n        if (adminUser.isRoot) {\n          return { ok: false, error: \"Root user can't create appartment, relogin as DB user\" };\n        }\n        record.user_id = adminUser.dbUser.id;\n        return { ok: true, record };\n      }\n    }\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"limiting-access-to-the-resource-actions",children:"Limiting access to the resource actions"}),"\n",(0,o.jsx)(n.h3,{id:"statically-disable-some-action",children:"Statically disable some action"}),"\n",(0,o.jsxs)(n.p,{children:["You can use ",(0,o.jsx)(n.code,{children:"options.allowedActions"})," on resource to limit access to the resource actions (list, show, create, edit, delete)."]}),"\n",(0,o.jsx)(n.p,{children:"If you want to disable deletion of the resource records for all users:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"{\n  ...\n  resourceId: 'users',\n  ...\n  options: {\n    allowedActions: {\n      delete: false\n    }\n    ...\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"disable-some-action-based-on-logged-in-user-record-or-role",children:"Disable some action based on logged in user record or role"}),"\n",(0,o.jsxs)(n.p,{children:["If you want to disable deletion of apartments for all users apart from users with role ",(0,o.jsx)(n.code,{children:"superadmin"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import type { AdminUser } from  'adminforth/types/AdminForthConfig.js';\n\n{\n  ...\n  resourceId: 'apparts',\n  ...\n  options: {\n    allowedActions: {\n      delete: async ({ adminUser }: { adminUser: AdminUser }): Promise<boolean> => {\n        // important: if adminUser.isRoot, the adminUser.dbUser is undefined\n        return adminUser.isRoot || adminUser.dbUser.role === 'superadmin';\n      }\n    }\n    ...\n  }\n}\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"\u2139\ufe0f TIP: instead of reading role from user you can check permission using complex ACL/RBAC models with permissions stored in the database.\nHowever we recommend you to keep in mind that allowedActions callback is called on every request related to resource, so it should be fast.\nSo try to minimize requests to database as much as possible."}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"reuse-the-same-callback-for-multiple-actions",children:"Reuse the same callback for multiple actions"}),"\n",(0,o.jsxs)(n.p,{children:["Let's disable creating and editing of new users for all users apart from users with role ",(0,o.jsx)(n.code,{children:"superadmin"}),", and at the same time disable deletion for all users:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"\nimport type { AdminUser } from  'adminforth/types/AdminForthConfig.js';\n\nasync function canModifyUsers({ adminUser }: { adminUser: AdminUser }): boolean {\n  // important: if adminUser.isRoot, the adminUser.dbUser is undefined\n  return adminUser.isRoot || adminUser.dbUser.role === 'superadmin';\n}\n\n{\n  ...\n  resourceId: 'users',\n  ...\n  options: {\n    allowedActions: {\n      create: canModifyUsers,\n      edit: canModifyUsers,\n      delete: false\n    }\n    ...\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"customizing-the-access-control-based-on-resource-values",children:"Customizing the access control based on resource values"}),"\n",(0,o.jsx)(n.p,{children:'More advanced case, allow to edit apartments only if user is owner of the apartment (defined as user_id), otherwise return error\n"You are not assigned to this apartment and can\'t edit it":'}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import type { AdminUser, ActionCheckSource } from  'adminforth/types/AdminForthConfig.js';\n\nasync function canModifyAppart({ adminUser, source, meta }: { adminUser: AdminUser, meta: any, source: ActionCheckSource }): boolean {\n  if (source === ActionCheckSource.DisplayButtons) {\n    // if check is done for displaying button - we show button to everyone\n    return true; \n  }\n  if (adminUser.isRoot) {\n    return \"Root user can't create appartment, relogin as DB user\"; \n  }\n  const { oldRecord, newRecord } = meta;\n  if (oldRecord.user_id !== adminUser.dbUser.id) {\n    return \"You are not assigned to this apartment and can't edit it\";\n  }\n  if (newRecord.user_id !== oldRecord.user_id) {\n    return \"You can't change the owner of the apartment\";\n  }\n  return true;\n}\n\n\n{\n  ...\n  resourceId: 'apparts',\n  ...\n  options: {\n    allowedActions: {\n      edit: canModifyAppart,\n    }\n    ...\n  }\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var o=s(6540);const t={},r=o.createContext(t);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);