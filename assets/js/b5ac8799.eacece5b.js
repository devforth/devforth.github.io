"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[3709],{7253:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var t=o(4848),s=o(8453);const a={},r="dataSource",i={id:"Glossary",title:"dataSource",description:"A DataSource is a connection to one database. Datasources has id for references from resources and URL which follows the standard URI format. For example mysqlpassword@localhost:3306/database.",source:"@site/docs/Glossary.md",sourceDirName:".",slug:"/Glossary",permalink:"/docs/Glossary",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/docs/Getting Started"},next:{title:"TypeDoc API",permalink:"/docs/api/"}},c={},d=[];function l(e){const n={code:"code",h1:"h1",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"datasource",children:"dataSource"}),"\n",(0,t.jsxs)(n.p,{children:["A DataSource is a connection to one database. Datasources has id for references from resources and URL which follows the standard URI format. For example ",(0,t.jsx)(n.code,{children:"mysql://user:password@localhost:3306/database"}),".\nIt used to:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Discover the columns in the database"}),"\n",(0,t.jsx)(n.li,{children:"Make queries to get the list and show records"}),"\n",(0,t.jsx)(n.li,{children:"Make queries to modify data"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"There might be several datasources in the system for vairous databases e.g. One 2 Mongo DBs and 1 Postgres DB."}),"\n",(0,t.jsx)(n.h1,{id:"resource",children:"resource"}),"\n",(0,t.jsxs)(n.p,{children:["A Resource is a representation of a table or collection in AdminForth. One resource is one table in the database.\nIt has a ",(0,t.jsx)(n.code,{children:"name"})," which should match name in database, a datasource id, and a list of columns.\nAlso it has various customization options."]}),"\n",(0,t.jsx)(n.h1,{id:"column",children:"column"}),"\n",(0,t.jsxs)(n.p,{children:["A Column is a representation of a column in a table. It has a ",(0,t.jsx)(n.code,{children:"name"})," which should be equal to name in database and various configuration options."]}),"\n",(0,t.jsx)(n.h1,{id:"record",children:"record"}),"\n",(0,t.jsx)(n.p,{children:"A record is a row in a relational database table. Or Document in document database table."}),"\n",(0,t.jsx)(n.h1,{id:"adminuser",children:"adminUser"}),"\n",(0,t.jsx)(n.p,{children:"Object which represents a user who logged in to the AdminForth"}),"\n",(0,t.jsx)(n.h1,{id:"hook",children:"hook"}),"\n",(0,t.jsx)(n.p,{children:"Hook is a optional async function which allows to inject in backend logic before exuting the datasource query or after it"}),"\n",(0,t.jsx)(n.h1,{id:"component",children:"component"}),"\n",(0,t.jsx)(n.p,{children:"Component is a Vue component which is used to add or modify UI elements in AdminForth."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>i});var t=o(6540);const s={},a=t.createContext(s);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);