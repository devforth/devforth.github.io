"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[8910],{6325:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var i=o(4848),t=o(8453);const a={},r="Glossary",s={id:"tutorial/glossary",title:"Glossary",description:"dataSource",source:"@site/docs/tutorial/02-glossary.md",sourceDirName:"tutorial",slug:"/tutorial/glossary",permalink:"/docs/tutorial/glossary",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Hello world app without CLI",permalink:"/docs/tutorial/hello-world"},next:{title:"Branding and Theming",permalink:"/docs/tutorial/Customization/branding"}},l={},c=[{value:"dataSource",id:"datasource",level:2},{value:"resource",id:"resource",level:2},{value:"column",id:"column",level:2},{value:"record",id:"record",level:2},{value:"action",id:"action",level:2},{value:"adminUser",id:"adminuser",level:2},{value:"hook",id:"hook",level:2},{value:"allowedAction",id:"allowedaction",level:2},{value:"component",id:"component",level:2},{value:"field",id:"field",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"glossary",children:"Glossary"}),"\n",(0,i.jsx)(n.h2,{id:"datasource",children:"dataSource"}),"\n",(0,i.jsxs)(n.p,{children:["A DataSource is a connection to one database. Datasources have id for references from resources and URL which follows the standard URI format. For example ",(0,i.jsx)(n.code,{children:"mysql://user:password@localhost:3306/database"}),".\nIt used to:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Discover the columns in the database"}),"\n",(0,i.jsx)(n.li,{children:"Make queries to get the list and show records"}),"\n",(0,i.jsx)(n.li,{children:"Make queries to modify data"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"There might be several datasources in the system for various databases e.g. One 2 Mongo DBs and 1 Postgres DB."}),"\n",(0,i.jsx)(n.h2,{id:"resource",children:"resource"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.a,{href:"/docs/api/types/Back/interfaces/AdminForthResource",children:"Resource"})," is a representation of a table or collection in AdminForth. One resource is one table in the database.\nIt has a ",(0,i.jsx)(n.code,{children:"name"})," which should match name in database, a datasource id, and a list of columns.\nAlso it has various customization options."]}),"\n",(0,i.jsx)(n.h2,{id:"column",children:"column"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.a,{href:"/docs/api/types/Back/interfaces/AdminForthResourceColumn",children:"Column"})," is a representation of a column in a table. It has a ",(0,i.jsx)(n.code,{children:"name"})," which should be equal to name in database and various configuration options."]}),"\n",(0,i.jsx)(n.h2,{id:"record",children:"record"}),"\n",(0,i.jsx)(n.p,{children:"A record is a row in a relational database table. Or Document in document database table."}),"\n",(0,i.jsx)(n.h2,{id:"action",children:"action"}),"\n",(0,i.jsx)(n.p,{children:"Action is one of operations which can be performed on the resource or it's records."}),"\n",(0,i.jsxs)(n.p,{children:["There are next ",(0,i.jsx)(n.a,{href:"/docs/api/types/Common/enumerations/AllowedActionsEnum",children:"actions"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"create"}),"\n",(0,i.jsx)(n.li,{children:"edit"}),"\n",(0,i.jsx)(n.li,{children:"delete"}),"\n",(0,i.jsx)(n.li,{children:"list"}),"\n",(0,i.jsx)(n.li,{children:"show"}),"\n",(0,i.jsx)(n.li,{children:"filter"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"adminuser",children:"adminUser"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"/docs/api/types/Common/interfaces/AdminUser",children:"Object"})," which represents a user who logged in to the AdminForth."]}),"\n",(0,i.jsx)(n.h2,{id:"hook",children:"hook"}),"\n",(0,i.jsx)(n.p,{children:"Hook is a optional async function which allows to inject in backend logic before executing the datasource query or after it.\nHooks exist for all database queries including data read queries like list, show, and data write queries like create, edit, delete."}),"\n",(0,i.jsx)(n.h2,{id:"allowedaction",children:"allowedAction"}),"\n",(0,i.jsx)(n.p,{children:"Static boolean value or async function which returns boolean and defines whether the action is allowed for the user.\nallowedAction checked before any hooks or datasource queries: this means that if your allowed action function\nreturned false you can be sure that user attempt to perform the action or get the data will be strictly prohibited on backend side."}),"\n",(0,i.jsx)(n.h2,{id:"component",children:"component"}),"\n",(0,i.jsx)(n.p,{children:"Component is a Vue component which is used to add or modify UI elements in AdminForth. It can be used as a full custom page with a link in menu or as a part of the existing AdminForth page"}),"\n",(0,i.jsx)(n.h2,{id:"field",children:"field"}),"\n",(0,i.jsx)(n.p,{children:"The column in the record."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>s});var i=o(6540);const t={},a=i.createContext(t);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);