"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[5381],{9225:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var i=t(4848),s=t(8453);const o={},r="Hello world app",l={id:"tutorial/01.1-helloWorld",title:"Hello world app",description:"No water. Pure code to get started ASAP.",source:"@site/docs/tutorial/01.1-helloWorld.md",sourceDirName:"tutorial",slug:"/tutorial/01.1-helloWorld",permalink:"/docs/tutorial/01.1-helloWorld",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Plugin development guide",permalink:"/docs/tutorial/Advanced/plugin-development"}},a={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Env variables",id:"env-variables",level:2},{value:"Database creation",id:"database-creation",level:2},{value:"Setting up a first demo",id:"setting-up-a-first-demo",level:2},{value:"Possible configuration options",id:"possible-configuration-options",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"hello-world-app",children:"Hello world app"}),"\n",(0,i.jsx)(n.p,{children:"No water. Pure code to get started ASAP."}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.p,{children:["We will use Node v20 for this demo. If you have other versions, we recommend using ",(0,i.jsx)(n.a,{href:"https://github.com/nvm-sh/nvm?tab=readme-ov-file#install--update-script",children:"NVM"})," to switch them easily:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"nvm install 20\nnvm alias default 20\nnvm use 20\n"})}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mkdir af-hello\ncd af-hello\nnpm init -y\nnpm install adminforth express@4 typescript tsx @types/node --save-dev\nnpx tsc --init\n"})}),"\n",(0,i.jsx)(n.h2,{id:"env-variables",children:"Env variables"}),"\n",(0,i.jsxs)(n.p,{children:["Create ",(0,i.jsx)(n.code,{children:".env"})," file in root directory and replace all with following content:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="./.env"',children:'DATABASE_URL="file:./db.sqlite"\nADMINFORTH_SECRET=123\nNODE_ENV=development\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"\u261d\ufe0f In production:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["you should set ",(0,i.jsx)(n.code,{children:"NODE_ENV"})," to ",(0,i.jsx)(n.code,{children:"production"})," so it will not waste extra resources on hot reload."]}),"\n",(0,i.jsxs)(n.li,{children:["You should autogenerate ",(0,i.jsx)(n.code,{children:"ADMINFORTH_SECRET"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\u261d\ufe0f If you are using Git, obviously you should make sure you will never commit ",(0,i.jsx)(n.code,{children:".env"})," file to the repository, because\nit might contain your own sensitive secrets. So to follow best practices, we recommend to add ",(0,i.jsx)(n.code,{children:".env"})," into ",(0,i.jsx)(n.code,{children:".gitignore"})," and create ",(0,i.jsx)(n.code,{children:".env.sample"})," as template for other repository users.\nDuring deployment you should set ",(0,i.jsx)(n.code,{children:"ADMINFORTH_SECRET"})," in environment variables of Docker image or in other way without using ",(0,i.jsx)(n.code,{children:".env"})," file."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"database-creation",children:"Database creation"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"\u261d\ufe0f For demo purposes we will create a database using Prisma and SQLite. You can also use any existing database and don't install Prisma."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Create ",(0,i.jsx)(n.code,{children:"./schema.prisma"})," and put next content there:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",metastring:'title="./schema.prisma"',children:'generator client {\n  provider = "prisma-client-js"\n}\n\ndatasource db {\n  provider = "sqlite"\n  url      = env("DATABASE_FILE_URL")\n}\n\nmodel User {\n  id           String     @id\n  createdAt    DateTime \n  email        String   @unique\n  role         String     \n  passwordHash String\n  posts        Post[]\n}\n\nmodel Post {\n  id        String     @id\n  createdAt DateTime \n  title     String\n  content   String?\n  published Boolean  \n  author    User?    @relation(fields: [authorId], references: [id])\n  authorId  String?\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"Create database using prisma migration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx prisma migrate dev --name init\n"})}),"\n",(0,i.jsx)(n.h2,{id:"setting-up-a-first-demo",children:"Setting up a first demo"}),"\n",(0,i.jsx)(n.p,{children:"Users table will be used to store a credentials for login into backoffice itself."}),"\n",(0,i.jsxs)(n.p,{children:["Open ",(0,i.jsx)(n.code,{children:"package.json"}),", set ",(0,i.jsx)(n.code,{children:"type"})," to ",(0,i.jsx)(n.code,{children:"module"})," and add ",(0,i.jsx)(n.code,{children:"start"})," script:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="./package.json"',children:'{\n  ...\n//diff-add\n  "type": "module",\n  "scripts": {\n    ...\n//diff-add\n    "start": "tsx watch --env-file=.env index.ts"\n  },\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Create ",(0,i.jsx)(n.code,{children:"index.ts"})," file in root directory with following content:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="./index.ts"'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\u261d\ufe0f For simplicity we defined whole configuration in one file. Normally once configuration grows you should\nmove each resource configuration to separate file and organize them to folder and import them in ",(0,i.jsx)(n.code,{children:"index.ts"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Now you can run your app:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm start\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Open ",(0,i.jsx)(n.a,{href:"http://localhost:3500",children:"http://localhost:3500"})," in your browser and login with credentials ",(0,i.jsx)(n.code,{children:"adminforth"})," / ",(0,i.jsx)(n.code,{children:"adminforth"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"alt text",src:t(8332).A+"",width:"2428",height:"1932"})}),"\n",(0,i.jsxs)(n.p,{children:["After Login you should see:\n",(0,i.jsx)(n.img,{alt:"alt text",src:t(4973).A+"",width:"3700",height:"1932"})]}),"\n",(0,i.jsx)(n.h2,{id:"possible-configuration-options",children:"Possible configuration options"}),"\n",(0,i.jsxs)(n.p,{children:["Check ",(0,i.jsx)(n.a,{href:"/docs/api/types/AdminForthConfig/type-aliases/AdminForthConfig",children:"AdminForthConfig"})," for all possible options."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8332:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/localhost_3500_login-22b59511349c51948267c9a4080e4d87.png"},4973:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/localhost_3500_resource_aparts-dddac951816a2a7b58c84b6348828ecb.png"},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(6540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);