"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[3660],{7287:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"tutorial/Customization/Actions","title":"Actions","description":"Single record actions","source":"@site/docs/tutorial/03-Customization/09-Actions.md","sourceDirName":"tutorial/03-Customization","slug":"/tutorial/Customization/Actions","permalink":"/docs/tutorial/Customization/Actions","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":9,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Page Injections","permalink":"/docs/tutorial/Customization/pageInjections"},"next":{"title":"Menu Configuration","permalink":"/docs/tutorial/Customization/menuConfiguration"}}');var i=t(4848),o=t(8453);const r={},a="Actions",c={},d=[{value:"Single record actions",id:"single-record-actions",level:2},{value:"Action Configuration Options",id:"action-configuration-options",level:3},{value:"Access Control",id:"access-control",level:3},{value:"Action URL",id:"action-url",level:3},{value:"Custom bulk actions",id:"custom-bulk-actions",level:2},{value:"Limiting access to bulk actions",id:"limiting-access-to-bulk-actions",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"actions",children:"Actions"})}),"\n",(0,i.jsx)(n.h2,{id:"single-record-actions",children:"Single record actions"}),"\n",(0,i.jsx)(n.p,{children:"You might need to give admin users a feature to perform some action on a single record. Actions can be displayed as buttons in the list view and/or in the three-dots menu."}),"\n",(0,i.jsx)(n.p,{children:"Here's how to add a custom action:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="./resources/apartments.ts"',children:"{\n  resourceId: 'aparts',\n  options: {\n    actions: [\n      {\n        name: 'Auto submit',  // Display name of the action\n        icon: 'flowbite:play-solid',  // Icon to display (using Flowbite icons)\n        \n        // Control who can see/use this action\n        allowed: ({ adminUser, standardAllowedActions }) => {\n          return true;  // Allow everyone\n        },\n        \n        // Handler function when action is triggered\n        action: async ({ recordId, adminUser }) => {\n          console.log(\"auto submit\", recordId, adminUser);\n          return { \n            ok: true, \n            successMessage: \"Auto submitted\" \n          };\n        },\n\n        // Configure where the action appears\n        showIn: {\n          list: true,              // Show in list view\n          showButton: true,        // Show as a button\n          showThreeDotsMenu: true, // Show in three-dots menu\n        }\n      }\n    ]\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"action-configuration-options",children:"Action Configuration Options"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"name"}),": Display name of the action"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"icon"}),": Icon to show (using Flowbite icon set)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"allowed"}),": Function to control access to the action"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"action"}),": Handler function that executes when action is triggered"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"showIn"}),": Controls where the action appears","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"list"}),": whether to show in list view"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"showButton"}),": whether to show as a button on show view"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"showThreeDotsMenu"}),": when to show in the three-dots menu of show view"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"access-control",children:"Access Control"}),"\n",(0,i.jsxs)(n.p,{children:["You can control who can use an action through the ",(0,i.jsx)(n.code,{children:"allowed"})," function. This function receives:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="./resources/apartments.ts"',children:"{\n  options: {\n    actions: [\n      {\n        name: 'Auto submit',\n        allowed: async ({ adminUser, standardAllowedActions }) => {\n          if (adminUser.dbUser.role !== 'superadmin') {\n            return false;\n          }\n          return true;\n        },\n        // ... other configuration\n      }\n    ]\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"allowed"})," function receives:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"adminUser"}),": The current admin user object"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"standardAllowedActions"}),": Standard permissions for the current user"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Return:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"true"})," to allow access"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"false"})," to deny access"]}),"\n",(0,i.jsx)(n.li,{children:"A string with an error message to explain why access was denied"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Here is how it looks:\n",(0,i.jsx)(n.img,{alt:"alt text",src:t(308).A+"",width:"3700",height:"2044"})]}),"\n",(0,i.jsx)(n.p,{children:"You might want to allow only certain users to perform your custom bulk action."}),"\n",(0,i.jsxs)(n.p,{children:["To implement this limitation use ",(0,i.jsx)(n.code,{children:"allowed"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"If you want to prohibit the use of bulk action for user, you can do it this way:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="./resources/apartments.ts"',children:"bulkActions: [\n  {\n    label: 'Mark as listed',\n    icon: 'flowbite:eye-solid',\n    allowed: async ({ resource, adminUser, selectedIds }) => {\n      if (adminUser.dbUser.role !== 'superadmin') {\n        return false;\n      } \n      return true;\n    },\n    confirm: 'Are you sure you want to mark all selected apartments as listed?',\n    action: async ({ resource, selectedIds, adminUser, tr }) => {\n        const stmt = admin.resource('aparts').dataConnector.client.prepare(\n          `UPDATE apartments SET listed = 1 WHERE id IN (${selectedIds.map(() => '?').join(',')})`\n        );\n        await stmt.run(...selectedIds);\n\n        return { ok: true, message: tr(`Marked ${selectedIds.length} apartments as listed`) };\n    },\n  }\n],\n"})}),"\n",(0,i.jsx)(n.h3,{id:"action-url",children:"Action URL"}),"\n",(0,i.jsxs)(n.p,{children:["Instead of defining an ",(0,i.jsx)(n.code,{children:"action"})," handler, you can specify a ",(0,i.jsx)(n.code,{children:"url"})," that the user will be redirected to when clicking the action button:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="./resources/apartments.ts"',children:"{\n  name: 'View details',\n  icon: 'flowbite:eye-solid',\n  url: '/resource/aparts',  // URL to redirect to\n  showIn: {\n    list: true,\n    showButton: true,\n    showThreeDotsMenu: true,\n  } \n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The URL can be:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A relative path within your admin panel (starting with '/')"}),"\n",(0,i.jsx)(n.li,{children:"An absolute URL (starting with 'http://' or 'https://')"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["To open the URL in a new tab, add ",(0,i.jsx)(n.code,{children:"?target=_blank"})," to the URL:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"{\n  name: 'View on Google',\n  icon: 'flowbite:external-link-solid',\n  url: 'https://google.com/search?q=apartment&target=_blank',\n  showIn: {\n    list: true,\n    showButton: true\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\u261d\ufe0f Note: You cannot specify both ",(0,i.jsx)(n.code,{children:"action"})," and ",(0,i.jsx)(n.code,{children:"url"})," for the same action - only one should be used."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"custom-bulk-actions",children:"Custom bulk actions"}),"\n",(0,i.jsx)(n.p,{children:"You might need to give admin users a feature to perform same action on multiple records at once."}),"\n",(0,i.jsxs)(n.p,{children:["For example you might want allow setting ",(0,i.jsx)(n.code,{children:"listed"})," field to ",(0,i.jsx)(n.code,{children:"false"})," for multiple apartment records at once."]}),"\n",(0,i.jsx)(n.p,{children:"AdminForth by default provides a checkbox in first column of the list view for this purposes."}),"\n",(0,i.jsxs)(n.p,{children:["By default AdminForth provides only one bulk action ",(0,i.jsx)(n.code,{children:"delete"})," which allows to delete multiple records at once\n(if deletion for records available by ",(0,i.jsx)(n.a,{href:"/docs/api/Back/interfaces/ResourceOptions/#allowedactions",children:"resource.options.allowedActions"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"To add custom bulk action quickly:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="./resources/apartments.ts"',children:"//diff-add\nimport { AdminUser } from 'adminforth';\n//diff-add\nimport { admin } from '../index';\n\n{\n  ...\n  resourceId: 'aparts',\n     ...\n     options: {\n//diff-add\n        bulkActions: [\n//diff-add\n          {\n//diff-add\n            label: 'Mark as listed',\n//diff-add\n            icon: 'flowbite:eye-solid',\n//diff-add\n            // if optional `confirm` is provided, user will be asked to confirm action\n//diff-add\n            confirm: 'Are you sure you want to mark all selected apartments as listed?',\n//diff-add\n            action: async function ({selectedIds, adminUser }: {selectedIds: any[], adminUser: AdminUser }) {\n//diff-add\n              const stmt = admin.resource('aparts').dataConnector.client.prepare(`UPDATE apartments SET listed = 1 WHERE id IN (${selectedIds.map(() => '?').join(',')})`);\n//diff-add\n              await stmt.run(...selectedIds);\n//diff-add\n              return { ok: true, error: false, successMessage: `Marked ${selectedIds.length} apartments as listed` };\n//diff-add\n            },\n//diff-add\n          }\n//diff-add\n        ],\n      }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Action code is called on the server side only and allowed to only authorized users."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"\u261d\ufe0f AdminForth provides no way to update the data, it is your responsibility to manage the data by selectedIds. You can use any ORM system\nor write raw queries to update the data."}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\u261d\ufe0f You can use ",(0,i.jsx)(n.code,{children:"adminUser"})," object to check whether user is allowed to perform bulk action"]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Action response can return optional ",(0,i.jsx)(n.code,{children:"successMessage"})," property which will be shown to user after action is performed. If this property is not provided, no messages will be shown to user."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Here is how it looks:\n",(0,i.jsx)(n.img,{alt:"alt text",src:t(308).A+"",width:"3700",height:"2044"})]}),"\n",(0,i.jsx)(n.h2,{id:"limiting-access-to-bulk-actions",children:"Limiting access to bulk actions"}),"\n",(0,i.jsx)(n.p,{children:"You might want to allow only certain users to perform your custom bulk action."}),"\n",(0,i.jsxs)(n.p,{children:["To implement this limitation use ",(0,i.jsx)(n.code,{children:"allowed"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"If you want to prohibit the use of bulk action for user, you can do it this way:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="./resources/apartments.ts"',children:"bulkActions: [\n  {\n    label: 'Mark as listed',\n    icon: 'flowbite:eye-solid',\n//diff-add\n    allowed: async ({ resource, adminUser, selectedIds }) => {\n//diff-add     \n      if (adminUser.dbUser.role !== 'superadmin') {\n//diff-add       \n        return false;\n//diff-add\n        } \n//diff-add       \n        return true;\n//diff-add       \n    },\n      // if optional `confirm` is provided, user will be asked to confirm action\n    confirm: 'Are you sure you want to mark all selected apartments as listed?',\n    action: async function ({selectedIds, adminUser }: {selectedIds: any[], adminUser: AdminUser }, allow) {\n      const stmt = admin.resource('aparts').dataConnector.client.prepare(`UPDATE apartments SET listed = 1 WHERE id IN (${selectedIds.map(() => '?').join(',')}`);\n      await stmt.run(...selectedIds);\n      return { ok: true, error: false, successMessage: `Marked ${selectedIds.length} apartments as listed` };\n    },\n  }\n],\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},308:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/Custom bulk actions-d43f3c77538ddc5e33c6891692bec9b0.png"},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);