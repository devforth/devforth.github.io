"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[6956],{2143:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=t(4848),r=t(8453);const i={},s="Getting Started",o={id:"tutorial/gettingStarted",title:"Getting Started",description:"Prerequisites",source:"@site/docs/tutorial/01-gettingStarted.md",sourceDirName:"tutorial",slug:"/tutorial/gettingStarted",permalink:"/docs/tutorial/gettingStarted",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",next:{title:"Glossary",permalink:"/docs/tutorial/glossary"}},l={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Basic Philosophy",id:"basic-philosophy",level:2},{value:"Setting up a first demo",id:"setting-up-a-first-demo",level:2},{value:"Possible configuration options",id:"possible-configuration-options",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"getting-started",children:"Getting Started"}),"\n",(0,a.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsx)(n.p,{children:"AdminForth requires Node v18 or higher:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"nvm install 18\nnvm alias default 18\nnvm use 18\n"})}),"\n",(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir myadmin\ncd myadmin\nnpm install adminforth\n"})}),"\n",(0,a.jsxs)(n.p,{children:["AdminForth does not provide own HTTP server, but can add own listeners over exisitng ",(0,a.jsx)(n.a,{href:"https://expressjs.com/",children:"Express"})," server (Fastify support is planned in future). This allows to create custom APIs for backoffice in a way you know."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install express@4.19.2\n"})}),"\n",(0,a.jsxs)(n.p,{children:["For demo purposes we will use SQLite data source. You can use Postgres, Mongo or Clickhouse as well, or create own data source by ",(0,a.jsx)(n.a,{href:"/docs/api/types/AdminForthConfig/interfaces/IAdminForthDataSourceConnector",children:"implementing DataSource Connector interface"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install better-sqlite3@10.0.0\n"})}),"\n",(0,a.jsx)(n.p,{children:"You can use AdminForth in pure Node, but we recommend using TypeScript for better development experience:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install typescript@5.4.5 tsx@4.11.2 --save-dev\n"})}),"\n",(0,a.jsx)(n.h2,{id:"basic-philosophy",children:"Basic Philosophy"}),"\n",(0,a.jsx)(n.p,{children:"AdminForth connects to existing databases and provides a backoffice for managing data including CRUD operations, filtering, sorting, and more."}),"\n",(0,a.jsx)(n.p,{children:"Database should be already created by using any database management tool, ORM or migrator. AdminForth does not provide a way to create tables or columns in the database."}),"\n",(0,a.jsx)(n.p,{children:'Once you have a database, you pass a connection string to AdminForth and define resources(tables) and columns you would like to see in backoffice. For most DBs AdminForth can "discover" column types and constraints (e.g. max-length) by connecting to DB. However you can redefine them in AdminForth configuration. Type and constraints definition are take precedence over DB schema.'}),"\n",(0,a.jsx)(n.p,{children:'Also in AdminForth you can define in "Vue" way:'}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"how each field will be rendered"}),"\n",(0,a.jsx)(n.li,{children:"create own pages e.g. Dashboards"}),"\n",(0,a.jsx)(n.li,{children:"insert injections into standard pages (e.g. add diagram to list view)"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"setting-up-a-first-demo",children:"Setting up a first demo"}),"\n",(0,a.jsxs)(n.p,{children:["In the demo we will create a simple database with 2 tables: ",(0,a.jsx)(n.code,{children:"apartments"})," and ",(0,a.jsx)(n.code,{children:"users"}),". We will just use plain SQL to create tables and insert some fake data."]}),"\n",(0,a.jsx)(n.p,{children:"Users table will be used to store a credentials for login into backoffice itself."}),"\n",(0,a.jsxs)(n.p,{children:["Open ",(0,a.jsx)(n.code,{children:"package.json"}),", set ",(0,a.jsx)(n.code,{children:"type"})," to ",(0,a.jsx)(n.code,{children:"module"})," and add ",(0,a.jsx)(n.code,{children:"start"})," script:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",metastring:'title="./package.json"',children:'{\n  ...\n//diff-add\n  "type": "module",\n  "scripts": {\n    ...\n//diff-add\n    "start": "ADMINFORTH_SECRET=CHANGE_ME_IN_PRODUCTION NODE_ENV=development tsx watch index.ts"\n  },\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Create ",(0,a.jsx)(n.code,{children:"index.ts"})," file in root directory with following content:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:'title="./index.ts"',children:"import betterSqlite3 from 'better-sqlite3';\nimport express from 'express';\nimport AdminForth from 'adminforth';\n\nconst DB_FILE = 'test.sqlite';\nlet db;\n\nconst ADMIN_BASE_URL = '';\n\nexport const admin = new AdminForth({\n  baseUrl : ADMIN_BASE_URL,\n  rootUser: {\n    username: 'adminforth',  // use these as credentials to login\n    password: 'adminforth',\n  },\n  auth: {\n    resourceId: 'users',  // resource for getting user\n    usernameField: 'email',\n    passwordHashField: 'password_hash',\n  },\n  customization: {\n    brandName: 'My Admin',\n    datesFormat: 'D MMM YY HH:mm:ss',\n    emptyFieldPlaceholder: '-',\n  },\n\n  dataSources: [\n    {\n      id: 'maindb',\n      url: `sqlite://${DB_FILE}`\n    },\n  ],\n  resources: [\n    {\n      dataSource: 'maindb', \n      table: 'apartments',\n      resourceId: 'aparts', // resourceId is defaulted to table name but you can change it e.g. \n                             // in case of same table names from different data sources\n      label: 'Apartments',   // label is defaulted to table name but you can change it\n      recordLabel: (r) => `\ud83c\udfe1 ${r.title}`,\n      columns: [\n        { \n          name: 'id', \n          label: 'Identifier',  // if you wish you can redefine label\n          showIn: ['filter', 'show'], // show in filter and in show page\n          primaryKey: true,\n          fillOnCreate: ({initialRecord, adminUser}) => Math.random().toString(36).substring(7),  // initialRecord is values user entered, adminUser object of user who creates record\n        },\n        { \n          name: 'title',\n          required: true,\n          showIn: ['list', 'create', 'edit', 'filter', 'show'],  // the default is full set\n          maxLength: 255,  // you can set max length for string fields\n          minLength: 3,  // you can set min length for string fields\n        }, \n        {\n          name: 'created_at',\n          type: AdminForth.Types.DATETIME ,\n          allowMinMaxQuery: true,\n          showIn: ['list', 'filter', 'show', 'edit'],\n          fillOnCreate: ({initialRecord, adminUser}) => (new Date()).toISOString(),\n        },\n        { \n          name: 'price',\n          min: 10,\n          max: 10000.12,\n          allowMinMaxQuery: true,  // use better experience for filtering e.g. date range, set it only if you have index on this column or if there will be low number of rows\n          editingNote: 'Price is in USD',  // you can appear note on editing or creating page\n        },\n        { \n          name: 'square_meter', \n          label: 'Square', \n          allowMinMaxQuery: true,\n          minValue: 1,  // you can set min /max value for number fields\n          maxValue: 1000,\n        },\n        { \n          name: 'number_of_rooms',\n          allowMinMaxQuery: true,\n          enum: [\n            { value: 1, label: '1 room' },\n            { value: 2, label: '2 rooms' },\n            { value: 3, label: '3 rooms' },\n            { value: 4, label: '4 rooms' },\n            { value: 5, label: '5 rooms' },\n          ],\n        },\n        { \n          name: 'description',\n          sortable: false,\n          showIn: ['show', 'edit', 'create', 'filter'],\n        },\n        {\n          name: 'country',\n          enum: [{\n            value: 'US',\n            label: 'United States'\n          }, {\n            value: 'DE',\n            label: 'Germany'\n          }, {\n            value: 'FR',\n            label: 'France'\n          }, {\n            value: 'UK',\n            label: 'United Kingdom'\n          }, {\n            value:'NL',\n            label: 'Netherlands'\n          }, {\n            value: 'IT',\n            label: 'Italy'\n          }, {\n            value: 'ES',\n            label: 'Spain'\n          }, {\n            value: 'DK',\n            label: 'Denmark'\n          }, {\n            value: 'PL',\n            label: 'Poland'\n          }, {\n            value: 'UA',\n            label: 'Ukraine'\n          }, {\n            value: null,\n            label: 'Not defined'\n          }],\n        },\n        {\n          name: 'listed',\n          required: true,  // will be required on create/edit\n        },\n        {\n          name: 'realtor_id',\n          foreignResource: {\n            resourceId: 'users',\n          }\n        }\n      ],\n      options: {\n        listPageSize: 12,\n        allowedActions:{\n          edit: true,\n          delete: true,\n          show: true,\n          filter: true,\n        },\n      },\n    },\n    { \n      dataSource: 'maindb', \n      table: 'users',\n      resourceId: 'users',\n      label: 'Users',  \n      recordLabel: (r) => `\ud83d\udc64 ${r.email}`,\n      columns: [\n        { \n          name: 'id', \n          primaryKey: true,\n          fillOnCreate: ({initialRecord, adminUser}) => Math.random().toString(36).substring(7),\n          showIn: ['list', 'filter', 'show'],\n        },\n        { \n          name: 'email', \n          required: true,\n          isUnique: true,\n          validation: [\n            {\n              regExp: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$',\n              message: 'Email is not valid, must be in format example@test.com'\n            },\n          ]\n        },\n        { \n          name: 'created_at', \n          type: AdminForth.Types.DATETIME,\n          showIn: ['list', 'filter', 'show'],\n          fillOnCreate: ({initialRecord, adminUser}) => (new Date()).toISOString(),\n        },\n        {\n          name: 'role',\n          enum: [\n            { value: 'superadmin', label: 'Super Admin' },\n            { value: 'user', label: 'User' },\n          ]\n        },\n        {\n          name: 'password',\n          virtual: true,  // field will not be persisted into db\n          required: { create: true }, // make required only on create page\n          editingNote: { edit: 'Leave empty to keep password unchanged' },\n          minLength: 8,\n          type: AdminForth.Types.STRING,\n          showIn: ['create', 'edit'], // to show field only on create and edit pages\n          masked: true, // to show stars in input field\n        }\n      ],\n      hooks: {\n        create: {\n          beforeSave: async ({ record, adminUser, resource }) => {\n            record.password_hash = await AdminForth.Utils.generatePasswordHash(record.password);\n            return { ok: true };\n          }\n        },\n        edit: {\n          beforeSave: async ({ record, adminUser, resource}) => {\n            if (record.password) {\n              record.password_hash = await AdminForth.Utils.generatePasswordHash(record.password);\n            }\n            return { ok: true }\n          },\n        },\n      }\n    },\n  ],\n  menu: [\n    {\n      label: 'Core',\n      icon: 'flowbite:brain-solid', // any icon from iconify supported in format <setname>:<icon>, e.g. from here https://icon-sets.iconify.design/flowbite/\n      open: true,\n      children: [\n        {\n          homepage: true,\n          label: 'Appartments',\n          icon: 'flowbite:home-solid',\n          resourceId: 'aparts',\n        },\n      ]\n    },\n    {\n      type: 'gap'\n    },\n    {\n      type: 'divider'\n    },\n    {\n      type: 'heading',\n      label: 'SYSTEM',\n    },\n    {\n      label: 'Users',\n      icon: 'flowbite:user-solid',\n      resourceId: 'users',\n    }\n  ],\n});\n\n\nasync function initDataBase() {\n  db = betterSqlite3(DB_FILE);\n\n  const tableExists = db.prepare(`SELECT name FROM sqlite_master WHERE type='table' AND name='apartments';`).get();\n  if (!tableExists) {\n    // if no table - create couple of tables and fill them with some mock data\n    await db.prepare(`\n      CREATE TABLE apartments (\n          id VARCHAR(20) PRIMARY KEY NOT NULL,\n          title VARCHAR(255) NOT NULL,\n          square_meter REAL,\n          price DECIMAL(10, 2) NOT NULL,\n          number_of_rooms INT,\n          description TEXT,\n          country VARCHAR(2),\n          listed BOOLEAN DEFAULT FALSE,\n          created_at TIMESTAMP,\n          realtor_id VARCHAR(255)\n      );`).run();\n\n    await db.prepare(`\n      CREATE TABLE users (\n          id VARCHAR(255) PRIMARY KEY NOT NULL,\n          email VARCHAR(255) NOT NULL,\n          password_hash VARCHAR(255) NOT NULL,\n          created_at VARCHAR(255) NOT NULL,\n          role VARCHAR(255) NOT NULL\n      );`).run();\n\n    for (let i = 0; i < 100; i++) {\n      await db.prepare(`\n        INSERT INTO apartments (\n          id, title, square_meter, price, \n          number_of_rooms, description, \n          created_at, listed, \n          country\n        ) VALUES (\n         '${i}', 'Apartment ${i}', ${(Math.random() * 100).toFixed(1)}, ${(Math.random() * 10000).toFixed(2)}, \n         ${ Math.floor(Math.random() * 5) }, 'Next gen apartments', \n         ${ Date.now() / 1000 - Math.random() * 14 * 60 * 60 * 24 }, ${i % 2 == 0}, \n         '${['US', 'DE', 'FR', 'UK', 'NL', 'IT', 'ES', 'DK', 'PL', 'UA'][Math.floor(Math.random() * 10)]}'\n        )`).run();\n    }\n  }\n}\n\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  // if script is executed directly e.g. node index.ts or npm start\n\n  await initDataBase();\n\n  const app = express()\n  app.use(express.json());\n  const port = 3500;\n\n  // needed to compile SPA. Call it here or from a build script e.g. in Docker build time to reduce downtime\n  await admin.bundleNow({ hotReload: process.env.NODE_ENV === 'development'});\n  console.log('Bundling AdminForth done. For faster serving consider calling bundleNow() from a build script.');\n\n\n  // serve after you added all api\n  admin.express.serve(app)\n  admin.discoverDatabases();\n\n\n  app.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`)\n    console.log(`\\n\u26a1 AdminForth is available at http://localhost:${port}${ADMIN_BASE_URL}\\n`)\n  });\n}\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["\ud83e\udee8 For simplicity we defined whole configuration in one file. Normally once configuration grows you should\nmove each resource configuration to separate file and organize them to folder and import them in ",(0,a.jsx)(n.code,{children:"index.ts"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Now you can run your app:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm start\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Open ",(0,a.jsx)(n.a,{href:"http://localhost:3500",children:"http://localhost:3500"})," in your browser and login with credentials ",(0,a.jsx)(n.code,{children:"adminforth"})," / ",(0,a.jsx)(n.code,{children:"adminforth"}),"."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"alt text",src:t(6448).A+"",width:"2428",height:"1932"})}),"\n",(0,a.jsxs)(n.p,{children:["After Login you should see:\n",(0,a.jsx)(n.img,{alt:"alt text",src:t(4401).A+"",width:"3700",height:"1932"})]}),"\n",(0,a.jsx)(n.h2,{id:"possible-configuration-options",children:"Possible configuration options"}),"\n",(0,a.jsxs)(n.p,{children:["Check ",(0,a.jsx)(n.a,{href:"/docs/api/types/AdminForthConfig/type-aliases/AdminForthConfig",children:"AdminForthConfig"})," for all possible options."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},6448:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/localhost_3500_login-22b59511349c51948267c9a4080e4d87.png"},4401:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/localhost_3500_resource_aparts-dddac951816a2a7b58c84b6348828ecb.png"},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(6540);const r={},i=a.createContext(r);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);