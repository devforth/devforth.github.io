"use strict";(self.webpackChunkadminforth=self.webpackChunkadminforth||[]).push([[8910],{6325:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var r=o(4848),i=o(8453);const s={},t="Glossary",a={id:"tutorial/glossary",title:"Glossary",description:"dataSource",source:"@site/docs/tutorial/02-glossary.md",sourceDirName:"tutorial",slug:"/tutorial/glossary",permalink:"/docs/tutorial/glossary",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Hello world app",permalink:"/docs/tutorial/helloWorld"},next:{title:"Branding and Theming",permalink:"/docs/tutorial/Customization/branding"}},l={},d=[{value:"dataSource",id:"datasource",level:2},{value:"resource",id:"resource",level:2},{value:"column",id:"column",level:2},{value:"record",id:"record",level:2},{value:"action",id:"action",level:2},{value:"adminUser",id:"adminuser",level:2},{value:"root user",id:"root-user",level:2},{value:"hook",id:"hook",level:2},{value:"component",id:"component",level:2},{value:"field",id:"field",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"glossary",children:"Glossary"}),"\n",(0,r.jsx)(n.h2,{id:"datasource",children:"dataSource"}),"\n",(0,r.jsxs)(n.p,{children:["A DataSource is a connection to one database. Datasources have id for references from resources and URL which follows the standard URI format. For example ",(0,r.jsx)(n.code,{children:"mysql://user:password@localhost:3306/database"}),".\nIt used to:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Discover the columns in the database"}),"\n",(0,r.jsx)(n.li,{children:"Make queries to get the list and show records"}),"\n",(0,r.jsx)(n.li,{children:"Make queries to modify data"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"There might be several datasources in the system for various databases e.g. One 2 Mongo DBs and 1 Postgres DB."}),"\n",(0,r.jsx)(n.h2,{id:"resource",children:"resource"}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.a,{href:"/docs/api/types/AdminForthConfig/type-aliases/AdminForthResource",children:"Resource"})," is a representation of a table or collection in AdminForth. One resource is one table in the database.\nIt has a ",(0,r.jsx)(n.code,{children:"name"})," which should match name in database, a datasource id, and a list of columns.\nAlso it has various customization options."]}),"\n",(0,r.jsx)(n.h2,{id:"column",children:"column"}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.a,{href:"/docs/api/types/AdminForthConfig/type-aliases/AdminForthResourceColumn",children:"Column"})," is a representation of a column in a table. It has a ",(0,r.jsx)(n.code,{children:"name"})," which should be equal to name in database and various configuration options."]}),"\n",(0,r.jsx)(n.h2,{id:"record",children:"record"}),"\n",(0,r.jsx)(n.p,{children:"A record is a row in a relational database table. Or Document in document database table."}),"\n",(0,r.jsx)(n.h2,{id:"action",children:"action"}),"\n",(0,r.jsx)(n.p,{children:"Action is one of operations which can be performed on the resource or it's records."}),"\n",(0,r.jsxs)(n.p,{children:["There are next ",(0,r.jsx)(n.a,{href:"/docs/api/types/AdminForthConfig/enumerations/AllowedActionsEnum",children:"actions"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"create"}),"\n",(0,r.jsx)(n.li,{children:"edit"}),"\n",(0,r.jsx)(n.li,{children:"delete"}),"\n",(0,r.jsx)(n.li,{children:"list"}),"\n",(0,r.jsx)(n.li,{children:"show"}),"\n",(0,r.jsx)(n.li,{children:"filter"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"adminuser",children:"adminUser"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/api/types/AdminForthConfig/type-aliases/AdminUser",children:"Object"})," which represents a user who logged in to the AdminForth."]}),"\n",(0,r.jsx)(n.h2,{id:"root-user",children:"root user"}),"\n",(0,r.jsxs)(n.p,{children:["Root user is adminUser who logged in by using ",(0,r.jsx)(n.a,{href:"/docs/api/types/AdminForthConfig/type-aliases/AdminForthConfig#rootuser",children:"rootuser credentials"}),".\nRoot user should be used only by developer during development or to create user on the production for himself.\nAfter creating normal user we recommend completely remove Root user credentials from the config and redeploy the app."]}),"\n",(0,r.jsx)(n.h2,{id:"hook",children:"hook"}),"\n",(0,r.jsx)(n.p,{children:"Hook is a optional async function which allows to inject in backend logic before executing the datasource query or after it"}),"\n",(0,r.jsx)(n.h2,{id:"component",children:"component"}),"\n",(0,r.jsx)(n.p,{children:"Component is a Vue component which is used to add or modify UI elements in AdminForth. It can be used as a full custom page with a link in menu or as a part of the existing AdminForth page"}),"\n",(0,r.jsx)(n.h2,{id:"field",children:"field"}),"\n",(0,r.jsx)(n.p,{children:"Value of the column in the record."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>a});var r=o(6540);const i={},s=r.createContext(i);function t(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);